module.exports = {"version":3,"file":"main.js","sources":["../src/Helpers/MemoryHelper.ts","../src/utils/Constants.ts","../src/utils/constants.ts","../src/utils/UserException.ts","../src/Helpers/RoomHelper.ts","../src/utils/config.ts","../src/Api/Room.Api.ts","../src/Jobs/GetEnergyJobs.ts","../src/Jobs/ClaimPartJobs.ts","../src/Jobs/WorkPartJobs.ts","../src/Jobs/CarryPartJobs.ts","../src/Helpers/MemoryHelper_Room.ts","../src/Api/Spawn.Api.ts","../src/Helpers/SpawnHelper.ts","../src/Api/Memory.Api.ts","../src/Helpers/EmpireHelper.ts","../src/utils/militaryConfig.ts","../src/Api/Empire.Api.ts","../src/Managers/EmpireManager.ts","../src/Managers/MemoryManagement.ts","../src/Managers/RoomManager.ts","../src/Managers/SpawnManager.ts","../node_modules/source-map/lib/base64.js","../node_modules/source-map/lib/base64-vlq.js","../node_modules/source-map/lib/util.js","../node_modules/source-map/lib/array-set.js","../node_modules/source-map/lib/binary-search.js","../node_modules/source-map/lib/quick-sort.js","../node_modules/source-map/lib/source-map-consumer.js","../node_modules/source-map/source-map.js","../src/utils/ErrorMapper.ts","../src/Helpers/UtilHelper.ts","../src/Managers/RoomVisuals/RoomVisualHelper.ts","../src/Managers/RoomVisuals/RoomVisual.Api.ts","../src/Managers/RoomVisuals/RoomVisualManager.ts","../src/Helpers/Normalize.ts","../src/Helpers/CreepHelper.ts","../src/Api/Creep.Api.ts","../src/Managers/Roles/MinerCreepManager.ts","../src/Managers/Roles/HarvesterCreepManager.ts","../src/Managers/Roles/WorkerCreepManager.ts","../src/Managers/Roles/LorryCreepManager.ts","../src/Managers/Roles/PowerUpgraderCreepManager.ts","../src/Managers/Roles/RemoteMinerCreepManager.ts","../src/Managers/Roles/RemoteHarvesterCreepManager.ts","../src/Managers/Roles/RemoteColonizerCreepManager.ts","../src/Managers/Roles/ClaimerCreepManager.ts","../src/Api/CreepMili.Api.ts","../src/Managers/Roles/RemoteDefenderCreepManager.ts","../src/Managers/Roles/RemoteReserverCreepManager.ts","../src/Managers/Roles/ZealotCreepManager.ts","../src/Managers/Roles/MedicCreepManager.ts","../src/Managers/Roles/StalkerCreepManager.ts","../src/Managers/Roles/DomesticDefenderCreepManager.ts","../src/Managers/CreepManager.ts","../src/Helpers/ConsoleCommands.ts","../src/main.ts"],"sourcesContent":["import MemoryApi from \"Api/Memory.Api\";\r\n\r\n// Accessing Memory Helpers\r\nexport default class MemoryHelper {\r\n    /**\r\n     * Returns an array of creeps of a role\r\n     * @param role The role to check for\r\n     */\r\n    public static getCreepOfRole(room: Room, role: RoleConstant, forceUpdate?: boolean): Creep[] {\r\n        const filterByRole = (creep: Creep) => {\r\n            return creep.memory.role === role;\r\n        };\r\n        const creepsOfRole = MemoryApi.getMyCreeps(room.name, filterByRole);\r\n\r\n        return creepsOfRole;\r\n    }\r\n\r\n    /**\r\n     * check if the room name exists as a dependent room\r\n     * @param roomName the name of the room we are cheking for\r\n     */\r\n    public static dependentRoomExists(roomName: string): boolean {\r\n        const ownedRooms: Room[] = MemoryApi.getOwnedRooms();\r\n\r\n        // Loop over d-rooms within each room looking for the parameter room name\r\n        for (const room of ownedRooms) {\r\n\r\n            for (const rr of room.memory.remoteRooms!) {\r\n                if (rr && roomName === rr.roomName) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            for (const cr of room.memory.claimRooms!) {\r\n                if (cr && roomName === cr.roomName) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            for (const ar of room.memory.attackRooms!) {\r\n                if (ar && roomName === ar.roomName) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Performs the length checks and null checks for all getXXX functions that use IDs to get the objects\r\n     * @param idArray An array of ids to check\r\n     */\r\n    public static getOnlyObjectsFromIDs<T>(idArray: string[]): T[] {\r\n        if (idArray.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const objects: T[] = [];\r\n        _.forEach(idArray, (id: string) => {\r\n            const object: T | null = Game.getObjectById(id);\r\n            if (object !== null) {\r\n                objects.push(object);\r\n            }\r\n        });\r\n\r\n        return objects;\r\n    }\r\n\r\n    /**\r\n     * clear the memory structure for the creep\r\n     * @param creep the creep we want to clear the memory of\r\n     */\r\n    public static clearCreepMemory(creep: Creep) {\r\n        // check if the memory object exists and delete it\r\n        if (Memory.creeps[creep.name]) {\r\n            delete creep.memory;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clear the memory for a room\r\n     * @param room the room we want to clear the memory for\r\n     */\r\n    public static clearRoomMemory(room: Room) {\r\n        // check if the memory structures exists and delete it\r\n        if (Memory.rooms[room.name]) {\r\n            delete room.memory;\r\n        }\r\n    }\r\n}\r\n","// Room State Constants\r\nexport const ROOM_STATE_INTRO = 0;\r\nexport const ROOM_STATE_BEGINNER = 1;\r\nexport const ROOM_STATE_INTER = 2;\r\nexport const ROOM_STATE_ADVANCED = 3;\r\nexport const ROOM_STATE_UPGRADER = 4;\r\nexport const ROOM_STATE_SEIGE = 5;\r\nexport const ROOM_STATE_STIMULATE = 6;\r\nexport const ROOM_STATE_NUKE_INBOUND = 7;\r\n\r\n// Role Constants\r\nexport const ROLE_MINER = \"miner\";\r\nexport const ROLE_HARVESTER = \"harvester\";\r\nexport const ROLE_WORKER = \"worker\";\r\nexport const ROLE_POWER_UPGRADER = \"powerUpgrader\";\r\nexport const ROLE_LORRY = \"lorry\";\r\nexport const ROLE_REMOTE_MINER = \"remoteMiner\";\r\nexport const ROLE_REMOTE_HARVESTER = \"remoteHarvester\";\r\nexport const ROLE_REMOTE_RESERVER = \"remoteReserver\";\r\nexport const ROLE_REMOTE_DEFENDER = \"remoteDefender\";\r\nexport const ROLE_CLAIMER = \"claimer\";\r\nexport const ROLE_COLONIZER = \"remoteColonizer\";\r\nexport const ROLE_ZEALOT = \"zealot\";\r\nexport const ROLE_STALKER = \"stalker\";\r\nexport const ROLE_MEDIC = \"medic\";\r\nexport const ROLE_DOMESTIC_DEFENDER = \"domesticDefender\";\r\n\r\n// Tier Constants\r\nexport const TIER_1 = 300;\r\nexport const TIER_2 = 550;\r\nexport const TIER_3 = 800;\r\nexport const TIER_4 = 1300;\r\nexport const TIER_5 = 1800;\r\nexport const TIER_6 = 2300;\r\nexport const TIER_7 = 5300;\r\nexport const TIER_8 = 12300;\r\n\r\n// Attack Flag Constants\r\nexport const ZEALOT_SOLO = 1;\r\nexport const STALKER_SOLO = 2;\r\nexport const STANDARD_SQUAD = 3;\r\nexport const CLAIM_FLAG = 4;\r\nexport const REMOTE_FLAG = 5;\r\nexport const OVERRIDE_D_ROOM_FLAG = 6;\r\nexport const STIMULATE_FLAG = 7;\r\n\r\n// Creep Body Layout Constants\r\nexport const GROUPED = \"grouped\";\r\nexport const COLLATED = \"collated\";\r\n\r\n// Role Priority List\r\n// * Keep this list ordered by spawn priority\r\nexport const domesticRolePriority: RoleConstant[] = [\r\n    ROLE_MINER,\r\n    ROLE_HARVESTER,\r\n    ROLE_WORKER,\r\n    ROLE_POWER_UPGRADER,\r\n    ROLE_LORRY\r\n];\r\n\r\n// * Keep this list ordered by spawn priority\r\nexport const remoteRolePriority: RoleConstant[] = [\r\n    ROLE_REMOTE_RESERVER,\r\n    ROLE_REMOTE_MINER,\r\n    ROLE_REMOTE_HARVESTER,\r\n    ROLE_REMOTE_DEFENDER,\r\n    ROLE_COLONIZER\r\n];\r\n\r\n// * Keep this list ordered by spawn priority\r\nexport const militaryRolePriority: RoleConstant[] = [ROLE_MEDIC, ROLE_STALKER, ROLE_ZEALOT];\r\n\r\n// List of every structure in the game\r\nexport const ALL_STRUCTURE_TYPES: StructureConstant[] = [\r\n    STRUCTURE_EXTENSION,\r\n    STRUCTURE_RAMPART,\r\n    STRUCTURE_ROAD,\r\n    STRUCTURE_SPAWN,\r\n    STRUCTURE_LINK,\r\n    STRUCTURE_WALL,\r\n    STRUCTURE_STORAGE,\r\n    STRUCTURE_TOWER,\r\n    STRUCTURE_OBSERVER,\r\n    STRUCTURE_POWER_SPAWN,\r\n    STRUCTURE_EXTRACTOR,\r\n    STRUCTURE_LAB,\r\n    STRUCTURE_TERMINAL,\r\n    STRUCTURE_CONTAINER,\r\n    STRUCTURE_NUKER,\r\n    STRUCTURE_KEEPER_LAIR,\r\n    STRUCTURE_CONTROLLER,\r\n    STRUCTURE_POWER_BANK,\r\n    STRUCTURE_PORTAL\r\n];\r\n\r\n// The Wall/Rampart HP Limit for each Controller level\r\nexport const WALL_LIMIT: number[] = [\r\n    0, // RCL 0\r\n    25000, // RCL 1\r\n    50000, // RCL 2\r\n    100000, // RCL 3\r\n    250000, // RCL 4\r\n    500000, // RCL 5\r\n    1000000, // RCL 6\r\n    1500000, // RCL 7\r\n    5000000 // RCL 8\r\n];\r\n\r\n// Cache Tick Limits\r\nexport const STRUCT_CACHE_TTL = 50; // Structures\r\nexport const SOURCE_CACHE_TTL = -1; // Sources\r\nexport const CONSTR_CACHE_TTL = 50; // Construction Sites\r\nexport const TOMBSTONE_CACHE_TTL = 50; // Tombstones\r\nexport const DROPS_CACHE_TTL = 50; // Dropped Resources\r\nexport const FCREEP_CACHE_TTL = 20; // Friendly Creep\r\nexport const HCREEP_CACHE_TTL = 1; // Hostile Creep\r\n// GetEnergyJob Constants\r\nexport const SOURCE_JOB_CACHE_TTL = 50; // Source jobs\r\nexport const CONTAINER_JOB_CACHE_TTL = 50; // Container jobs\r\nexport const LINK_JOB_CACHE_TTL = 50; // Link Jobs\r\nexport const BACKUP_JOB_CACHE_TTL = 50; // Backup Jobs\r\nexport const PICKUP_JOB_CACHE_TTL = 50; // Pickup Jobs\r\n// ClaimPartJob Constants\r\nexport const CLAIM_JOB_CACHE_TTL = 1; // Claim Jobs\r\nexport const RESERVE_JOB_CACHE_TTL = 1; // Reserve Jobs\r\nexport const SIGN_JOB_CACHE_TTL = 50; // Sign Jobs\r\nexport const ATTACK_JOB_CACHE_TTL = 1; // Attack Jobs\r\n// WorkPartJob Constants\r\nexport const REPAIR_JOB_CACHE_TTL = 10; // Repair jobs\r\nexport const BUILD_JOB_CACHE_TTL = 10; // Build Jobs\r\nexport const UPGRADE_JOB_CACHE_TTL = -1; // Upgrade Jobs\r\n// CarryPartJob Constants\r\nexport const FILL_JOB_CACHE_TTL = 10; // Fill Jobs\r\nexport const STORE_JOB_CACHE_TTL = 50; // Store Jobs\r\n\r\n// ? Should we change DEPNDT to be 3 seperate consts? Attack, Remote, Claim?\r\nexport const DEPNDT_CACHE_TTL = 50; // Dependent Rooms - Attack, Remote, Claim\r\n\r\n// Error Severity Constants\r\nexport const ERROR_FATAL = 3; // Very severe error - Game ruining\r\nexport const ERROR_ERROR = 2; // Regular error - Creep/Room ruining\r\nexport const ERROR_WARN = 1; // Small error - Something went wrong, but doesn't ruin anything\r\nexport const ERROR_INFO = 0; // Non-error - Used to log when something happens (e.g. memory is updated)\r\n\r\n// Color Constants\r\nexport const COLORS: any = {};\r\nCOLORS[ERROR_FATAL] = \"#FF0000\";\r\nCOLORS[ERROR_ERROR] = \"#E300FF\";\r\nCOLORS[ERROR_WARN] = \"#F0FF00\";\r\nCOLORS[ERROR_INFO] = \"#0045FF\";\r\n\r\n// Our default moveOpts object. Assign this to a new object and then adjust the values for the situation\r\nexport const DEFAULT_MOVE_OPTS: MoveToOpts = {\r\n    heuristicWeight: 1.5, // TODO Test this to see if we can afford to raise it ( higher number = less CPU use, lower number = more likely to get best path each time)\r\n    range: 0, // Assume we want to go to the location, if not told otherwise\r\n    ignoreCreeps: false, // TODO Change this to true, and set up a type of collision avoidance/collision handling\r\n    reusePath: 10, // TODO Change this value to be much higher, and set up a type of 'stuck detection'\r\n    // swampCost: 5, // Putting this here as a reminder that we can make bigger creeps that can move on swamps\r\n    visualizePathStyle: {} // Empty object for now, just uses default visualization\r\n};\r\n","// Room State Constants\r\nexport const ROOM_STATE_INTRO = 0;\r\nexport const ROOM_STATE_BEGINNER = 1;\r\nexport const ROOM_STATE_INTER = 2;\r\nexport const ROOM_STATE_ADVANCED = 3;\r\nexport const ROOM_STATE_UPGRADER = 4;\r\nexport const ROOM_STATE_SEIGE = 5;\r\nexport const ROOM_STATE_STIMULATE = 6;\r\nexport const ROOM_STATE_NUKE_INBOUND = 7;\r\n\r\n// Role Constants\r\nexport const ROLE_MINER = \"miner\";\r\nexport const ROLE_HARVESTER = \"harvester\";\r\nexport const ROLE_WORKER = \"worker\";\r\nexport const ROLE_POWER_UPGRADER = \"powerUpgrader\";\r\nexport const ROLE_LORRY = \"lorry\";\r\nexport const ROLE_REMOTE_MINER = \"remoteMiner\";\r\nexport const ROLE_REMOTE_HARVESTER = \"remoteHarvester\";\r\nexport const ROLE_REMOTE_RESERVER = \"remoteReserver\";\r\nexport const ROLE_REMOTE_DEFENDER = \"remoteDefender\";\r\nexport const ROLE_CLAIMER = \"claimer\";\r\nexport const ROLE_COLONIZER = \"remoteColonizer\";\r\nexport const ROLE_ZEALOT = \"zealot\";\r\nexport const ROLE_STALKER = \"stalker\";\r\nexport const ROLE_MEDIC = \"medic\";\r\nexport const ROLE_DOMESTIC_DEFENDER = \"domesticDefender\";\r\n\r\n// Tier Constants\r\nexport const TIER_1 = 300;\r\nexport const TIER_2 = 550;\r\nexport const TIER_3 = 800;\r\nexport const TIER_4 = 1300;\r\nexport const TIER_5 = 1800;\r\nexport const TIER_6 = 2300;\r\nexport const TIER_7 = 5300;\r\nexport const TIER_8 = 12300;\r\n\r\n// Attack Flag Constants\r\nexport const ZEALOT_SOLO = 1;\r\nexport const STALKER_SOLO = 2;\r\nexport const STANDARD_SQUAD = 3;\r\nexport const CLAIM_FLAG = 4;\r\nexport const REMOTE_FLAG = 5;\r\nexport const OVERRIDE_D_ROOM_FLAG = 6;\r\nexport const STIMULATE_FLAG = 7;\r\n\r\n// Creep Body Layout Constants\r\nexport const GROUPED = \"grouped\";\r\nexport const COLLATED = \"collated\";\r\n\r\n// Role Priority List\r\n// * Keep this list ordered by spawn priority\r\nexport const domesticRolePriority: RoleConstant[] = [\r\n    ROLE_MINER,\r\n    ROLE_HARVESTER,\r\n    ROLE_WORKER,\r\n    ROLE_POWER_UPGRADER,\r\n    ROLE_LORRY\r\n];\r\n\r\n// * Keep this list ordered by spawn priority\r\nexport const remoteRolePriority: RoleConstant[] = [\r\n    ROLE_REMOTE_RESERVER,\r\n    ROLE_REMOTE_MINER,\r\n    ROLE_REMOTE_HARVESTER,\r\n    ROLE_REMOTE_DEFENDER,\r\n    ROLE_COLONIZER\r\n];\r\n\r\n// * Keep this list ordered by spawn priority\r\nexport const militaryRolePriority: RoleConstant[] = [ROLE_MEDIC, ROLE_STALKER, ROLE_ZEALOT];\r\n\r\n// List of every structure in the game\r\nexport const ALL_STRUCTURE_TYPES: StructureConstant[] = [\r\n    STRUCTURE_EXTENSION,\r\n    STRUCTURE_RAMPART,\r\n    STRUCTURE_ROAD,\r\n    STRUCTURE_SPAWN,\r\n    STRUCTURE_LINK,\r\n    STRUCTURE_WALL,\r\n    STRUCTURE_STORAGE,\r\n    STRUCTURE_TOWER,\r\n    STRUCTURE_OBSERVER,\r\n    STRUCTURE_POWER_SPAWN,\r\n    STRUCTURE_EXTRACTOR,\r\n    STRUCTURE_LAB,\r\n    STRUCTURE_TERMINAL,\r\n    STRUCTURE_CONTAINER,\r\n    STRUCTURE_NUKER,\r\n    STRUCTURE_KEEPER_LAIR,\r\n    STRUCTURE_CONTROLLER,\r\n    STRUCTURE_POWER_BANK,\r\n    STRUCTURE_PORTAL\r\n];\r\n\r\n// The Wall/Rampart HP Limit for each Controller level\r\nexport const WALL_LIMIT: number[] = [\r\n    0, // RCL 0\r\n    25000, // RCL 1\r\n    50000, // RCL 2\r\n    100000, // RCL 3\r\n    250000, // RCL 4\r\n    500000, // RCL 5\r\n    1000000, // RCL 6\r\n    1500000, // RCL 7\r\n    5000000 // RCL 8\r\n];\r\n\r\n// Cache Tick Limits\r\nexport const STRUCT_CACHE_TTL = 50; // Structures\r\nexport const SOURCE_CACHE_TTL = -1; // Sources\r\nexport const CONSTR_CACHE_TTL = 50; // Construction Sites\r\nexport const TOMBSTONE_CACHE_TTL = 50; // Tombstones\r\nexport const DROPS_CACHE_TTL = 50; // Dropped Resources\r\nexport const FCREEP_CACHE_TTL = 20; // Friendly Creep\r\nexport const HCREEP_CACHE_TTL = 1; // Hostile Creep\r\n// GetEnergyJob Constants\r\nexport const SOURCE_JOB_CACHE_TTL = 50; // Source jobs\r\nexport const CONTAINER_JOB_CACHE_TTL = 50; // Container jobs\r\nexport const LINK_JOB_CACHE_TTL = 50; // Link Jobs\r\nexport const BACKUP_JOB_CACHE_TTL = 50; // Backup Jobs\r\nexport const PICKUP_JOB_CACHE_TTL = 50; // Pickup Jobs\r\n// ClaimPartJob Constants\r\nexport const CLAIM_JOB_CACHE_TTL = 1; // Claim Jobs\r\nexport const RESERVE_JOB_CACHE_TTL = 1; // Reserve Jobs\r\nexport const SIGN_JOB_CACHE_TTL = 50; // Sign Jobs\r\nexport const ATTACK_JOB_CACHE_TTL = 1; // Attack Jobs\r\n// WorkPartJob Constants\r\nexport const REPAIR_JOB_CACHE_TTL = 10; // Repair jobs\r\nexport const BUILD_JOB_CACHE_TTL = 10; // Build Jobs\r\nexport const UPGRADE_JOB_CACHE_TTL = -1; // Upgrade Jobs\r\n// CarryPartJob Constants\r\nexport const FILL_JOB_CACHE_TTL = 10; // Fill Jobs\r\nexport const STORE_JOB_CACHE_TTL = 50; // Store Jobs\r\n\r\n// ? Should we change DEPNDT to be 3 seperate consts? Attack, Remote, Claim?\r\nexport const DEPNDT_CACHE_TTL = 50; // Dependent Rooms - Attack, Remote, Claim\r\n\r\n// Error Severity Constants\r\nexport const ERROR_FATAL = 3; // Very severe error - Game ruining\r\nexport const ERROR_ERROR = 2; // Regular error - Creep/Room ruining\r\nexport const ERROR_WARN = 1; // Small error - Something went wrong, but doesn't ruin anything\r\nexport const ERROR_INFO = 0; // Non-error - Used to log when something happens (e.g. memory is updated)\r\n\r\n// Color Constants\r\nexport const COLORS: any = {};\r\nCOLORS[ERROR_FATAL] = \"#FF0000\";\r\nCOLORS[ERROR_ERROR] = \"#E300FF\";\r\nCOLORS[ERROR_WARN] = \"#F0FF00\";\r\nCOLORS[ERROR_INFO] = \"#0045FF\";\r\n\r\n// Our default moveOpts object. Assign this to a new object and then adjust the values for the situation\r\nexport const DEFAULT_MOVE_OPTS: MoveToOpts = {\r\n    heuristicWeight: 1.5, // TODO Test this to see if we can afford to raise it ( higher number = less CPU use, lower number = more likely to get best path each time)\r\n    range: 0, // Assume we want to go to the location, if not told otherwise\r\n    ignoreCreeps: false, // TODO Change this to true, and set up a type of collision avoidance/collision handling\r\n    reusePath: 10, // TODO Change this value to be much higher, and set up a type of 'stuck detection'\r\n    // swampCost: 5, // Putting this here as a reminder that we can make bigger creeps that can move on swamps\r\n    visualizePathStyle: {} // Empty object for now, just uses default visualization\r\n};\r\n","import { COLORS } from \"utils/constants\";\r\n/**\r\n * Custom error class\r\n */\r\nclass UserException extends Error {\r\n\r\n    public title: string;\r\n    public body: string;\r\n    public severity: number;\r\n    public titleColor: any;\r\n    public bodyColor: string;\r\n\r\n    constructor(title: string, body: string, severity: ErrorConstant, useTitleColor?: string, useBodyColor?: string) {\r\n        super();\r\n        Object.setPrototypeOf(this, UserException.prototype);\r\n\r\n        this.title = title;\r\n        this.body = body;\r\n        this.severity = severity;\r\n        // Custom color option\r\n        this.titleColor = useTitleColor !== undefined ? useTitleColor : COLORS[severity];\r\n        this.bodyColor = useBodyColor !== undefined ? useBodyColor : \"#ff1113\";\r\n    }\r\n}\r\n\r\nexport default UserException;\r\n","import MemoryApi from \"Api/Memory.Api\";\r\nimport {\r\n    WALL_LIMIT,\r\n    ERROR_WARN,\r\n    STIMULATE_FLAG\r\n} from \"utils/Constants\";\r\nimport UserException from \"utils/UserException\";\r\n\r\n// helper functions for rooms\r\nexport default class RoomHelper {\r\n    /**\r\n     * check if a specified room is owned by you\r\n     * @param room the room we want to check\r\n     */\r\n    public static isOwnedRoom(room: Room): boolean {\r\n        if (room.controller !== undefined) {\r\n            return room.controller.my;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check if a specified room is an ally room\r\n     * @param room the room we want to check\r\n     */\r\n    public static isAllyRoom(room: Room): boolean {\r\n        // returns true if a room has one of our names but is not owned by us\r\n        if (room.controller === undefined) {\r\n            return false;\r\n        } else {\r\n            return (\r\n                !this.isOwnedRoom(room) &&\r\n                (room.controller.owner.username === \"UhmBrock\" || room.controller.owner.username === \"Jakesboy2\")\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check if a room is a source keeper room\r\n     * @param room the room we want to check\r\n     */\r\n    public static isSourceKeeperRoom(room: Room): boolean {\r\n        // Contains x pos in [1], y pos in [2]\r\n        const parsedName: any = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(room.name);\r\n        const xOffset = parsedName[1] % 10;\r\n        const yOffset = parsedName[2] % 10;\r\n        // If x & y === 5 it's not SK, but both must be between 4 and 6\r\n        const isSK =\r\n            !(xOffset === 5 && xOffset === 5) && (xOffset >= 4 && xOffset <= 6) && (yOffset >= 4 && yOffset <= 6);\r\n        return isSK;\r\n    }\r\n\r\n    /**\r\n     * check if a room is a highway room\r\n     * @param room the room we want to check\r\n     */\r\n    public static isHighwayRoom(room: Room): boolean {\r\n        // Contains x pos in [1], y pos in [2]\r\n        const parsedName: any = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(room.name);\r\n        // If x || y is divisible by 10, it's a highway\r\n        if (parsedName[1] % 10 === 0 || parsedName[2] % 10 === 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check if a room is close enough to send a creep to\r\n     * @param room the room we want to check\r\n     */\r\n    public static inTravelRange(homeRoom: string, targetRoom: string): boolean {\r\n        const routeArray: Array<{ exit: ExitConstant; room: string; }> = Game.map.findRoute(homeRoom, targetRoom) as Array<{ exit: ExitConstant; room: string; }>;\r\n        return routeArray.length < 20;\r\n    }\r\n\r\n    /**\r\n     * check if the object exists within a room\r\n     * @param room the room we want to check\r\n     * @param objectConst the object we want to check for\r\n     */\r\n    public static isExistInRoom(room: Room, objectConst: StructureConstant): boolean {\r\n        return MemoryApi.getStructures(room.name, s => s.structureType === objectConst).length > 0;\r\n    }\r\n\r\n    /**\r\n     * get the stored amount from the target\r\n     * @param target the target we want to check the storage of\r\n     * @param resourceType the resource we want to check the storage for\r\n     */\r\n    public static getStoredAmount(target: any, resourceType: ResourceConstant): number | undefined {\r\n        if (target instanceof Creep) {\r\n            return target.carry[resourceType];\r\n        } else if (target.hasOwnProperty(\"store\")) {\r\n            return target.store[resourceType];\r\n        } else if (resourceType === RESOURCE_ENERGY && target.hasOwnProperty(\"energy\")) {\r\n            return target.energy;\r\n        }\r\n        // Throw an error to identify when this fail condition is met\r\n        throw new UserException(\r\n            \"Failed to getStoredAmount of a target\",\r\n            \"ID: \" + target.id + \"\\n\" + JSON.stringify(target),\r\n            ERROR_ERROR\r\n        );\r\n    }\r\n\r\n    /**\r\n     * get the capacity from the target\r\n     * @param target the target we want to check the capacity of\r\n     */\r\n    public static getStoredCapacity(target: any): number {\r\n        if (target instanceof Creep) {\r\n            return target.carryCapacity;\r\n        } else if (target.hasOwnProperty(\"store\")) {\r\n            return target.storeCapacity;\r\n        } else if (target.hasOwnProperty(\"energyCapacity\")) {\r\n            return target.energyCapacity;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * get the amount of damage a tower will do at this distance\r\n     * @param range the distance the target is from the tower\r\n     */\r\n    public static getTowerDamageAtRange(range: number) {\r\n        if (range <= TOWER_OPTIMAL_RANGE) {\r\n            return TOWER_POWER_ATTACK;\r\n        }\r\n        if (range >= TOWER_FALLOFF_RANGE) {\r\n            range = TOWER_FALLOFF_RANGE;\r\n        }\r\n        return (\r\n            TOWER_POWER_ATTACK -\r\n            (TOWER_POWER_ATTACK * TOWER_FALLOFF * (range - TOWER_OPTIMAL_RANGE)) /\r\n            (TOWER_FALLOFF_RANGE - TOWER_OPTIMAL_RANGE)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * only returns true every ${parameter} number of ticks\r\n     * @param ticks the number of ticks you want between executions\r\n     */\r\n    public static excecuteEveryTicks(ticks: number): boolean {\r\n        return Game.time % ticks === 0;\r\n    }\r\n\r\n    /**\r\n     * check if container mining is active in a room (each source has a container in range)\r\n     * @param room the room we are checking\r\n     * @param sources the sources we are checking\r\n     * @param containers the containers we are checking\r\n     */\r\n    public static isContainerMining(\r\n        room: Room,\r\n        sources: Array<Source | null>,\r\n        containers: Array<Structure<StructureConstant> | null>\r\n    ): boolean {\r\n\r\n        // Loop over sources and make sure theres at least one container in range to it\r\n        let numMiningContainers: number = 0;\r\n\r\n        _.forEach(sources, (source: Source) => {\r\n            if (_.some(containers, (container: StructureContainer) =>\r\n                source.pos.inRangeTo(container.pos, 2)\r\n            )) {\r\n                numMiningContainers++;\r\n            }\r\n        });\r\n\r\n        return numMiningContainers === sources.length;\r\n    }\r\n\r\n    /**\r\n     * check if the link is an upgrader link\r\n     * TODO Complete this\r\n     * @param room the room we are checking\r\n     * @param sources the sources we are checking\r\n     * @param containers the containers we are checking\r\n     */\r\n    public static getUpgraderLink(room: Room): Structure<StructureConstant> | null {\r\n\r\n        // Throw warning if we do not own this room\r\n        if (!this.isOwnedRoom(room)) {\r\n            throw new UserException(\r\n                \"Stimulate flag check on non-owned room\",\r\n                \"You attempted to check for a stimulate flag in a room we do not own. Room [\" + room.name + \"]\",\r\n                ERROR_WARN);\r\n        }\r\n\r\n        const links: Array<Structure<StructureConstant>> = MemoryApi.getStructureOfType(room.name, STRUCTURE_LINK);\r\n        const controller: StructureController | undefined = room.controller;\r\n\r\n        // Break early if we don't have 3 links yet\r\n        if (links.length < 3) {\r\n            return null;\r\n        }\r\n\r\n        // Make sure theres a controller in the room\r\n        if (!controller) {\r\n            throw new UserException(\"Tried to getUpgraderLink of a room with no controller\",\r\n                \"Get Upgrader Link was called for room [\" + room.name + \"]\" + \", but theres no controller in this room.\",\r\n                ERROR_WARN);\r\n        }\r\n\r\n        // Find the closest link to the controller, this is our upgrader link\r\n        return controller!.pos.findClosestByRange(links);\r\n    }\r\n\r\n    /**\r\n     * Check and see if an upgrader link exists\r\n     * @param room the room we are checking for\r\n     */\r\n    public static isUpgraderLink(room: Room): boolean {\r\n\r\n        // Throw warning if we do not own this room\r\n        if (!this.isOwnedRoom(room)) {\r\n            throw new UserException(\r\n                \"Stimulate flag check on non-owned room\",\r\n                \"You attempted to check for a stimulate flag in a room we do not own. Room [\" + room.name + \"]\",\r\n                ERROR_WARN);\r\n        }\r\n\r\n        return this.getUpgraderLink(room) !== null;\r\n    }\r\n\r\n    /**\r\n     * Check if the stimulate flag is present for a room\r\n     * TODO Complete this\r\n     * @param room the room we are checking for\r\n     */\r\n    public static isStimulateRoom(room: Room): boolean {\r\n\r\n        // Throw warning if we do not own this room\r\n        if (!this.isOwnedRoom(room)) {\r\n            throw new UserException(\r\n                \"Stimulate flag check on non-owned room\",\r\n                \"You attempted to check for a stimulate flag in a room we do not own. Room [\" + room.name + \"]\",\r\n                ERROR_WARN);\r\n        }\r\n\r\n        const terminal: StructureTerminal | undefined = room.terminal;\r\n        // Check if we have a stimulate flag with the same room name as this flag\r\n        return _.some(Memory.flags, (flag: FlagMemory) => {\r\n            if (flag.flagType === STIMULATE_FLAG) {\r\n                return (Game.flags[flag.flagName].pos.roomName === room.name) && (terminal !== undefined);\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * choose an ideal target for the towers to attack\r\n     * TODO actually choose an ideal target not just the first one lol\r\n     * @param room the room we are in\r\n     */\r\n    public static chooseTowerTarget(room: Room): Creep | null | undefined {\r\n        // get the creep we will do the most damage to\r\n        const hostileCreeps: Array<Creep | null> = MemoryApi.getHostileCreeps(room.name);\r\n        const isHealers: boolean = _.some(hostileCreeps, (c: Creep) =>\r\n            _.some(c.body, (b: BodyPartDefinition) => b.type === \"heal\"));\r\n        const isAttackers: boolean = _.some(hostileCreeps, (c: Creep) =>\r\n            _.some(c.body, (b: BodyPartDefinition) => b.type === \"attack\" || b.type === \"ranged_attack\"));\r\n        const isWorkers: boolean = _.some(hostileCreeps, (c: Creep) =>\r\n            _.some(c.body, (b: BodyPartDefinition) => b.type === \"work\"));\r\n\r\n        // If only healers are present, don't waste ammo\r\n        if (isHealers && !isAttackers && !isWorkers) {\r\n            return undefined;\r\n        }\r\n\r\n        // If healers are present with attackers, target healers\r\n        if (isHealers && isAttackers && !isWorkers) {\r\n            return _.find(hostileCreeps, (c: Creep) =>\r\n                _.some(c.body, (b: BodyPartDefinition) => b.type === \"heal\"));\r\n        }\r\n\r\n        // If workers are present, target worker\r\n        if (isWorkers) {\r\n            return _.find(hostileCreeps, (c: Creep) =>\r\n                _.some(c.body, (b: BodyPartDefinition) => b.type === \"work\"));\r\n        }\r\n\r\n        // If attackers are present, target them\r\n        if (isAttackers) {\r\n            return _.find(hostileCreeps, (c: Creep) =>\r\n                _.some(c.body, (b: BodyPartDefinition) => b.type === \"attack\"));\r\n        }\r\n\r\n        // If there are no hostile creeps, or we didn't find a valid target, return undefined\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get the difference in Wall/Rampart HP between the current and previous RCL\r\n     * @param controllerLevel the level of the controller in the room\r\n     */\r\n    public static getWallLevelDifference(controllerLevel: number): number {\r\n        return WALL_LIMIT[controllerLevel] - WALL_LIMIT[controllerLevel - 1];\r\n    }\r\n\r\n    /**\r\n     * Returns the number of hostile creeps recorded in the room\r\n     * @param room The room to check\r\n     */\r\n    public static numHostileCreeps(room: Room): number {\r\n        const hostiles = MemoryApi.getHostileCreeps(room.name);\r\n        return hostiles.length;\r\n    }\r\n    /**\r\n     * Return the number of remote rooms associated with the given room\r\n     * @param room\r\n     */\r\n    public static numRemoteRooms(room: Room): number {\r\n        const remoteRooms = MemoryApi.getRemoteRooms(room);\r\n        return remoteRooms.length;\r\n    }\r\n\r\n    /**\r\n     * get number of associated claim rooms\r\n     * @param room\r\n     */\r\n    public static numClaimRooms(room: Room): number {\r\n        const claimRooms = MemoryApi.getClaimRooms(room);\r\n        return claimRooms.length;\r\n    }\r\n\r\n    /**\r\n     * get number of associated attack rooms\r\n     * @param room\r\n     */\r\n    public static numAttackRooms(room: Room): number {\r\n        const attackRooms = MemoryApi.getAttackRooms(room);\r\n        return attackRooms.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of sources in a room\r\n     * @param room The room to check\r\n     */\r\n    public static numSources(room: Room): number {\r\n        return Memory.rooms[room.name].sources.data.length;\r\n    }\r\n    /**\r\n     * Returns the number of sources in all remoteRooms connected to room\r\n     * @param room The room to check the remoteRooms of\r\n     */\r\n    public static numRemoteSources(room: Room): number {\r\n        // TODO: Fix this to use remote room name memory which contains the actual source reference\r\n        // TODO: remove sources and structures from the remote room dependent memory itself\r\n        const remoteRooms: RemoteRoomMemory[] = Memory.rooms[room.name].remoteRooms!;\r\n        let numSources: number = 0;\r\n\r\n        _.forEach(remoteRooms, (rr: RemoteRoomMemory) => {\r\n\r\n            if (!rr) {\r\n                return;\r\n            }\r\n\r\n            const sourcesInRoom: number = rr.sources.data;\r\n            numSources += sourcesInRoom;\r\n        });\r\n        return numSources;\r\n    }\r\n\r\n    /**\r\n     * get number of remote defenders we need\r\n     * @param room The room to check the dependencies of\r\n     */\r\n    public static numRemoteDefenders(room: Room): number {\r\n        const remoteRooms: RemoteRoomMemory[] = Memory.rooms[room.name].remoteRooms!;\r\n        let numRemoteDefenders: number = 0;\r\n\r\n        _.forEach(remoteRooms, (rr: RemoteRoomMemory) => {\r\n\r\n            if (!rr) {\r\n                return;\r\n            }\r\n\r\n            // If there are any hostile creeps, add one to remoteDefenderCount\r\n            // Get hostile creeps in the remote room\r\n            const hostileCreeps = rr.hostiles.data;\r\n            if (hostileCreeps > 0) {\r\n                numRemoteDefenders++;\r\n            }\r\n        });\r\n\r\n        return numRemoteDefenders;\r\n    }\r\n\r\n    /**\r\n     * get the number of claim rooms that have not yet been claimed\r\n     * @param room the room we are checking for\r\n     */\r\n    public static numCurrentlyUnclaimedClaimRooms(room: Room): number {\r\n        const allClaimRooms: Array<ClaimRoomMemory | undefined> = MemoryApi.getClaimRooms(room);\r\n        const ownedRooms: Room[] = MemoryApi.getOwnedRooms();\r\n        let sum: number = 0;\r\n\r\n        // No existing claim rooms\r\n        if (allClaimRooms[0] === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const claimRoom of allClaimRooms) {\r\n            if (!_.some(ownedRooms, (ownedRoom) => {\r\n                if (claimRoom) {\r\n                    return room.name === claimRoom!.roomName\r\n                }\r\n                return false\r\n            })) {\r\n\r\n                ++sum;\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n}\r\n","/**\r\n * Disallow the caching of all memory\r\n *\r\n * Turning this setting on will massively reduce performance\r\n * but will ensure that all memory is as accurate as possible\r\n */\r\nexport const NO_CACHING_MEMORY = false;\r\n\r\n/**\r\n * Allow UtilHelper.throwError to throw an error rather than just print to console\r\n */\r\nexport const ALLOW_CUSTOM_ERRORS = true;\r\n\r\n/**\r\n * Minimum amount of energy a container must have to be used in a GetEnergyJob\r\n */\r\nexport const CONTAINER_MINIMUM_ENERGY = 100;\r\n/**\r\n * Minimum amount of energy a link must have to be used in a GetEnergyJob\r\n */\r\nexport const LINK_MINIMUM_ENERGY = 1;\r\n\r\n/**\r\n * Percentage HP to begin repairing structures (besides Ramparts and Walls)\r\n */\r\nexport const REPAIR_THRESHOLD = .75;\r\n\r\n/**\r\n * toggle for the room visual overlay\r\n */\r\nexport const ROOM_OVERLAY_ON = true;\r\n\r\n/**\r\n * toggle for the graph in room overlay (high cpu cost)\r\n */\r\nexport const ROOM_OVERLAY_GRAPH_ON = true;\r\n\r\n/**\r\n * display % or raw value on your rcl progress\r\n */\r\nexport const ROOM_OVERLAY_RCL_RAW_VAL = true;\r\n\r\n/**\r\n * The text to sign controllers with\r\n */\r\nexport const CONTROLLER_SIGNING_TEXT = [\r\n    \"home of the dallas cowboys and the oklahoma city thunder\",\r\n    \"7j2Music on spotify\",\r\n    \"like taking candy from a baby\",\r\n    \"terminating process goldenstatewarriors.exe\",\r\n    \"durant is my aunt\",\r\n    \"typescript master race\",\r\n    \"static type gang\",\r\n    \"resource hogs\",\r\n    \"PRESCOTT/ELLIOT 2020\",\r\n    \"WESTBROOK/PAUL GEORGE 2024\",\r\n    \"KANYE 2024\",\r\n    \"you just activated my fap card\",\r\n    \">be me\\n>sign controller\",\r\n    \"braces go on the same line\",\r\n    \"camelCaseMasterRace\",\r\n    \"++i > i++\",\r\n    \"baker mayfield: american hero\",\r\n    \"don't be a creep, free-think\",\r\n    \"down to die for my rooms\",\r\n    \"blueface baby\",\r\n    \"dear family, my sanity, go down when my cash grow up\",\r\n    \"\"\r\n];\r\n\r\n/**\r\n * Allow miners to find the closest source instead of just the first one\r\n */\r\nexport const MINERS_GET_CLOSEST_SOURCE = true;\r\n\r\n/**\r\n * Constants for Tick Timers - Number of ticks between running the specified constant this is deciding\r\n */\r\nexport const RUN_TOWER_TIMER = 1;\r\nexport const RUN_LAB_TIMER = 5;\r\nexport const RUN_LINKS_TIMER = 2;\r\nexport const RUN_TERMINAL_TIMER = 5;\r\nexport const RUN_ROOM_STATE_TIMER = 5;\r\nexport const RUN_DEFCON_TIMER = 2;\r\n\r\n/**\r\n * bucket limits for manager\r\n * decides the min the bucket must be to run this manager\r\n */\r\nexport const CREEP_MANAGER_BUCKET_LIMIT = 1000;\r\nexport const SPAWN_MANAGER_BUCKET_LIMIT = 50;\r\nexport const EMPIRE_MANAGER_BUCKET_LIMIT = 5000;\r\nexport const ROOM_MANAGER_BUCKET_LIMIT = 500;\r\nexport const MEMORY_MANAGER_BUCKET_LIMIT = 1;\r\n","import MemoryHelper from \"Helpers/MemoryHelper\";\r\nimport RoomHelper from \"Helpers/RoomHelper\";\r\nimport {\r\n    ERROR_ERROR,\r\n    ROLE_MINER,\r\n    ROOM_STATE_INTRO,\r\n    ROOM_STATE_BEGINNER,\r\n    ROOM_STATE_INTER,\r\n    ROOM_STATE_ADVANCED,\r\n    ROOM_STATE_NUKE_INBOUND,\r\n    ROOM_STATE_SEIGE,\r\n    ROOM_STATE_STIMULATE,\r\n    ROOM_STATE_UPGRADER,\r\n    WALL_LIMIT,\r\n    ERROR_WARN\r\n} from \"utils/constants\";\r\nimport UserException from \"utils/UserException\";\r\nimport MemoryApi from \"./Memory.Api\";\r\nimport { REPAIR_THRESHOLD } from \"utils/config\";\r\n\r\n// an api used for functions related to the room\r\nexport default class RoomApi {\r\n    /**\r\n     * check if there are hostile creeps in the room\r\n     * @param room the room we are checking\r\n     */\r\n    public static isHostilesInRoom(room: Room): boolean {\r\n        const hostilesInRoom = MemoryApi.getHostileCreeps(room.name);\r\n        return hostilesInRoom.length > 0;\r\n    }\r\n\r\n    /**\r\n     * set the room's state\r\n     * Essentially backbone of the room, decides what flow\r\n     * of action will be taken at the beginning of each tick\r\n     * (note: assumes defcon already being found for simplicity sake)\r\n     * @param room the room we are setting state for\r\n     */\r\n    public static setRoomState(room: Room): void {\r\n\r\n        // If theres no controller, throw an error\r\n        if (!room.controller) {\r\n            throw new UserException(\"Can't set room state for room with no controller!\",\r\n                \"You attempted to call setRoomState on room [\" + room.name + \"]. Theres no controller here.\",\r\n                ERROR_WARN);\r\n        }\r\n        // ----------\r\n\r\n\r\n        // check if we are in nuke inbound room state\r\n        // nuke is coming in and we need to gtfo, but they take like 20k ticks, so only check every 1000 or so\r\n        if (RoomHelper.excecuteEveryTicks(1000)) {\r\n            const incomingNukes = room.find(FIND_NUKES);\r\n            if (incomingNukes.length > 0) {\r\n                MemoryApi.updateRoomState(ROOM_STATE_NUKE_INBOUND, room);\r\n                return;\r\n            }\r\n        }\r\n        // ----------\r\n\r\n        // check if we are in intro room state\r\n        // 3 or less creeps so we need to (re)start the room\r\n        const creeps: Array<Creep | null> = MemoryApi.getMyCreeps(room.name);\r\n        if (creeps.length < 3) {\r\n            MemoryApi.updateRoomState(ROOM_STATE_INTRO, room);\r\n            return;\r\n        }\r\n\r\n        // check if we are siege room state\r\n        // defcon is level 3+ and hostiles activity in the room is high\r\n        const defconLevel: number = MemoryApi.getDefconLevel(room);\r\n        if (defconLevel >= 3) {\r\n            MemoryApi.updateRoomState(ROOM_STATE_SEIGE, room);\r\n            return;\r\n        }\r\n        // ----------\r\n\r\n        const storage: StructureStorage | undefined = room.storage;\r\n        const containers: Array<Structure | null> = MemoryApi.getStructureOfType(room.name, STRUCTURE_CONTAINER);\r\n        const sources: Array<Source | null> = MemoryApi.getSources(room.name);\r\n        if (room.controller!.level >= 6) {\r\n\r\n            // check if we are in upgrader room state\r\n            // container mining and storage set up, and we got links online\r\n            if (\r\n                RoomHelper.isContainerMining(room, sources, containers) &&\r\n                RoomHelper.isUpgraderLink(room) &&\r\n                storage !== undefined\r\n            ) {\r\n\r\n                if (RoomHelper.isStimulateRoom(room)) {\r\n                    MemoryApi.updateRoomState(ROOM_STATE_STIMULATE, room);\r\n                    return;\r\n                }\r\n                // otherwise, just upgrader room state\r\n                MemoryApi.updateRoomState(ROOM_STATE_UPGRADER, room);\r\n                return;\r\n            }\r\n        }\r\n        // ----------\r\n\r\n\r\n        if (room.controller!.level >= 4) {\r\n            // check if we are in advanced room state\r\n            // container mining and storage set up\r\n            // then check if we are flagged for sitmulate state\r\n            if (RoomHelper.isContainerMining(room, sources, containers) && storage !== undefined) {\r\n\r\n                if (RoomHelper.isStimulateRoom(room)) {\r\n                    MemoryApi.updateRoomState(ROOM_STATE_STIMULATE, room);\r\n                    return;\r\n                }\r\n\r\n                // otherwise, just advanced room state\r\n                MemoryApi.updateRoomState(ROOM_STATE_ADVANCED, room);\r\n                return;\r\n            }\r\n        }\r\n        // ----------\r\n\r\n\r\n        if (room.controller!.level >= 3) {\r\n            // check if we are in intermediate room state\r\n            // container mining set up, but no storage\r\n            if (RoomHelper.isContainerMining(room, sources, containers) && storage === undefined) {\r\n                MemoryApi.updateRoomState(ROOM_STATE_INTER, room);\r\n                return;\r\n            }\r\n        }\r\n        // ----------\r\n\r\n\r\n        // check if we are in beginner room state\r\n        // no containers set up at sources so we are just running a bare knuckle room\r\n        if (creeps.length >= 3) {\r\n            MemoryApi.updateRoomState(ROOM_STATE_BEGINNER, room);\r\n            return;\r\n        }\r\n        // ----------\r\n    }\r\n\r\n    /**\r\n     * run the towers in the room\r\n     * @param room the room we are defending\r\n     */\r\n    public static runTowers(room: Room): void {\r\n\r\n        const towers = MemoryApi.getStructureOfType(room.name, STRUCTURE_TOWER);\r\n        // choose the most ideal target and have every tower attack it\r\n        const idealTarget: Creep | undefined | null = RoomHelper.chooseTowerTarget(room);\r\n\r\n        // have each tower attack this target\r\n        towers.forEach((t: any) => {\r\n            if (t) {\r\n                t.attack(idealTarget);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * set the rooms defcon level\r\n     * @param room the room we are setting defcon for\r\n     */\r\n    public static setDefconLevel(room: Room): void {\r\n\r\n        const hostileCreeps: Array<Creep | null> = MemoryApi.getHostileCreeps(room.name);\r\n        // check level 0 first to reduce cpu drain as it will be the most common scenario\r\n        // level 0 -- no danger\r\n        if (hostileCreeps.length === 0) {\r\n            room.memory.defcon = 0;\r\n            return;\r\n        }\r\n\r\n        // now define the variables we will need to check the other cases in the event\r\n        // we are not dealing with a level 0 defcon scenario\r\n        const hostileBodyParts: number = _.sum(hostileCreeps, (c: any) => c.body.length);\r\n        const boostedHostileBodyParts: number = _.filter(_.flatten(_.map(hostileCreeps, \"body\")), (p: any) => !!p.boost)\r\n            .length;\r\n\r\n        // level 5 -- nuke inbound\r\n        if (room.find(FIND_NUKES).length > 0) {\r\n            room.memory.defcon = 5;\r\n            return;\r\n        }\r\n\r\n        // level 4 full seige, 50+ boosted parts\r\n        if (boostedHostileBodyParts >= 50) {\r\n            room.memory.defcon = 4;\r\n            return;\r\n        }\r\n\r\n        // level 3 -- 150+ body parts OR any boosted body parts\r\n        if (boostedHostileBodyParts > 0 || hostileBodyParts >= 150) {\r\n            room.memory.defcon = 3;\r\n            return;\r\n        }\r\n\r\n        // level 2 -- 50 - 150 body parts\r\n        if (hostileBodyParts < 150 && hostileBodyParts >= 50) {\r\n            room.memory.defcon = 2;\r\n            return;\r\n        }\r\n\r\n        // level 1 -- less than 50 body parts\r\n        room.memory.defcon = 1;\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * get repair targets for the room (any structure under 75% hp)\r\n     * @param room the room we are checking for repair targets\r\n     */\r\n    public static getRepairTargets(room: Room): Array<Structure<StructureConstant>> {\r\n        const repairStructures: Array<Structure<StructureConstant>> = MemoryApi.getStructures(room.name, (struct: Structure<StructureConstant>) => {\r\n            if (struct.structureType !== STRUCTURE_RAMPART && struct.structureType !== STRUCTURE_WALL) {\r\n                return struct.hits < (struct.hitsMax * REPAIR_THRESHOLD);\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (repairStructures.length === 0) {\r\n            return MemoryApi.getStructures(room.name, (struct: Structure<StructureConstant>) => {\r\n                if (struct.structureType === STRUCTURE_RAMPART || struct.structureType === STRUCTURE_WALL) {\r\n                    return struct.hits < this.getWallHpLimit(room) * REPAIR_THRESHOLD;\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n        return repairStructures\r\n    }\r\n\r\n    /**\r\n     * get spawn/extensions that need to be filled for the room\r\n     * @param room the room we are getting spawns/extensions to be filled from\r\n     */\r\n    public static getLowSpawnAndExtensions(room: Room): Array<StructureSpawn | StructureExtension> {\r\n        const extensionsNeedFilled: StructureExtension[] = MemoryApi.getStructureOfType(\r\n            room.name, STRUCTURE_EXTENSION,\r\n            (e: StructureExtension) => {\r\n                return e.energy < e.energyCapacity;\r\n            }) as StructureExtension[];\r\n\r\n        const spawnsNeedFilled: StructureSpawn[] = MemoryApi.getStructureOfType(\r\n            room.name, STRUCTURE_SPAWN,\r\n            (e: StructureSpawn) => {\r\n                return e.energy < e.energyCapacity;\r\n            }) as StructureSpawn[];\r\n\r\n        const extensionsAndSpawns: Array<StructureExtension | StructureSpawn> = [];\r\n        _.forEach(extensionsNeedFilled, (ext: StructureExtension) => extensionsAndSpawns.push(ext));\r\n        _.forEach(spawnsNeedFilled, (ext: StructureSpawn) => extensionsAndSpawns.push(ext));\r\n        return extensionsAndSpawns;\r\n    }\r\n\r\n    /**\r\n     * get towers that need to be filled for the room\r\n     * TODO order by ascending\r\n     * @param room the room we are getting towers that need to be filled from\r\n     */\r\n    public static getTowersNeedFilled(room: Room): StructureTower[] {\r\n        const TOWER_THRESHOLD: number = 0.85;\r\n\r\n        return <StructureTower[]>MemoryApi.getStructureOfType(room.name, STRUCTURE_TOWER, (t: StructureTower) => {\r\n            return t.energy < t.energyCapacity * TOWER_THRESHOLD;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get ramparts, or ramparts and walls that need to be repaired\r\n     * @param room the room we are getting ramparts/walls that need to be repaired from\r\n     */\r\n    public static getWallRepairTargets(room: Room): Array<Structure<StructureConstant>> {\r\n        // returns all walls and ramparts under the current wall/rampart limit\r\n        const hpLimit: number = this.getWallHpLimit(room);\r\n        const walls = MemoryApi.getStructureOfType(room.name, STRUCTURE_WALL, (s: StructureWall) => s.hits < hpLimit);\r\n        const ramparts = MemoryApi.getStructureOfType(\r\n            room.name,\r\n            STRUCTURE_RAMPART,\r\n            (s: StructureRampart) => s.hits < hpLimit\r\n        );\r\n\r\n        return walls.concat(ramparts);\r\n    }\r\n\r\n    /**\r\n     * get a list of open sources in the room (not saturated)\r\n     * @param room the room we are checking\r\n     */\r\n    public static getOpenSources(room: Room): Array<Source | null> {\r\n        const sources = MemoryApi.getSources(room.name);\r\n        // ? this assumes that we are only using this for domestic rooms\r\n        // ? if we use it on domestic rooms then I'll need to distinguish between ROLE_REMOTE_MINER\r\n        const miners = MemoryHelper.getCreepOfRole(room, ROLE_MINER);\r\n        const lowSources = _.filter(sources, (source: Source) => {\r\n            let totalWorkParts = 0;\r\n            // Count the number of work parts targeting the source\r\n            _.remove(miners, (miner: Creep) => {\r\n                if (!miner.memory.job) {\r\n                    return false;\r\n                }\r\n                if (miner.memory.job!.targetID === source.id) {\r\n                    const workPartCount = miner.getActiveBodyparts(WORK);\r\n                    totalWorkParts += workPartCount;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n\r\n            // filter out sources where the totalWorkParts < workPartsNeeded ( energyCap / ticksToReset / energyPerPart )\r\n            return totalWorkParts < source.energyCapacity / 300 / 2;\r\n        });\r\n\r\n        return lowSources;\r\n    }\r\n\r\n    /**\r\n     * gets the drop container next to the source\r\n     * @param room the room we are checking in\r\n     * @param source the source we are considering\r\n     */\r\n    public static getMiningContainer(room: Room, source: Source): Structure<StructureConstant> | undefined {\r\n        const containers: Array<Structure<StructureConstant>> = MemoryApi.getStructureOfType(room.name, STRUCTURE_CONTAINER);\r\n\r\n        return _.find(\r\n            containers,\r\n            (c: any) => Math.abs(c.pos.x - source.pos.x) <= 1 && Math.abs(c.pos.y - source.pos.y) <= 1\r\n        );\r\n    }\r\n\r\n    /**\r\n     * checks if a structure or creep store is full\r\n     * @param target the structure or creep we are checking\r\n     */\r\n    public static isFull(target: any): boolean {\r\n        if (target instanceof Creep) {\r\n            return _.sum(target.carry) === target.carryCapacity;\r\n        } else if (target.hasOwnProperty(\"store\")) {\r\n            return _.sum(target.store) === target.storeCapacity;\r\n        }\r\n\r\n        // if not one of these two, there was an error\r\n        throw new UserException(\"Invalid Target\", \"isFull called on target with no capacity for storage.\", ERROR_ERROR);\r\n    }\r\n\r\n    /**\r\n     * get the current hp limit for walls/ramparts\r\n     * @param room the current room\r\n     */\r\n    private static getWallHpLimit(room: Room): number {\r\n        // only do so if the room has a controller otherwise we have an exception\r\n        if (room.controller !== undefined) {\r\n            // % of way to next level\r\n            const controllerProgress: number = room.controller.progress / room.controller.progressTotal;\r\n            // difference between this levels max and last levels max\r\n            const wallLevelHpDiff: number = RoomHelper.getWallLevelDifference(room.controller.level);\r\n            // Minimum hp chunk to increase limit\r\n            const chunkSize: number = 10000;\r\n            // The adjusted hp difference for controller progress and chunking\r\n            const numOfChunks: number = Math.floor((wallLevelHpDiff * controllerProgress) / chunkSize);\r\n\r\n            return WALL_LIMIT[room.controller.level] + chunkSize * numOfChunks;\r\n        } else {\r\n            throw new UserException(\r\n                \"Undefined Controller\",\r\n                \"Error getting wall limit for room with undefined controller.\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * run links for the room\r\n     * @param room the room we want to run links for\r\n     */\r\n    public static runLinks(room: Room): void {\r\n\r\n        // If we don't have an upgrader link, cancel early\r\n        const upgraderLink: StructureLink | null = MemoryApi.getUpgraderLink(room);\r\n        if (!upgraderLink || upgraderLink.energy <= 400) {\r\n            return;\r\n        }\r\n\r\n        // Get non-upgrader links above 100 energy to fill the upgrader link\r\n        const nonUpgraderLinks: StructureLink[] = MemoryApi.getStructureOfType(room.name, STRUCTURE_LINK,\r\n            (link: StructureLink) => link.id !== upgraderLink.id && link.energy >= 100) as StructureLink[];\r\n        for (const link of nonUpgraderLinks) {\r\n            if (link.cooldown > 0) {\r\n                continue;\r\n            }\r\n\r\n            // Get the amount of energy we are sending over\r\n            const missingEnergy: number = upgraderLink.energyCapacity - upgraderLink.energy;\r\n            let amountToTransfer: number = 0;\r\n            if (missingEnergy > link.energy) {\r\n                amountToTransfer = link.energy;\r\n            }\r\n            else {\r\n                amountToTransfer = missingEnergy;\r\n            }\r\n\r\n            link.transferEnergy(upgraderLink, amountToTransfer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * run terminal for the room\r\n     * @param room the room we want to run terminal for\r\n     */\r\n    public static runTerminal(room: Room): void {\r\n        // here we can do market stuff, send resources from room to room\r\n        // to each other, and make sure we have the ideal ratio of minerals\r\n        // we decide that we want\r\n    }\r\n\r\n    /**\r\n     * run labs for the room\r\n     * @param room the room we want to run labs for\r\n     */\r\n    public static runLabs(room: Room): void {\r\n        // i have no idea yet lol\r\n    }\r\n}\r\n","import RoomApi from \"Api/Room.Api\";\r\nimport { CONTAINER_MINIMUM_ENERGY } from \"utils/config\";\r\nimport MemoryApi from \"Api/Memory.Api\";\r\nimport CreepHelper from \"Helpers/CreepHelper\";\r\nimport MemoryHelper_Room from \"Helpers/MemoryHelper_Room\";\r\nimport SpawnApi from \"Api/Spawn.Api\";\r\nimport { ROLE_MINER } from \"utils/Constants\";\r\n\r\n// TODO Create jobs for tombstones and dropped resources if wanted\r\nexport default class GetEnergyJobs {\r\n    /**\r\n     * Gets a list of GetEnergyJobs for the sources of a room\r\n     * @param room The room to create the job list for\r\n     */\r\n    public static createSourceJobs(room: Room): GetEnergyJob[] {\r\n        // List of all sources that are under optimal work capacity\r\n        const openSources = RoomApi.getOpenSources(room);\r\n\r\n        if (openSources.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const sourceJobList: GetEnergyJob[] = [];\r\n\r\n        _.forEach(openSources, (source: Source) => {\r\n            // Get all miners that are targeting this source\r\n            const miners = MemoryApi.getMyCreeps(room.name, (creep: Creep) => {\r\n                if (creep.memory.role === ROLE_MINER) {\r\n                    if (creep.memory.job && creep.memory.job.targetID === source.id) {\r\n                        // ! Can optionally add another statement here that checks\r\n                        // ! if creep.ticksToLive > however many ticks it takes to spawn a creep\r\n                        // ! so that creeps that are about to die are not considered as using a part of the job.\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n\r\n            // The Number of work parts those miners have\r\n            const numWorkParts = _.sum(miners, (creep: Creep) => creep.getActiveBodyparts(WORK));\r\n\r\n            // 2 energy per part per tick * 300 ticks to regen a source = effective mining capacity\r\n            const sourceEnergyRemaining = source.energyCapacity - 2 * numWorkParts * 300;\r\n\r\n            // Create the StoreDefinition for the source\r\n            const sourceResources: StoreDefinition = { energy: sourceEnergyRemaining };\r\n\r\n            // Create the GetEnergyJob object for the source\r\n            const sourceJob: GetEnergyJob = {\r\n                jobType: \"getEnergyJob\",\r\n                targetID: source.id,\r\n                targetType: \"source\",\r\n                actionType: \"harvest\",\r\n                resources: sourceResources,\r\n                isTaken: false\r\n            };\r\n\r\n            // Mark the job as taken if there is no energy remaining\r\n            if (sourceEnergyRemaining <= 0) {\r\n                sourceJob.isTaken = true;\r\n            }\r\n\r\n            // Append the GetEnergyJob to the main array\r\n            sourceJobList.push(sourceJob);\r\n        });\r\n\r\n        return sourceJobList;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of GetEnergyJobs for the containers of a room\r\n     * @param room The room to create the job list for\r\n     */\r\n    public static createContainerJobs(room: Room): GetEnergyJob[] {\r\n        // List of all containers with >= CONTAINER_MINIMUM_ENERGY (from config.ts)\r\n        const containers = MemoryApi.getStructureOfType(\r\n            room.name,\r\n            STRUCTURE_CONTAINER,\r\n            (container: StructureContainer) => container.store.energy > CONTAINER_MINIMUM_ENERGY\r\n        );\r\n\r\n        if (containers.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const containerJobList: GetEnergyJob[] = [];\r\n\r\n        _.forEach(containers, (container: StructureContainer) => {\r\n            const containerJob: GetEnergyJob = {\r\n                jobType: \"getEnergyJob\",\r\n                targetID: container.id,\r\n                targetType: STRUCTURE_CONTAINER,\r\n                actionType: \"withdraw\",\r\n                resources: container.store,\r\n                isTaken: false\r\n            };\r\n            // Append to the main array\r\n            containerJobList.push(containerJob);\r\n        });\r\n\r\n        return containerJobList;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of GetEnergyJobs for the links of a room\r\n     * @param room The room to create the job list for\r\n     */\r\n    public static createLinkJobs(room: Room): GetEnergyJob[] {\r\n        const linkJobList: GetEnergyJob[] = [];\r\n        if (linkJobList.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const upgraderLink = MemoryApi.getUpgraderLink(room);\r\n        if (upgraderLink !== undefined && upgraderLink !== null) {\r\n            const linkStore: StoreDefinition = { energy: upgraderLink.energy };\r\n            const linkJob: GetEnergyJob = {\r\n                jobType: \"getEnergyJob\",\r\n                targetID: upgraderLink!.id,\r\n                targetType: STRUCTURE_LINK,\r\n                actionType: \"withdraw\",\r\n                resources: linkStore,\r\n                isTaken: false\r\n            };\r\n            linkJobList.push(linkJob);\r\n        }\r\n        return linkJobList;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of GetEnergyJobs for the backup structures of a room (terminal, storage)\r\n     * @param room  The room to create the job list for\r\n     */\r\n    public static createBackupStructuresJobs(room: Room): GetEnergyJob[] {\r\n        const backupJobList: GetEnergyJob[] = [];\r\n\r\n        // Create the storage job if active\r\n        if (room.storage !== undefined) {\r\n            const storageJob: GetEnergyJob = {\r\n                jobType: \"getEnergyJob\",\r\n                targetID: room.storage.id,\r\n                targetType: STRUCTURE_STORAGE,\r\n                actionType: \"withdraw\",\r\n                resources: room.storage.store,\r\n                isTaken: false\r\n            };\r\n\r\n            backupJobList.push(storageJob);\r\n        }\r\n        // Create the terminal job if active\r\n        if (room.terminal !== undefined) {\r\n            const terminalJob: GetEnergyJob = {\r\n                jobType: \"getEnergyJob\",\r\n                targetID: room.terminal.id,\r\n                targetType: STRUCTURE_TERMINAL,\r\n                actionType: \"withdraw\",\r\n                resources: room.terminal.store,\r\n                isTaken: false\r\n            };\r\n\r\n            backupJobList.push(terminalJob);\r\n        }\r\n\r\n        return backupJobList;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of GetEnergyJobs for the dropped resources of a room\r\n     * @param room The room to create the job for\r\n     */\r\n    public static createPickupJobs(room: Room): GetEnergyJob[] {\r\n        // All dropped energy in the room\r\n        const drops = MemoryApi.getDroppedResources(room);\r\n\r\n        if (drops.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const dropJobList: GetEnergyJob[] = [];\r\n\r\n        _.forEach(drops, (drop: Resource) => {\r\n            const dropStore: StoreDefinition = { energy: 0 };\r\n            dropStore[drop.resourceType] = drop.amount;\r\n\r\n            const dropJob: GetEnergyJob = {\r\n                jobType: \"getEnergyJob\",\r\n                targetID: drop.id,\r\n                targetType: \"droppedResource\",\r\n                resources: dropStore,\r\n                actionType: \"pickup\",\r\n                isTaken: false\r\n            };\r\n\r\n            dropJobList.push(dropJob);\r\n        });\r\n\r\n        return dropJobList;\r\n    }\r\n}\r\n","export default class ClaimPartJobs {\r\n    /**\r\n     * Gets a list of ClaimJobs for the Room\r\n     * @param room The room to get the jobs for\r\n     */\r\n    public static createClaimJobs(room: Room): ClaimPartJob[] {\r\n        // TODO Get a list of rooms to be claimed somehow\r\n        const roomNames: string[] = [];\r\n\r\n        if (roomNames.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const claimJobs: ClaimPartJob[] = [];\r\n\r\n        _.forEach(roomNames, (name: string) => {\r\n            const claimJob: ClaimPartJob = {\r\n                jobType: \"claimPartJob\",\r\n                targetID: name,\r\n                targetType: \"roomName\",\r\n                actionType: \"claim\",\r\n                isTaken: false\r\n            };\r\n\r\n            claimJobs.push(claimJob);\r\n        });\r\n\r\n        return claimJobs;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of ReserveJobs for the room\r\n     * @param room The room to get the jobs for\r\n     */\r\n    public static createReserveJobs(room: Room): ClaimPartJob[] {\r\n        // TODO Get a list of rooms to be reserved\r\n        const roomNames: string[] = [];\r\n\r\n        if (roomNames.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const reserveJobs: ClaimPartJob[] = [];\r\n\r\n        _.forEach(roomNames, (name: string) => {\r\n            const reserveJob: ClaimPartJob = {\r\n                jobType: \"claimPartJob\",\r\n                targetID: name,\r\n                targetType: \"roomName\",\r\n                actionType: \"reserve\",\r\n                isTaken: false\r\n            };\r\n\r\n            reserveJobs.push(reserveJob);\r\n        });\r\n\r\n        return reserveJobs;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of SignJobs for the room (signing the controller)\r\n     * @param room The room to get the jobs for\r\n     */\r\n    public static createSignJobs(room: Room): ClaimPartJob[] {\r\n        // TODO Get a list of controllers to be signed\r\n        const controllers: StructureController[] = [];\r\n\r\n        if (controllers.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const signJobs: ClaimPartJob[] = [];\r\n\r\n        _.forEach(controllers, (controller: StructureController) => {\r\n            const signJob: ClaimPartJob = {\r\n                jobType: \"claimPartJob\",\r\n                targetID: controller.id,\r\n                targetType: \"controller\",\r\n                actionType: \"sign\",\r\n                isTaken: false\r\n            };\r\n\r\n            signJobs.push(signJob);\r\n        });\r\n\r\n        return signJobs;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of AttackJobs for the room (attacking enemy controller)\r\n     * @param room The room to get the jobs for\r\n     */\r\n    public static createAttackJobs(room: Room): ClaimPartJob[] {\r\n        // TODO Get a list of rooms to attack\r\n        const roomNames: string[] = [];\r\n\r\n        if (roomNames.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const attackJobs: ClaimPartJob[] = [];\r\n\r\n        _.forEach(roomNames, (name: string) => {\r\n            const attackJob: ClaimPartJob = {\r\n                jobType: \"claimPartJob\",\r\n                targetID: name,\r\n                targetType: \"roomName\",\r\n                actionType: \"attack\",\r\n                isTaken: false\r\n            };\r\n\r\n            attackJobs.push(attackJob);\r\n        });\r\n\r\n        return attackJobs;\r\n    }\r\n}\r\n","import RoomApi from \"Api/Room.Api\";\r\nimport MemoryApi from \"Api/Memory.Api\";\r\n\r\nexport default class WorkPartJobs {\r\n    /**\r\n     * Gets a list of repairJobs for the room\r\n     * @param room The room to get jobs for\r\n     */\r\n    public static createRepairJobs(room: Room): WorkPartJob[] {\r\n        const repairTargets = RoomApi.getRepairTargets(room);\r\n\r\n        if (repairTargets.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const repairJobs: WorkPartJob[] = [];\r\n\r\n        _.forEach(repairTargets, (structure: Structure) => {\r\n            const repairJob: WorkPartJob = {\r\n                jobType: \"workPartJob\",\r\n                targetID: structure.id,\r\n                targetType: <BuildableStructureConstant>structure.structureType,\r\n                actionType: \"repair\",\r\n                remaining: structure.hitsMax - structure.hits,\r\n                isTaken: false\r\n            };\r\n\r\n            repairJobs.push(repairJob);\r\n        });\r\n\r\n        return repairJobs;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of buildJobs for the room\r\n     * @param room The room to get jobs for\r\n     */\r\n    public static createBuildJobs(room: Room): WorkPartJob[] {\r\n        const constructionSites = MemoryApi.getConstructionSites(room.name);\r\n\r\n        if (constructionSites.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const buildJobs: WorkPartJob[] = [];\r\n\r\n        _.forEach(constructionSites, (cs: ConstructionSite) => {\r\n            const buildJob: WorkPartJob = {\r\n                jobType: \"workPartJob\",\r\n                targetID: cs.id,\r\n                targetType: \"constructionSite\",\r\n                actionType: \"build\",\r\n                remaining: cs.progressTotal - cs.progress,\r\n                isTaken: false\r\n            };\r\n\r\n            buildJobs.push(buildJob);\r\n        });\r\n\r\n        return buildJobs;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of upgradeJobs for the room\r\n     * @param room The room to get jobs for\r\n     */\r\n    public static createUpgradeJobs(room: Room): WorkPartJob[] {\r\n        // Just returning a single upgrade controller job for now\r\n        // ? Should we generate multiple jobs based on how many we expect to be upgrading/ how many power upgraders there are?\r\n\r\n        const upgradeJobs: WorkPartJob[] = [];\r\n\r\n        if (room.controller !== undefined) {\r\n            const controllerJob: WorkPartJob = {\r\n                jobType: \"workPartJob\",\r\n                targetID: room.controller.id,\r\n                targetType: \"controller\",\r\n                actionType: \"upgrade\",\r\n                remaining: room.controller.progressTotal - room.controller.progress,\r\n                isTaken: false\r\n            };\r\n            upgradeJobs.push(controllerJob);\r\n        }\r\n\r\n        return upgradeJobs;\r\n    }\r\n}\r\n","import RoomApi from \"Api/Room.Api\";\r\nimport RoomHelper from \"Helpers/RoomHelper\";\r\nimport MemoryApi from \"Api/Memory.Api\";\r\n\r\nexport default class CarryPartJobs {\r\n    /**\r\n     * Gets a list of fill jobs for the room\r\n     * @param room The room to get the jobs for\r\n     */\r\n    public static createFillJobs(room: Room): CarryPartJob[] {\r\n        const lowSpawnsAndExtensions = RoomApi.getLowSpawnAndExtensions(room);\r\n        const lowTowers = RoomApi.getTowersNeedFilled(room);\r\n\r\n        if (lowSpawnsAndExtensions.length === 0 && lowTowers.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const fillJobs: CarryPartJob[] = [];\r\n\r\n        _.forEach(lowSpawnsAndExtensions, (structure: StructureSpawn | StructureExtension) => {\r\n            const fillJob: CarryPartJob = {\r\n                jobType: \"carryPartJob\",\r\n                targetID: structure.id,\r\n                targetType: structure.structureType,\r\n                remaining: structure.energyCapacity - structure.energy,\r\n                actionType: \"transfer\",\r\n                isTaken: false\r\n            };\r\n\r\n            fillJobs.push(fillJob);\r\n        });\r\n        _.forEach(lowTowers, (structure: StructureTower) => {\r\n            const fillJob: CarryPartJob = {\r\n                jobType: \"carryPartJob\",\r\n                targetID: structure.id,\r\n                targetType: structure.structureType,\r\n                remaining: structure.energyCapacity - structure.energy,\r\n                actionType: \"transfer\",\r\n                isTaken: false\r\n            };\r\n\r\n            fillJobs.push(fillJob);\r\n        });\r\n\r\n        return fillJobs;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of store jobs for the room\r\n     * @param room The room to get the jobs for\r\n     */\r\n    public static createStoreJobs(room: Room): CarryPartJob[] {\r\n        const storeJobs: CarryPartJob[] = [];\r\n\r\n        if (room.storage !== undefined) {\r\n            const storageJob: CarryPartJob = {\r\n                jobType: \"carryPartJob\",\r\n                targetID: room.storage.id,\r\n                targetType: STRUCTURE_STORAGE,\r\n                remaining: room.storage.storeCapacity - _.sum(room.storage.store),\r\n                actionType: \"transfer\",\r\n                isTaken: false\r\n            };\r\n\r\n            storeJobs.push(storageJob);\r\n        }\r\n\r\n        if (room.terminal !== undefined) {\r\n            const terminalJob: CarryPartJob = {\r\n                jobType: \"carryPartJob\",\r\n                targetID: room.terminal.id,\r\n                targetType: STRUCTURE_TERMINAL,\r\n                remaining: room.terminal.storeCapacity - _.sum(room.terminal.store),\r\n                actionType: \"transfer\",\r\n                isTaken: false\r\n            };\r\n\r\n            storeJobs.push(terminalJob);\r\n        }\r\n\r\n        const upgraderLink: StructureLink | null = MemoryApi.getUpgraderLink(room);\r\n\r\n        if (upgraderLink) {\r\n            const nonUpgraderLinks: StructureLink[] = MemoryApi.getStructureOfType(\r\n                room.name,\r\n                STRUCTURE_LINK,\r\n                (link: StructureLink) => link.id !== upgraderLink!.id && link.energy < link.energyCapacity\r\n            ) as StructureLink[];\r\n\r\n            _.forEach(nonUpgraderLinks, (link: StructureLink) => {\r\n                const fillLinkJob: CarryPartJob = {\r\n                    jobType: \"carryPartJob\",\r\n                    targetID: link.id,\r\n                    targetType: STRUCTURE_LINK,\r\n                    remaining: link.energyCapacity - link.energy,\r\n                    actionType: \"transfer\",\r\n                    isTaken: false\r\n                };\r\n\r\n                storeJobs.push(fillLinkJob);\r\n            });\r\n        }\r\n        return storeJobs;\r\n    }\r\n}\r\n","import GetEnergyJobs from \"Jobs/GetEnergyJobs\";\r\nimport { ALL_STRUCTURE_TYPES } from \"utils/Constants\";\r\nimport ClaimPartJobs from \"Jobs/ClaimPartJobs\";\r\nimport RoomApi from \"Api/Room.Api\";\r\nimport WorkPartJobs from \"Jobs/WorkPartJobs\";\r\nimport CarryPartJobs from \"Jobs/CarryPartJobs\";\r\n\r\n/**\r\n * Contains all functions for initializing and updating room memory\r\n */\r\nexport default class MemoryHelper_Room {\r\n    /**\r\n     * Calls all the helper functions (that don't need additional input) to update room.memory.\r\n     * NOTE: This will update the entire memory tree, so use this function sparingly\r\n     * TODO Make sure this updates every aspect of room memory - currently does not\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateRoomMemory(room: Room): void {\r\n        // Update All Creeps\r\n        this.updateHostileCreeps(room.name);\r\n        this.updateMyCreeps(room.name);\r\n        // Update structures/construction sites\r\n        this.updateConstructionSites(room.name);\r\n        this.updateStructures(room.name);\r\n        // Update sources, minerals, dropped resources, tombstones\r\n        this.updateSources(room.name);\r\n        this.updateMinerals(room);\r\n        this.updateDroppedResources(room);\r\n        this.updateTombstones(room);\r\n        // Update Custom Memory Components\r\n        this.updateDependentRooms(room);\r\n        // Update Job Lists\r\n        this.updateGetEnergy_allJobs(room);\r\n        this.updateCarryPart_allJobs(room);\r\n        this.updateWorkPart_allJobs(room);\r\n        this.updateClaimPart_allJobs(room);\r\n        // Calling the below function is equivalent to calling all of the above updateGetEnergy_xxxxxJobs functions\r\n        // this.updateGetEnergy_allJobs(room);\r\n    }\r\n\r\n    /**\r\n     * Update room memory for all dependent room types\r\n     * TODO Implement this function - Decide how we plan to do it\r\n     * @param room The room to update the dependencies of\r\n     */\r\n    public static updateDependentRooms(room: Room): void {\r\n        // Cycle through all flags and check for any claim rooms or remote rooms\r\n        // ? Should we check for the closest main room?\r\n        // ? I have an idea of a system where we plant a remoteFlag/claimFlag\r\n        // ? and then we place a different colored flag in the room that we want\r\n        // ? to assign that remote/claim room to. Once the program detects the assignment flag\r\n        // ? and the room it assigns to, it removes the assignment flag and could optionally remove\r\n        // ? the remoteFlag as well (but I think it would be more clear to leave the flag in the room)\r\n    }\r\n    /**\r\n     * Find all hostile creeps in room\r\n     * TODO Check for boosted creeps\r\n     * [Cached] Room.memory.hostiles\r\n     * @param room The Room to update\r\n     */\r\n    public static updateHostileCreeps(roomName: string): void {\r\n        // If we have no vision of the room, return\r\n        if (!Memory.rooms[roomName]) {\r\n            return;\r\n        }\r\n\r\n        Memory.rooms[roomName].hostiles = { data: { ranged: [], melee: [], heal: [], boosted: [] }, cache: null };\r\n        const enemies = Game.rooms[roomName].find(FIND_HOSTILE_CREEPS);\r\n\r\n        // Sort creeps into categories\r\n        _.forEach(enemies, (enemy: Creep) => {\r\n            // * Check for boosted creeps and put them at the front of the if else stack\r\n            if (enemy.getActiveBodyparts(HEAL) > 0) {\r\n                Memory.rooms[roomName].hostiles.data.heal.push(enemy.id);\r\n            } else if (enemy.getActiveBodyparts(RANGED_ATTACK) > 0) {\r\n                Memory.rooms[roomName].hostiles.data.ranged.push(enemy.id);\r\n            } else if (enemy.getActiveBodyparts(ATTACK) > 0) {\r\n                Memory.rooms[roomName].hostiles.data.melee.push(enemy.id);\r\n            }\r\n        });\r\n\r\n        Memory.rooms[roomName].hostiles.cache = Game.time;\r\n    }\r\n\r\n    /**\r\n     * Find all owned creeps in room\r\n     * ? Should we filter these by role into memory? E.g. creeps.data.miners\r\n     * [Cached] Room.memory.creeps\r\n     * @param room The Room we are checking in\r\n     */\r\n    public static updateMyCreeps(roomName: string): void {\r\n        // If we have no vision of the room, return\r\n        if (!Memory.rooms[roomName]) {\r\n            return;\r\n        }\r\n\r\n        Memory.rooms[roomName].creeps = { data: null, cache: null };\r\n\r\n        // Changed this because it wouldn't catch remote squads for example\r\n        // as they aren't actually in the room all the time (had this problem with my last solo code base)\r\n        const creeps = _.filter(Game.creeps, creep => creep.memory.homeRoom === roomName);\r\n\r\n        Memory.rooms[roomName].creeps!.data = _.map(creeps, (creep: Creep) => creep.id);\r\n        Memory.rooms[roomName].creeps!.cache = Game.time;\r\n    }\r\n\r\n    /**\r\n     * Find all construction sites in room\r\n     *\r\n     * [Cached] Room.memory.constructionSites\r\n     * @param room The Room we are checking in\r\n     */\r\n    public static updateConstructionSites(roomName: string): void {\r\n        // If we have no vision of the room, return\r\n        if (!Memory.rooms[roomName]) {\r\n            return;\r\n        }\r\n\r\n        Memory.rooms[roomName].constructionSites = { data: null, cache: null };\r\n\r\n        const constructionSites: ConstructionSite[] = Game.rooms[roomName].find(FIND_MY_CONSTRUCTION_SITES);\r\n\r\n        Memory.rooms[roomName].constructionSites.data = _.map(constructionSites, (c: ConstructionSite) => c.id);\r\n        Memory.rooms[roomName].constructionSites.cache = Game.time;\r\n    }\r\n\r\n    /**\r\n     * Find all structures in room\r\n     *\r\n     * [Cached] Room.memory.structures\r\n     * @param room The Room we are checking in\r\n     */\r\n    public static updateStructures(roomName: string): void {\r\n        // If we have no vision of the room, return\r\n        if (!Memory.rooms[roomName]) {\r\n            return;\r\n        }\r\n\r\n        Memory.rooms[roomName].structures = { data: {}, cache: null };\r\n\r\n        const allStructures: Structure[] = Game.rooms[roomName].find(FIND_STRUCTURES);\r\n        const sortedStructureIDs: StringMap = {};\r\n        // For each structureType, remove the structures from allStructures and map them to ids in the memory object.\r\n        _.forEach(ALL_STRUCTURE_TYPES, (type: StructureConstant) => {\r\n            sortedStructureIDs[type] = _.map(\r\n                _.remove(allStructures, (struct: Structure) => struct.structureType === type),\r\n                (struct: Structure) => struct.id\r\n            );\r\n        });\r\n\r\n        Memory.rooms[roomName].structures.data = sortedStructureIDs;\r\n        Memory.rooms[roomName].structures.cache = Game.time;\r\n    }\r\n\r\n    /**\r\n     * Find all sources in room\r\n     *\r\n     * [Cached] Room.memory.sources\r\n     * @param room The room to check in\r\n     */\r\n    public static updateSources(roomName: string): void {\r\n        // If we have no vision of the room, return\r\n        if (!Memory.rooms[roomName]) {\r\n            return;\r\n        }\r\n\r\n        Memory.rooms[roomName].sources = { data: {}, cache: null };\r\n\r\n        const sources = Game.rooms[roomName].find(FIND_SOURCES);\r\n\r\n        Memory.rooms[roomName].sources.data = _.map(sources, (source: Source) => source.id);\r\n        Memory.rooms[roomName].sources.cache = Game.time;\r\n    }\r\n\r\n    /**\r\n     * Find all sources in room\r\n     *\r\n     * [Cached] Room.memory.sources\r\n     * @param room The room to check in\r\n     */\r\n    public static updateMinerals(room: Room): void {\r\n        Memory.rooms[room.name].minerals = { data: {}, cache: null };\r\n\r\n        const minerals = room.find(FIND_MINERALS);\r\n\r\n        Memory.rooms[room.name].minerals.data = _.map(minerals, (mineral: Mineral) => mineral.id);\r\n        Memory.rooms[room.name].minerals.cache = Game.time;\r\n    }\r\n\r\n    /**\r\n     * Finds all tombstones in room\r\n     *\r\n     * @param room The room to check in\r\n     */\r\n    public static updateTombstones(room: Room): void {\r\n        Memory.rooms[room.name].tombstones = { data: {}, cache: null };\r\n\r\n        const tombstones = room.find(FIND_TOMBSTONES);\r\n\r\n        Memory.rooms[room.name].tombstones.data = _.map(tombstones, (tombstone: Tombstone) => tombstone.id);\r\n        Memory.rooms[room.name].tombstones.cache = Game.time;\r\n    }\r\n\r\n    /**\r\n     * Find all dropped resources in a room\r\n     *\r\n     * @param room The room to check in\r\n     */\r\n    public static updateDroppedResources(room: Room): void {\r\n        Memory.rooms[room.name].droppedResources = { data: {}, cache: null };\r\n\r\n        const droppedResources = room.find(FIND_DROPPED_RESOURCES);\r\n\r\n        Memory.rooms[room.name].droppedResources.data = _.map(droppedResources, (resource: Resource) => resource.id);\r\n        Memory.rooms[room.name].droppedResources.cache = Game.time;\r\n    }\r\n\r\n    /**\r\n     * update the room state\r\n     * @param room the room we are updating\r\n     * @param stateConst the state we are applying to the room\r\n     */\r\n    public static updateRoomState(room: Room): void {\r\n        RoomApi.setRoomState(room);\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * update the room defcon\r\n     * @param room the room we are updating\r\n     * @param stateConst the defcon we are applying to the room\r\n     */\r\n    public static updateDefcon(room: Room): void {\r\n        RoomApi.setDefconLevel(room);\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Update the room's GetEnergyJobListing\r\n     * @param room The room to update the memory of\r\n     * @param jobList The object to store in `Memory.rooms[room.name].jobs.getEnergyJobs`\r\n     */\r\n    public static updateGetEnergy_allJobs(room: Room) {\r\n        // Clean out old job listing\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.getEnergyJobs;\r\n        }\r\n\r\n        this.updateGetEnergy_sourceJobs(room);\r\n        this.updateGetEnergy_containerJobs(room);\r\n        this.updateGetEnergy_linkJobs(room);\r\n        this.updateGetEnergy_backupStructuresJobs(room);\r\n        this.updateGetEnergy_pickupJobs(room);\r\n    }\r\n\r\n    /**\r\n     * Update the room's GetEnergyJobListing_sourceJobs\r\n     * TODO Change this function to restore old job memory, rather than delete it and refresh it\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateGetEnergy_sourceJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs = {};\r\n        }\r\n\r\n        // What to do if the jobs already exist\r\n        // ! Deletes existing jobs\r\n        // ? Should we change it to temporarily store the data for each job, and then restore them onto the newly created Jobs?\r\n        // ? Or should we just set it up so that each time the Job objects are updated they start fresh? (might require mining creep memory for changes to the job status, or accepting inaccuracy)\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs!.sourceJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.getEnergyJobs!.sourceJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.getEnergyJobs!.sourceJobs = {\r\n            data: GetEnergyJobs.createSourceJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's GetEnergyJobListing_containerJobs\r\n     * @param room The room to update the memory fo\r\n     */\r\n    public static updateGetEnergy_containerJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs = {};\r\n        }\r\n\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs!.containerJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.getEnergyJobs!.containerJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.getEnergyJobs!.containerJobs = {\r\n            data: GetEnergyJobs.createContainerJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's GetEnergyJobListing_linkJobs\r\n     * @param room The room to update the memory fo\r\n     */\r\n    public static updateGetEnergy_linkJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs = {};\r\n        }\r\n\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs!.linkJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.getEnergyJobs!.linkJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.getEnergyJobs!.linkJobs = {\r\n            data: GetEnergyJobs.createLinkJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's GetEnergyJobListing_containerJobs\r\n     * @param room The room to update the memory fo\r\n     */\r\n    public static updateGetEnergy_backupStructuresJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs = {};\r\n        }\r\n\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs!.backupStructures !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.getEnergyJobs!.backupStructures;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.getEnergyJobs!.backupStructures = {\r\n            data: GetEnergyJobs.createBackupStructuresJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's GetEnergyJobListing_containerJobs\r\n     * @param room The room to update the memory fo\r\n     */\r\n    public static updateGetEnergy_pickupJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs = {};\r\n        }\r\n\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs!.pickupJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.getEnergyJobs!.pickupJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.getEnergyJobs!.pickupJobs = {\r\n            data: GetEnergyJobs.createPickupJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's ClaimPartJobListing\r\n     * @param room The room to update the memory of\r\n     * @param jobList The object to store in `Memory.rooms[room.name].jobs.getEnergyJobs`\r\n     */\r\n    public static updateClaimPart_allJobs(room: Room) {\r\n        // Clean out old job listing\r\n        if (Memory.rooms[room.name].jobs!.getEnergyJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.getEnergyJobs;\r\n        }\r\n\r\n        this.updateClaimPart_claimJobs(room);\r\n        this.updateClaimPart_reserveJobs(room);\r\n        this.updateClaimPart_signJobs(room);\r\n        this.updateClaimPart_controllerAttackJobs(room);\r\n    }\r\n\r\n    /**\r\n     * Update the room's ClaimPartJobListing_claimJobs\r\n     * TODO Change this function to restore old job memory, rather than delete it and refresh it\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateClaimPart_claimJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.claimPartJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.claimPartJobs = {};\r\n        }\r\n        // What to do if the jobs already exist\r\n        if (Memory.rooms[room.name].jobs!.claimPartJobs!.claimJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.claimPartJobs!.claimJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.claimPartJobs!.claimJobs = {\r\n            data: ClaimPartJobs.createClaimJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's ClaimPartJobListing_reserveJobs\r\n     * TODO Change this function to restore old job memory, rather than delete it and refresh it\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateClaimPart_reserveJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.claimPartJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.claimPartJobs = {};\r\n        }\r\n        // What to do if the jobs already exist\r\n        if (Memory.rooms[room.name].jobs!.claimPartJobs!.reserveJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.claimPartJobs!.reserveJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.claimPartJobs!.reserveJobs = {\r\n            data: ClaimPartJobs.createReserveJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's ClaimPartJobListing_signJobs\r\n     * TODO Change this function to restore old job memory, rather than delete it and refresh it\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateClaimPart_signJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.claimPartJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.claimPartJobs = {};\r\n        }\r\n        // What to do if the jobs already exist\r\n        if (Memory.rooms[room.name].jobs!.claimPartJobs!.signJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.claimPartJobs!.signJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.claimPartJobs!.signJobs = {\r\n            data: ClaimPartJobs.createSignJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's ClaimPartJobListing_attackJobs\r\n     * TODO Change this function to restore old job memory, rather than delete it and refresh it\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateClaimPart_controllerAttackJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.claimPartJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.claimPartJobs = {};\r\n        }\r\n        // What to do if the jobs already exist\r\n        if (Memory.rooms[room.name].jobs!.claimPartJobs!.attackJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.claimPartJobs!.attackJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.claimPartJobs!.attackJobs = {\r\n            data: ClaimPartJobs.createAttackJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's WorkPartJobListing\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateWorkPart_allJobs(room: Room) {\r\n        // Clean out old job listing\r\n        if (Memory.rooms[room.name].jobs!.workPartJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.workPartJobs;\r\n        }\r\n\r\n        this.updateWorkPart_repairJobs(room);\r\n        this.updateWorkPart_buildJobs(room);\r\n        this.updateWorkPart_upgradeJobs(room);\r\n    }\r\n\r\n    /**\r\n     * Update the room's WorkPartJobListing_repairJobs\r\n     * TODO Change this function to restore old job memory, rather than delete it and refresh it\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateWorkPart_repairJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.workPartJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.workPartJobs = {};\r\n        }\r\n        // What to do if the jobs already exist\r\n        if (Memory.rooms[room.name].jobs!.workPartJobs!.repairJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.workPartJobs!.repairJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.workPartJobs!.repairJobs = {\r\n            data: WorkPartJobs.createRepairJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's WorkPartJobListing_buildJobs\r\n     * TODO Change this function to restore old job memory, rather than delete it and refresh it\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateWorkPart_buildJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.workPartJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.workPartJobs = {};\r\n        }\r\n        // What to do if the jobs already exist\r\n        if (Memory.rooms[room.name].jobs!.workPartJobs!.buildJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.workPartJobs!.buildJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.workPartJobs!.buildJobs = {\r\n            data: WorkPartJobs.createBuildJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n    /**\r\n     * Update the room's WorkPartJobListing_upgradeJobs\r\n     * TODO Change this function to restore old job memory, rather than delete it and refresh it\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateWorkPart_upgradeJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.workPartJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.workPartJobs = {};\r\n        }\r\n        // What to do if the jobs already exist\r\n        if (Memory.rooms[room.name].jobs!.workPartJobs!.upgradeJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.workPartJobs!.upgradeJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.workPartJobs!.upgradeJobs = {\r\n            data: WorkPartJobs.createUpgradeJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's WorkPartJobListing\r\n     * @param room The room to update the memory of\r\n     */\r\n    public static updateCarryPart_allJobs(room: Room) {\r\n        // Clean out old job listing\r\n        if (Memory.rooms[room.name].jobs!.carryPartJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.carryPartJobs;\r\n        }\r\n\r\n        this.updateCarryPart_fillJobs(room);\r\n        this.updateCarryPart_storeJobs(room);\r\n    }\r\n\r\n    /**\r\n     * Update the room's CarryPartJobListing_fillJobs\r\n     * @param room  The room to update the memory of\r\n     */\r\n    public static updateCarryPart_fillJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.carryPartJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.carryPartJobs = {};\r\n        }\r\n        // What to do if the jobs already exist\r\n        if (Memory.rooms[room.name].jobs!.carryPartJobs!.fillJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.carryPartJobs!.fillJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.carryPartJobs!.fillJobs = {\r\n            data: CarryPartJobs.createFillJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the room's CarryPartJobListing_fillJobs\r\n     * @param room  The room to update the memory of\r\n     */\r\n    public static updateCarryPart_storeJobs(room: Room) {\r\n        if (Memory.rooms[room.name].jobs!.carryPartJobs === undefined) {\r\n            Memory.rooms[room.name].jobs!.carryPartJobs = {};\r\n        }\r\n        // What to do if the jobs already exist\r\n        if (Memory.rooms[room.name].jobs!.carryPartJobs!.storeJobs !== undefined) {\r\n            delete Memory.rooms[room.name].jobs!.carryPartJobs!.storeJobs;\r\n        }\r\n\r\n        Memory.rooms[room.name].jobs!.carryPartJobs!.storeJobs = {\r\n            data: CarryPartJobs.createStoreJobs(room),\r\n            cache: Game.time\r\n        };\r\n    }\r\n\r\n    /**\r\n     * update creep limits for domestic creeps\r\n     * @param room room we are updating limits for\r\n     * @param newLimits new limits we are setting\r\n     */\r\n    public static updateDomesticLimits(room: Room, newLimits: DomesticCreepLimits): void {\r\n        // * Optionally apply a filter or otherwise check the limits before assigning them\r\n        Memory.rooms[room.name].creepLimit![\"domesticLimits\"] = newLimits;\r\n    }\r\n\r\n    /**\r\n     * update creep limits for remote creeps\r\n     * @param room room we are updating limits for\r\n     * @param newLimits new limits we are setting\r\n     */\r\n    public static updateRemoteLimits(room: Room, newLimits: RemoteCreepLimits): void {\r\n        // * Optionally apply a filter or otherwise check the limits before assigning them\r\n        Memory.rooms[room.name].creepLimit![\"remoteLimits\"] = newLimits;\r\n    }\r\n\r\n    /**\r\n     * update creep limits for military creeps\r\n     * @param room room we are updating limits for\r\n     * @param newLimits new limits we are setting\r\n     */\r\n    public static updateMilitaryLimits(room: Room, newLimits: MilitaryCreepLimits): void {\r\n        // * Optionally apply a filter or otherwise check the limits before assigning them\r\n        Memory.rooms[room.name].creepLimit![\"militaryLimits\"] = newLimits;\r\n    }\r\n}\r\n","import { SpawnHelper } from \"Helpers/SpawnHelper\";\r\nimport {\r\n    domesticRolePriority,\r\n    militaryRolePriority,\r\n    remoteRolePriority,\r\n    ROLE_COLONIZER,\r\n    ROLE_REMOTE_MINER,\r\n    ROLE_REMOTE_RESERVER,\r\n    ROLE_LORRY,\r\n    ROLE_HARVESTER,\r\n    ROLE_MEDIC,\r\n    ROLE_MINER,\r\n    ROLE_POWER_UPGRADER,\r\n    ROLE_REMOTE_DEFENDER,\r\n    ROLE_REMOTE_HARVESTER,\r\n    ROLE_DOMESTIC_DEFENDER,\r\n    ROLE_CLAIMER,\r\n    ROLE_STALKER,\r\n    ROLE_WORKER,\r\n    ROLE_ZEALOT,\r\n    GROUPED,\r\n    COLLATED,\r\n    ROOM_STATE_INTRO,\r\n    ROOM_STATE_BEGINNER,\r\n    ROOM_STATE_INTER,\r\n    ROOM_STATE_ADVANCED,\r\n    ROOM_STATE_NUKE_INBOUND,\r\n    ROOM_STATE_SEIGE,\r\n    ROOM_STATE_STIMULATE,\r\n    ROOM_STATE_UPGRADER,\r\n    TIER_1,\r\n    TIER_2,\r\n    TIER_3,\r\n    TIER_4,\r\n    TIER_5,\r\n    TIER_6,\r\n    TIER_7,\r\n    TIER_8,\r\n    STANDARD_SQUAD,\r\n    ZEALOT_SOLO,\r\n    STALKER_SOLO\r\n} from \"utils/Constants\";\r\nimport MemoryHelperRoom from \"../Helpers/MemoryHelper_Room\";\r\nimport RoomHelper from \"../Helpers/RoomHelper\";\r\nimport MemoryApi from \"./Memory.Api\";\r\nimport UserException from \"utils/UserException\";\r\nimport EmpireApi from \"./Empire.Api\";\r\n\r\n/**\r\n * The API used by the spawn manager\r\n */\r\nexport default class SpawnApi {\r\n    /**\r\n     * set domestic creep limits\r\n     * @param room the room we want limits for\r\n     */\r\n    public static generateDomesticCreepLimits(room: Room): DomesticCreepLimits {\r\n        const domesticLimits: DomesticCreepLimits = {\r\n            miner: 0,\r\n            harvester: 0,\r\n            worker: 0,\r\n            powerUpgrader: 0,\r\n            lorry: 0\r\n        };\r\n\r\n        const numLorries: number = SpawnHelper.getLorryLimitForRoom(room, room.memory.roomState!);\r\n        let minerLimits: number = MemoryApi.getSources(room.name).length;\r\n        let numRemoteRooms: number = RoomHelper.numRemoteRooms(room);\r\n        // To prevent dropping to 2 workers if we don't have remote rooms\r\n        if (numRemoteRooms === 0) {\r\n            numRemoteRooms = 1;\r\n        }\r\n\r\n        // check what room state we are in\r\n        switch (room.memory.roomState) {\r\n            // Intro\r\n            case ROOM_STATE_INTRO:\r\n                // Domestic Creep Definitions\r\n                domesticLimits[ROLE_MINER] = 1;\r\n                domesticLimits[ROLE_HARVESTER] = 1;\r\n                domesticLimits[ROLE_WORKER] = 1;\r\n\r\n                break;\r\n\r\n            // Beginner\r\n            case ROOM_STATE_BEGINNER:\r\n                // Domestic Creep Definitions\r\n\r\n                if (room.energyCapacityAvailable < 550) {\r\n                    const numAccessTilesToSource: number = SpawnHelper.getNumAccessTilesToSources(room);\r\n                    minerLimits = numAccessTilesToSource < 4 ? numAccessTilesToSource : 4;\r\n                }\r\n                domesticLimits[ROLE_MINER] = minerLimits\r\n                domesticLimits[ROLE_HARVESTER] = 4;\r\n                domesticLimits[ROLE_WORKER] = 4;\r\n\r\n                break;\r\n\r\n            // Intermediate\r\n            case ROOM_STATE_INTER:\r\n                // Domestic Creep Definitions\r\n                domesticLimits[ROLE_MINER] = minerLimits;\r\n                domesticLimits[ROLE_HARVESTER] = 3;\r\n                domesticLimits[ROLE_WORKER] = 5;\r\n\r\n                break;\r\n\r\n            // Advanced\r\n            case ROOM_STATE_ADVANCED:\r\n                // Domestic Creep Definitions\r\n                domesticLimits[ROLE_MINER] = minerLimits;\r\n                domesticLimits[ROLE_HARVESTER] = 2;\r\n                domesticLimits[ROLE_WORKER] = 3 + (numRemoteRooms - 1);\r\n                domesticLimits[ROLE_POWER_UPGRADER] = 0;\r\n                domesticLimits[ROLE_LORRY] = numLorries;\r\n\r\n                break;\r\n\r\n            // Upgrader\r\n            case ROOM_STATE_UPGRADER:\r\n                // Domestic Creep Definitions\r\n                domesticLimits[ROLE_MINER] = minerLimits;\r\n                domesticLimits[ROLE_HARVESTER] = 2;\r\n                domesticLimits[ROLE_WORKER] = 2;\r\n                domesticLimits[ROLE_POWER_UPGRADER] = 1;\r\n                domesticLimits[ROLE_LORRY] = numLorries;\r\n\r\n                break;\r\n\r\n            // Stimulate\r\n            case ROOM_STATE_STIMULATE:\r\n                // Domestic Creep Definitions\r\n                domesticLimits[ROLE_MINER] = minerLimits;\r\n                domesticLimits[ROLE_HARVESTER] = 3;\r\n                domesticLimits[ROLE_WORKER] = 3;\r\n                domesticLimits[ROLE_POWER_UPGRADER] = 2;\r\n                domesticLimits[ROLE_LORRY] = numLorries;\r\n\r\n                break;\r\n\r\n            // Seige\r\n            case ROOM_STATE_SEIGE:\r\n                // Domestic Creep Definitions\r\n                domesticLimits[ROLE_MINER] = minerLimits;\r\n                domesticLimits[ROLE_HARVESTER] = 3;\r\n                domesticLimits[ROLE_WORKER] = 2;\r\n                domesticLimits[ROLE_LORRY] = numLorries;\r\n\r\n                break;\r\n        }\r\n\r\n        // Return the limits\r\n        return domesticLimits;\r\n    }\r\n\r\n    /**\r\n     * set remote creep limits\r\n     * (we got shooters on deck)\r\n     * @param room the room we want limits for\r\n     */\r\n    public static generateRemoteCreepLimits(room: Room): RemoteCreepLimits {\r\n        const remoteLimits: RemoteCreepLimits = {\r\n            remoteMiner: 0,\r\n            remoteHarvester: 0,\r\n            remoteReserver: 0,\r\n            remoteColonizer: 0,\r\n            remoteDefender: 0,\r\n            claimer: 0\r\n        };\r\n\r\n        const numRemoteRooms: number = RoomHelper.numRemoteRooms(room);\r\n        const numClaimRooms: number = RoomHelper.numClaimRooms(room);\r\n\r\n        // If we do not have any remote rooms, return the initial remote limits (Empty)\r\n        if (numRemoteRooms <= 0 && numClaimRooms <= 0) {\r\n            return remoteLimits;\r\n        }\r\n\r\n        // Gather the rest of the data only if we have a remote room or a claim room\r\n        const numRemoteDefenders: number = RoomHelper.numRemoteDefenders(room);\r\n        const numRemoteSources: number = RoomHelper.numRemoteSources(room);\r\n        const numCurrentlyUnclaimedClaimRooms: number = RoomHelper.numCurrentlyUnclaimedClaimRooms(room);\r\n\r\n        // check what room state we are in\r\n        switch (room.memory.roomState) {\r\n            // Advanced, Upgrader, and Stimulate are the only allowed states for remote mining and claiming operations currently\r\n            // Might change for earlier room states to allow claimers and colonizers, up for debate\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_STIMULATE:\r\n                // Remote Creep Definitions\r\n                remoteLimits[ROLE_REMOTE_MINER] = SpawnHelper.getLimitPerRemoteRoomForRolePerSource(\r\n                    ROLE_REMOTE_MINER,\r\n                    numRemoteSources\r\n                );\r\n                remoteLimits[ROLE_REMOTE_HARVESTER] = SpawnHelper.getLimitPerRemoteRoomForRolePerSource(\r\n                    ROLE_REMOTE_HARVESTER,\r\n                    numRemoteSources\r\n                );\r\n                remoteLimits[ROLE_REMOTE_RESERVER] =\r\n                    numRemoteRooms * SpawnHelper.getLimitPerRemoteRoomForRolePerSource(ROLE_REMOTE_RESERVER, 1);\r\n                remoteLimits[ROLE_COLONIZER] = numClaimRooms * SpawnHelper.getLimitPerClaimRoomForRole(ROLE_CLAIMER);\r\n                remoteLimits[ROLE_REMOTE_DEFENDER] = numRemoteDefenders;\r\n                remoteLimits[ROLE_CLAIMER] =\r\n                    numCurrentlyUnclaimedClaimRooms * SpawnHelper.getLimitPerClaimRoomForRole(ROLE_CLAIMER);\r\n\r\n                break;\r\n        }\r\n\r\n        return remoteLimits;\r\n    }\r\n\r\n    /**\r\n     * set military creep limits\r\n     * @param room the room we want limits for\r\n     */\r\n    public static generateMilitaryCreepLimits(room: Room): MilitaryCreepLimits {\r\n\r\n        // Get the active flag associated with this room (should only be one active attack flag, so finding first one is extra saftey)\r\n        const militaryLimits: MilitaryCreepLimits = {\r\n            zealot: 0,\r\n            stalker: 0,\r\n            medic: 0,\r\n            domesticDefender: 0\r\n        };\r\n        const targetRoomMemoryArray: Array<AttackRoomMemory | undefined> = MemoryApi.getAttackRooms(room);\r\n        const activeAttackRoomFlag: ParentFlagMemory | undefined = undefined;\r\n        // TODO - major flaws with how i was doing military limits, needs to be reworked somehow\r\n        return militaryLimits;\r\n    }\r\n\r\n    /**\r\n     * raises the military creep limits based on the flag type\r\n     * @param flagMemory the memory associated with the attack flag\r\n     * @param room the room we are raising limits for\r\n     */\r\n    public static raiseMilitaryCreepLimits(flagMemory: AttackFlagMemory | undefined, room: Room): void {\r\n        // If flag memory is undefined, don't waste cpu\r\n        if (!flagMemory) {\r\n            return;\r\n        }\r\n\r\n        switch (flagMemory!.flagType) {\r\n            case ZEALOT_SOLO:\r\n                MemoryApi.adjustCreepLimitsByDelta(room, \"militaryLimits\", \"zealot\", 1);\r\n\r\n                break;\r\n\r\n            case STALKER_SOLO:\r\n                MemoryApi.adjustCreepLimitsByDelta(room, \"militaryLimits\", \"stalker\", 1);\r\n\r\n                break;\r\n\r\n            case STANDARD_SQUAD:\r\n                MemoryApi.adjustCreepLimitsByDelta(room, \"militaryLimits\", \"zealot\", 1);\r\n                MemoryApi.adjustCreepLimitsByDelta(room, \"militaryLimits\", \"stalker\", 1);\r\n                MemoryApi.adjustCreepLimitsByDelta(room, \"militaryLimits\", \"medic\", 1);\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * raises the domestic defender limit based on the defcon state of the room\r\n     * @param room the room we are in\r\n     * @param defcon the defcon of said room\r\n     */\r\n    public static raiseDomesticDefenderCreepLimits(room: Room, defcon: number): void {\r\n        // For now, just raise by one, later we can decide what certain defcons means for what we want to spawn\r\n        // just wanted it in a function so we have the foundation for that in place\r\n        MemoryApi.adjustCreepLimitsByDelta(room, \"militaryLimits\", ROLE_DOMESTIC_DEFENDER, 1);\r\n    }\r\n\r\n    /**\r\n     * set creep limits for the room\r\n     * @param room the room we are setting limits for\r\n     */\r\n    public static setCreepLimits(room: Room): void {\r\n        // Set Domestic Limits to Memory\r\n        MemoryHelperRoom.updateDomesticLimits(room, this.generateDomesticCreepLimits(room));\r\n\r\n        // Set Remote Limits to Memory\r\n        MemoryHelperRoom.updateRemoteLimits(room, this.generateRemoteCreepLimits(room));\r\n\r\n        // Set Military Limits to Memory\r\n        MemoryHelperRoom.updateMilitaryLimits(room, this.generateMilitaryCreepLimits(room));\r\n    }\r\n\r\n    /**\r\n     * get the first available open spawn for a room\r\n     * @param room the room we are checking the spawn for\r\n     */\r\n    public static getOpenSpawn(room: Room): any {\r\n        // Get all openSpawns, and return the first\r\n        const openSpawns = MemoryApi.getStructureOfType(\r\n            room.name,\r\n            STRUCTURE_SPAWN,\r\n            (spawn: StructureSpawn) => !spawn.spawning\r\n        );\r\n\r\n        if (openSpawns.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return _.first(openSpawns);\r\n    }\r\n\r\n    /**\r\n     * get next creep to spawn\r\n     * @param room the room we want to spawn them in\r\n     */\r\n    public static getNextCreep(room: Room): RoleConstant | null {\r\n        // Get Limits for each creep department\r\n        const creepLimits: CreepLimits = MemoryApi.getCreepLimits(room);\r\n\r\n        // Check if we need a domestic creep -- Return role if one is found\r\n        for (const role of domesticRolePriority) {\r\n            if (MemoryApi.getCreepCount(room, role) < creepLimits.domesticLimits[role]) {\r\n                return role;\r\n            }\r\n        }\r\n        // Check if we need a military creep -- Return role if one is found\r\n        for (const role of militaryRolePriority) {\r\n            if (MemoryApi.getCreepCount(room, role) < creepLimits.militaryLimits[role]) {\r\n                return role;\r\n            }\r\n        }\r\n        // Check if we need a remote creep -- Return role if one is found\r\n        for (const role of remoteRolePriority) {\r\n            if (MemoryApi.getCreepCount(room, role) < creepLimits.remoteLimits[role]) {\r\n                return role;\r\n            }\r\n        }\r\n\r\n        // Return null if we don't need to spawn anything\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * spawn the next creep\r\n     * @param room the room we want to spawn them in\r\n     * @param body BodyPartConstant[] the body array of the creep\r\n     * @param creepOptions creep options we want to give to it\r\n     * @param role RoleConstant the role of the creep\r\n     * @param spawn spawn we are going to use to spawn the creep\r\n     */\r\n    public static spawnNextCreep(\r\n        room: Room,\r\n        body: BodyPartConstant[],\r\n        creepOptions: CreepOptionsCiv | CreepOptionsMili,\r\n        role: RoleConstant,\r\n        spawn: StructureSpawn,\r\n        homeRoom: string,\r\n        targetRoom: string\r\n    ): void {\r\n        // Throw error if we don't have enough energy to spawn this creep\r\n        if (this.getEnergyCostOfBody(body) > room.energyAvailable) {\r\n            throw new UserException(\r\n                \"Creep failed to spawn.\",\r\n                'The role \"' + role + '\" was unable to spawn in room \"' + room.name + '\": Not enough energy .',\r\n                ERROR_WARN\r\n            );\r\n        }\r\n\r\n        const name: string = SpawnHelper.generateCreepName(role, this.getTier(room, role), room);\r\n        const creepMemory = SpawnHelper.generateDefaultCreepMemory(role, homeRoom, targetRoom, creepOptions);\r\n\r\n        spawn.spawnCreep(body, name, { memory: creepMemory });\r\n    }\r\n\r\n    /**\r\n     * get energy cost of creep body\r\n     * @param room the room we are spawning them in\r\n     * @param RoleConstant the role of the creep\r\n     * @param tier the tier of this creep we are spawning\r\n     */\r\n    public static getEnergyCostOfBody(body: BodyPartConstant[]): number {\r\n        // Create the object with the costs of each body part\r\n        let totalCost = 0;\r\n        const bodyPartCost: StringMap = {\r\n            work: 100,\r\n            carry: 50,\r\n            move: 50,\r\n            attack: 80,\r\n            ranged_attack: 150,\r\n            heal: 250,\r\n            claim: 600,\r\n            tough: 10\r\n        };\r\n\r\n        // Loop over the creep body array summing the total cost of the body parts\r\n        for (let i = 0; i < body.length; ++i) {\r\n            const currBodyPart = body[i];\r\n            totalCost += bodyPartCost[currBodyPart];\r\n        }\r\n\r\n        return totalCost;\r\n    }\r\n\r\n    /**\r\n     * check what tier of this creep we are spawning\r\n     * @param room the room we are spawning them in\r\n     * @param RoleConstant the role of the creep\r\n     */\r\n    public static getTier(room: Room, roleConst: RoleConstant | null): TierConstant {\r\n        const energyAvailable: number = room.energyCapacityAvailable;\r\n\r\n        // Check what tier we are in based on the amount of energy the room has\r\n        if (room.memory.roomState === ROOM_STATE_INTRO) {\r\n            return TIER_1;\r\n        }\r\n        if (energyAvailable === TIER_8) {\r\n            return TIER_8;\r\n        }\r\n\r\n        if (energyAvailable >= TIER_7) {\r\n            return TIER_7;\r\n        }\r\n\r\n        if (energyAvailable >= TIER_6) {\r\n            return TIER_6;\r\n        }\r\n\r\n        if (energyAvailable >= TIER_5) {\r\n            return TIER_5;\r\n        }\r\n\r\n        if (energyAvailable >= TIER_4) {\r\n            return TIER_4;\r\n        }\r\n\r\n        if (energyAvailable >= TIER_3) {\r\n            return TIER_3;\r\n        }\r\n\r\n        if (energyAvailable >= TIER_2) {\r\n            return TIER_2;\r\n        }\r\n\r\n        // If we make it here, we are simply tier 1\r\n        return TIER_1;\r\n    }\r\n\r\n    /**\r\n     * get the memory options for this creep\r\n     * @param room the room we are spawning it in\r\n     * @param RoleConstant the role of the creep\r\n     * @param tier the tier of this creep we are spawning\r\n     */\r\n    public static generateCreepOptions(\r\n        room: Room,\r\n        role: RoleConstant | null,\r\n        roomState: RoomStateConstant,\r\n        squadSize?: number,\r\n        squadUUID?: number | null,\r\n        rallyLocation?: RoomPosition | null\r\n    ): CreepOptionsCiv | CreepOptionsMili | undefined {\r\n        // Set default values if military options aren't provided\r\n        // If one of these aren't provided, then the entire purpose of them is nix,\r\n        // So we just check if any of them aren't provided and set defaults for all in that case\r\n        if (!squadSize || !squadUUID || !rallyLocation) {\r\n            squadSize = 0;\r\n            squadUUID = null;\r\n            rallyLocation = null;\r\n        }\r\n\r\n        // Call the correct helper function based on creep role\r\n        switch (role) {\r\n            case ROLE_MINER:\r\n                return SpawnHelper.generateMinerOptions(roomState);\r\n            case ROLE_HARVESTER:\r\n                return SpawnHelper.generateHarvesterOptions(roomState);\r\n            case ROLE_WORKER:\r\n                return SpawnHelper.generateWorkerOptions(roomState);\r\n            case ROLE_LORRY:\r\n                return SpawnHelper.generateLorryOptions(roomState);\r\n            case ROLE_POWER_UPGRADER:\r\n                return SpawnHelper.generatePowerUpgraderOptions(roomState);\r\n            case ROLE_REMOTE_MINER:\r\n                return SpawnHelper.generateRemoteMinerOptions(roomState);\r\n            case ROLE_REMOTE_HARVESTER:\r\n                return SpawnHelper.generateRemoteHarvesterOptions(roomState);\r\n            case ROLE_COLONIZER:\r\n                return SpawnHelper.generateRemoteColonizerOptions(roomState);\r\n            case ROLE_CLAIMER:\r\n                return SpawnHelper.generateClaimerOptions(roomState);\r\n            case ROLE_REMOTE_DEFENDER:\r\n                return SpawnHelper.generateRemoteDefenderOptions(roomState);\r\n            case ROLE_REMOTE_RESERVER:\r\n                return SpawnHelper.generateRemoteReserverOptions(roomState);\r\n            case ROLE_ZEALOT:\r\n                return SpawnHelper.generateZealotOptions(roomState, squadSize, squadUUID, rallyLocation);\r\n            case ROLE_MEDIC:\r\n                return SpawnHelper.generateMedicOptions(roomState, squadSize, squadUUID, rallyLocation);\r\n            case ROLE_STALKER:\r\n                return SpawnHelper.generateStalkerOptions(roomState, squadSize, squadUUID, rallyLocation);\r\n            case ROLE_DOMESTIC_DEFENDER:\r\n                return SpawnHelper.generateDomesticDefenderOptions(roomState);\r\n            default:\r\n                throw new UserException(\r\n                    \"Creep body failed generating.\",\r\n                    'The role \"' + role + '\" was invalid for generating the creep body.',\r\n                    ERROR_ERROR\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate the body for the creep based on the tier and role\r\n     * @param tier the tier our room is at\r\n     * @param role the role of the creep we want\r\n     */\r\n    public static generateCreepBody(tier: TierConstant, role: RoleConstant | null): BodyPartConstant[] {\r\n        // Call the correct helper function based on creep role\r\n        switch (role) {\r\n            case ROLE_MINER:\r\n                return SpawnHelper.generateMinerBody(tier);\r\n            case ROLE_HARVESTER:\r\n                return SpawnHelper.generateHarvesterBody(tier);\r\n            case ROLE_WORKER:\r\n                return SpawnHelper.generateWorkerBody(tier);\r\n            case ROLE_LORRY:\r\n                return SpawnHelper.generateLorryBody(tier);\r\n            case ROLE_POWER_UPGRADER:\r\n                return SpawnHelper.generatePowerUpgraderBody(tier);\r\n            case ROLE_REMOTE_MINER:\r\n                return SpawnHelper.generateRemoteMinerBody(tier);\r\n            case ROLE_REMOTE_HARVESTER:\r\n                return SpawnHelper.generateRemoteHarvesterBody(tier);\r\n            case ROLE_COLONIZER:\r\n                return SpawnHelper.generateRemoteColonizerBody(tier);\r\n            case ROLE_CLAIMER:\r\n                return SpawnHelper.generateClaimerBody(tier);\r\n            case ROLE_REMOTE_DEFENDER:\r\n                return SpawnHelper.generateRemoteDefenderBody(tier);\r\n            case ROLE_REMOTE_RESERVER:\r\n                return SpawnHelper.generateRemoteReserverBody(tier);\r\n            case ROLE_ZEALOT:\r\n                return SpawnHelper.generateZealotBody(tier);\r\n            case ROLE_MEDIC:\r\n                return SpawnHelper.generateMedicBody(tier);\r\n            case ROLE_STALKER:\r\n                return SpawnHelper.generateStalkerBody(tier);\r\n            case ROLE_DOMESTIC_DEFENDER:\r\n                return SpawnHelper.generateDomesticDefenderBody(tier);\r\n            default:\r\n                throw new UserException(\r\n                    \"Creep body failed generating.\",\r\n                    'The role \"' + role + '\" was invalid for generating the creep body.',\r\n                    ERROR_ERROR\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a creep body part array, or null if invalid parameters were passed in\r\n     * @param bodyObject The object that describes the creep's body parts\r\n     * @param opts The options for generating the creep body from the descriptor\r\n     */\r\n    public static getCreepBody(bodyObject: CreepBodyDescriptor, opts?: CreepBodyOptions): BodyPartConstant[] {\r\n        let creepBody: BodyPartConstant[] = [];\r\n        let numHealParts = 0;\r\n\r\n        /**\r\n         * If opts is undefined, use default options\r\n         */\r\n        if (opts === undefined) {\r\n            opts = { mixType: GROUPED, toughFirst: false, healLast: false };\r\n        }\r\n\r\n        /**\r\n         * Verify bodyObject - Return null if invalid\r\n         */\r\n        if (SpawnHelper.verifyDescriptor(bodyObject) === false) {\r\n            throw new UserException(\r\n                \"Invalid Creep Body Descriptor\",\r\n                \"Ensure that the object being passed to getCreepBody is in the format { BodyPartConstant: NumberParts } and that NumberParts is > 0.\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Append tough parts on creepBody first - Delete tough property from bodyObject\r\n         */\r\n        if (opts.toughFirst && bodyObject.tough) {\r\n            creepBody = SpawnHelper.generateParts(\"tough\", bodyObject.tough);\r\n            delete bodyObject.tough;\r\n        }\r\n\r\n        /**\r\n         * Retain Heal Information to append on the end of creepBody - Delete heal property from bodyObject\r\n         */\r\n        if (opts.healLast && bodyObject.heal) {\r\n            numHealParts = bodyObject.heal;\r\n            delete bodyObject.heal;\r\n        }\r\n\r\n        /**\r\n         * If mixType is grouped, add onto creepBody\r\n         */\r\n        if (opts.mixType === GROUPED) {\r\n            const bodyParts = SpawnHelper.getBody_Grouped(bodyObject);\r\n            for (let i = 0; i < bodyParts.length; i++) {\r\n                creepBody.push(bodyParts[i]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * If mixType is collated, add onto creepBody\r\n         */\r\n        if (opts.mixType === COLLATED) {\r\n            const bodyParts = SpawnHelper.getBody_Collated(bodyObject);\r\n            for (let i = 0; i < bodyParts.length; i++) {\r\n                creepBody.push(bodyParts[i]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Append Heal Information that was retained at the beginning of the function\r\n         */\r\n        if (opts.healLast) {\r\n            for (let i = 0; i < numHealParts; i++) {\r\n                creepBody.push(\"heal\");\r\n            }\r\n        }\r\n\r\n        // If creepBody is empty, return undefined\r\n        if (creepBody.length === 0) {\r\n            return [];\r\n        } else {\r\n            return creepBody;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * generates a UUID for a squad\r\n     */\r\n    public static generateSquadUUID(seed?: number) {\r\n        return Math.random() * 10000000;\r\n    }\r\n\r\n    /**\r\n     * generates options for spawning a squad based on the attack room's specifications\r\n     * @param room the room we are spawning the squad in\r\n     */\r\n    public static generateSquadOptions(room: Room, targetRoom: string, roleConst: RoleConstant): StringMap {\r\n        // Set to this for clarity that we aren't expecting any squad options in some cases\r\n        const squadOptions: StringMap = {\r\n            squadSize: 0,\r\n            squadUUID: null,\r\n            rallyLocation: null\r\n        };\r\n\r\n        // Don't actually get anything of value if it isn't a military creep. No point\r\n        if (!SpawnHelper.isMilitaryRole(roleConst)) {\r\n            return squadOptions;\r\n        }\r\n\r\n        // Get an appropirate attack flag for the creep\r\n        const targetRoomMemoryArray: Array<AttackRoomMemory | undefined> = MemoryApi.getAttackRooms(room, targetRoom);\r\n        // Only going to be one room returned, but had to be an array, so just grab it\r\n        const roomMemory: AttackRoomMemory | undefined = _.first(targetRoomMemoryArray);\r\n\r\n        // Drop out early if there are no attack rooms\r\n        if (roomMemory === undefined) {\r\n            return squadOptions;\r\n        }\r\n\r\n        const flagMemoryArray: AttackFlagMemory[] = roomMemory![\"flags\"] as AttackFlagMemory[];\r\n        let selectedFlagMemory: AttackFlagMemory | undefined;\r\n        let currentHighestSquadCount: number = 0;\r\n        let selectedFlagActiveSquadMembers: number = 0;\r\n\r\n        // Loop over the flag memory and attach the creep to the first flag that does not have its squad size fully satisfied\r\n        for (const flagMemory of flagMemoryArray) {\r\n            // Skip non-squad based attack flags\r\n            if (flagMemory.squadSize === 0) {\r\n                continue;\r\n            }\r\n\r\n            const numActiveSquadMembers: number = SpawnHelper.getNumOfActiveSquadMembers(flagMemory, room);\r\n            const numRequestedSquadMembers: number = flagMemory.squadSize;\r\n\r\n            // If we find an active flag that doesn't have its squad requirements met and is currently the flag closest to being met\r\n            if (\r\n                numActiveSquadMembers < numRequestedSquadMembers &&\r\n                numActiveSquadMembers > currentHighestSquadCount &&\r\n                flagMemory.active\r\n            ) {\r\n                selectedFlagMemory = flagMemory;\r\n                currentHighestSquadCount = numActiveSquadMembers;\r\n                selectedFlagActiveSquadMembers = numActiveSquadMembers;\r\n            }\r\n        }\r\n\r\n        // If we didn't find a squad based flag return the default squad options\r\n        if (selectedFlagMemory === undefined) {\r\n            return squadOptions;\r\n        } else {\r\n            // if this flag has met its requirements, deactivate it\r\n            if (selectedFlagActiveSquadMembers === selectedFlagMemory.squadSize) {\r\n                // Deactivate either way\r\n                selectedFlagMemory.active = false;\r\n\r\n                // If its a one time use, complete it as well\r\n                if (EmpireApi.isAttackFlagOneTimeUse(selectedFlagMemory)) {\r\n                    Game.flags[selectedFlagMemory.flagName].memory.complete = true;\r\n                }\r\n            }\r\n\r\n            // Set squad options to the flags memory and return it\r\n            squadOptions.squadSize = selectedFlagMemory.squadSize;\r\n            squadOptions.squadUUID = selectedFlagMemory.squadUUID;\r\n            squadOptions.rallyLocation = selectedFlagMemory.rallyLocation;\r\n            return squadOptions;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the target room for the creep\r\n     * @param room the room we are spawning the creep in\r\n     * @param roleConst the role we are getting room for\r\n     */\r\n    public static getCreepTargetRoom(room: Room, roleConst: RoleConstant): string {\r\n        let roomMemory: RemoteRoomMemory | ClaimRoomMemory | AttackRoomMemory | undefined;\r\n\r\n        switch (roleConst) {\r\n            // Colonizing creeps going to their claim rooms\r\n            case ROLE_COLONIZER:\r\n            case ROLE_CLAIMER:\r\n                roomMemory = SpawnHelper.getLowestNumRoleAssignedClaimRoom(room, roleConst);\r\n\r\n                break;\r\n\r\n            // Remote creeps going to their remote rooms\r\n            case ROLE_REMOTE_DEFENDER:\r\n            case ROLE_REMOTE_HARVESTER:\r\n            case ROLE_REMOTE_MINER:\r\n            case ROLE_REMOTE_RESERVER:\r\n                roomMemory = SpawnHelper.getLowestNumRoleAssignedRemoteRoom(room, roleConst);\r\n\r\n                break;\r\n\r\n            // Military creeps going to their attack rooms\r\n            case ROLE_STALKER:\r\n            case ROLE_MEDIC:\r\n            case ROLE_ZEALOT:\r\n            case ROLE_DOMESTIC_DEFENDER:\r\n                roomMemory = SpawnHelper.getAttackRoomWithActiveFlag(room);\r\n\r\n                break;\r\n\r\n            // Domestic creeps keep their target room as their home room\r\n            // Reason we're using case over default is to increase fail-first paradigm (idk what the word means)\r\n            // If an non-existing role then an error will occur here\r\n            case ROLE_MINER:\r\n            case ROLE_HARVESTER:\r\n            case ROLE_WORKER:\r\n            case ROLE_LORRY:\r\n            case ROLE_POWER_UPGRADER:\r\n                return room.name;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * get the home room for the creep\r\n     * @param room the room the creep is spawning in\r\n     * @param roleConst the role we are getting room for\r\n     */\r\n    public static getCreepHomeRoom(room: Room, roleConst: RoleConstant, targetRoom?: string): string {\r\n        // Okay so this might not even be needed, but I took out colonizer home room setting because\r\n        // That would actually take them out of the creep count for this room, spawning them in an infinite loop\r\n        // We will just set their target room as the claim room and it will have the desired effect\r\n        return room.name;\r\n    }\r\n}\r\n","import MemoryHelper from \"./MemoryHelper\";\r\nimport SpawnApi from \"Api/Spawn.Api\";\r\nimport {\r\n    ROLE_COLONIZER,\r\n    ROLE_REMOTE_MINER,\r\n    ROLE_REMOTE_RESERVER,\r\n    ROLE_MEDIC,\r\n    ROLE_MINER,\r\n    ROLE_REMOTE_HARVESTER,\r\n    ROLE_STALKER,\r\n    ROLE_ZEALOT,\r\n    ROLE_CLAIMER,\r\n    GROUPED,\r\n    COLLATED,\r\n    ROOM_STATE_INTRO,\r\n    ROOM_STATE_BEGINNER,\r\n    ROOM_STATE_INTER,\r\n    ROOM_STATE_ADVANCED,\r\n    ROOM_STATE_NUKE_INBOUND,\r\n    ROOM_STATE_SEIGE,\r\n    ROOM_STATE_STIMULATE,\r\n    ROOM_STATE_UPGRADER,\r\n    TIER_1,\r\n    TIER_2,\r\n    TIER_3,\r\n    TIER_4,\r\n    TIER_5,\r\n    TIER_6,\r\n    TIER_7,\r\n    TIER_8,\r\n    ROLE_DOMESTIC_DEFENDER\r\n} from \"utils/Constants\";\r\nimport UserException from \"utils/UserException\";\r\nimport MemoryApi from \"Api/Memory.Api\";\r\nimport RoomHelper from \"./RoomHelper\";\r\n\r\n/**\r\n * Functions to help keep Spawn.Api clean go here\r\n */\r\nexport class SpawnHelper {\r\n    /**\r\n     * Returns a boolean indicating if the object is a valid creepBody descriptor\r\n     * @param bodyObject The description of the creep body to verify\r\n     */\r\n    public static verifyDescriptor(bodyObject: CreepBodyDescriptor): boolean {\r\n        const partNames = Object.keys(bodyObject);\r\n        let valid: boolean = true;\r\n        // Check that no body parts have a definition of 0 or negative\r\n        for (const part in partNames) {\r\n            if (bodyObject[part] <= 0) {\r\n                valid = false;\r\n            }\r\n            if (!(part in BODYPARTS_ALL)) {\r\n                valid = false;\r\n            }\r\n        }\r\n        return valid;\r\n    }\r\n\r\n    /**\r\n     * Helper function - Returns an array containing @numParts of @part\r\n     * @part The part to create\r\n     * @numParts The number of parts to create\r\n     */\r\n    public static generateParts(part: BodyPartConstant, numParts: number): BodyPartConstant[] {\r\n        const returnArray: BodyPartConstant[] = [];\r\n        for (let i = 0; i < numParts; i++) {\r\n            returnArray.push(part);\r\n        }\r\n        return returnArray;\r\n    }\r\n\r\n    /**\r\n     * Groups the body parts -- e.g. WORK, WORK, CARRY, CARRY, MOVE, MOVE\r\n     * @param descriptor A StringMap of creepbody limits -- { MOVE: 3, CARRY: 2, ... }\r\n     */\r\n    public static getBody_Grouped(descriptor: CreepBodyDescriptor): BodyPartConstant[] {\r\n        const creepBody: BodyPartConstant[] = [];\r\n        _.forEach(Object.keys(descriptor), (part: BodyPartConstant) => {\r\n            // Having ! after property removes 'null' and 'undefined'\r\n            for (let i = 0; i < descriptor[part]!; i++) {\r\n                creepBody.push(part);\r\n            }\r\n        });\r\n        return creepBody;\r\n    }\r\n\r\n    /**\r\n     * Collates the body parts -- e.g. WORK, CARRY, MOVE, WORK, CARRY, ...\r\n     * @param descriptor A StringMap of creepbody limits -- { MOVE: 3, CARRY: 2, ... }\r\n     */\r\n    public static getBody_Collated(descriptor: CreepBodyDescriptor): BodyPartConstant[] {\r\n        const returnParts: BodyPartConstant[] = [];\r\n        const numParts: number = _.sum(_.values(descriptor));\r\n        const partNames = <BodyPartConstant[]>Object.keys(descriptor);\r\n\r\n        let i = 0;\r\n        while (i < numParts) {\r\n            for (let j = 0; j < partNames.length; j++) {\r\n                const currPart: BodyPartConstant = partNames[j];\r\n                if (descriptor[currPart]! >= 1) {\r\n                    returnParts.push(currPart);\r\n                    descriptor[currPart]!--;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        return returnParts;\r\n    }\r\n\r\n    /**\r\n     * Generates a creep name in the format role_tier_uniqueID\r\n     * @param role The role of the creep being generated\r\n     * @param tier The tier of the creep being generated\r\n     */\r\n    public static generateCreepName(role: RoleConstant, tier: TierConstant, room: Room): string {\r\n        const modifier: string = Game.time.toString().slice(-4);\r\n        const name = role + \"_\" + tier + \"_\" + room.name + \"_\" + modifier;\r\n        return name;\r\n    }\r\n\r\n    // Domestic ----\r\n    /**\r\n     * Generate body for miner creep\r\n     * @param tier The tier of the room\r\n     */\r\n    public static generateMinerBody(tier: TierConstant): BodyPartConstant[] {\r\n        let body: CreepBodyDescriptor = { work: 2, move: 2 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_1: // 2 Work, 2 Move - Total Cost: 300\r\n                body = { work: 2, move: 2 };\r\n                opts.mixType = COLLATED; // Just as an example of how we could change opts by tier as well\r\n                break;\r\n\r\n            case TIER_2: // 5 Work, 1 Move - Total Cost: 550\r\n                body = { work: 5, move: 1 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6:\r\n            case TIER_5:\r\n            case TIER_4:\r\n            case TIER_3: // 5 Work, 2 Move - Total Cost: 600\r\n                body = { work: 5, move: 2 };\r\n                break;\r\n        }\r\n\r\n        // Generate the creep body based on the body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for miner creep\r\n     * @param roomState the room state of the room\r\n     */\r\n    public static generateMinerOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    // Options marked with // are overriding the defaults\r\n                    harvestSources: true, //\r\n                    fillContainer: true, //\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for Harvester creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateHarvesterBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for harvester\r\n        let body: CreepBodyDescriptor = { work: 1, carry: 2, move: 2 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_1: // 1 Work, 2 Carry, 2 Move - Total Cost: 300\r\n                body = { work: 1, carry: 2, move: 2 };\r\n                break;\r\n\r\n            case TIER_2: // 2 Work, 4 Carry, 3 Move - Total Cost: 550\r\n                body = { work: 2, carry: 4, move: 3 };\r\n                break;\r\n\r\n            case TIER_3: // 2 Work, 6 Carry, 6 Move - Total Cost: 800\r\n                body = { work: 2, carry: 6, move: 6 };\r\n                break;\r\n\r\n            case TIER_4: // 2 Work, 11 Carry, 11 Move - Total Cost: 1300\r\n                body = { work: 2, carry: 11, move: 11 };\r\n                break;\r\n\r\n            case TIER_6:\r\n            case TIER_5: // 2 Work, 16 Carry, 16 Move - Total Cost: 1800\r\n                body = { work: 2, carry: 16, move: 16 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7: // 2 Work, 20 Carry, 20 Move - Total Cost: 2200\r\n                body = { work: 2, carry: 20, move: 20 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for harvester creep\r\n     * @param roomState the room state of the room\r\n     */\r\n    public static generateHarvesterOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n                creepOptions = {\r\n                    // Options marked with // are overriding the defaults\r\n                    build: true, //\r\n                    upgrade: true, //\r\n                    fillSpawn: true,    //\r\n                    getDroppedEnergy: true, //\r\n                };\r\n\r\n                break;\r\n\r\n            case ROOM_STATE_INTER:\r\n                creepOptions = {\r\n                    // Options marked with // are overriding the defaults\r\n                    build: true, //\r\n                    upgrade: true, //\r\n                    repair: true, //\r\n                    fillSpawn: true,    //\r\n                    getFromContainer: true, //\r\n                    getDroppedEnergy: true, //\r\n                };\r\n\r\n                break;\r\n\r\n            case ROOM_STATE_ADVANCED:\r\n                creepOptions = {\r\n                    // Options marked with // are overriding the defaults\r\n                    fillStorage: true, //\r\n                    fillSpawn: true,    //\r\n                    getFromStorage: true, //\r\n                    getFromContainer: true, //\r\n                    getDroppedEnergy: true, //\r\n                    getFromTerminal: true //\r\n                };\r\n\r\n                break;\r\n\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    // Options marked with // are overriding the defaults\r\n                    repair: true, //\r\n                    fillStorage: true, //\r\n                    fillSpawn: true,\r\n                    getFromStorage: true, //\r\n                    getDroppedEnergy: true, //\r\n                    getFromTerminal: true //\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for worker creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateWorkerBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Worker\r\n        let body: CreepBodyDescriptor = { work: 1, carry: 2, move: 2 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_1: // 1 Work, 2 Carry, 2 Move - Total Cost: 300\r\n                body = { work: 1, carry: 2, move: 2 };\r\n                break;\r\n\r\n            case TIER_2: // 2 Work, 4 Carry, 3 Move - Total Cost: 550\r\n                body = { work: 2, carry: 4, move: 3 };\r\n                break;\r\n\r\n            case TIER_3: // 4 Work, 4 Carry, 4 Move - Total Cost: 800\r\n                body = { work: 4, carry: 4, move: 4 };\r\n                break;\r\n\r\n            case TIER_6:\r\n            case TIER_5:\r\n            case TIER_4: // 7 Work, 6 Carry, 6 Move - Total Cost: 1300\r\n                body = { work: 7, carry: 6, move: 6 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n                // 10 Work, 8 Carry, 8 Move - Total Cost: 1800\r\n                body = { work: 10, carry: 8, move: 8 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for worker creep\r\n     * @param roomState the room state of the room\r\n     */\r\n    public static generateWorkerOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n                creepOptions = {\r\n                    // Options marked with // are overriding the defaults\r\n                    build: true, //\r\n                    upgrade: true, //\r\n                    repair: true, //\r\n                    wallRepair: true, //\r\n                    fillTower: true, //\r\n                    getDroppedEnergy: true, //\r\n                };\r\n\r\n                break;\r\n\r\n            case ROOM_STATE_INTER:\r\n                creepOptions = {\r\n                    // Options marked with // are overriding the defaults\r\n                    build: true, //\r\n                    upgrade: true, //\r\n                    repair: true, //\r\n                    wallRepair: true, //\r\n                    fillTower: true, //\r\n                    getFromContainer: true, //\r\n                    getDroppedEnergy: true, //\r\n                };\r\n\r\n                break;\r\n\r\n            case ROOM_STATE_ADVANCED:\r\n                creepOptions = {\r\n                    // Options marked with // are overriding the defaults\r\n                    build: true, //\r\n                    upgrade: true, //\r\n                    repair: true, //\r\n                    wallRepair: true, //\r\n                    fillTower: true, //\r\n                    getFromStorage: true, //\r\n                    getDroppedEnergy: true, //\r\n                    getFromTerminal: true //\r\n                };\r\n\r\n                break;\r\n\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    // Options marked with // are overriding the defaults\r\n                    build: true, //\r\n                    upgrade: true, //\r\n                    repair: true, //\r\n                    wallRepair: true, //\r\n                    fillTower: true, //\r\n                    fillStorage: true, //\r\n                    fillLink: true, //\r\n                    getFromStorage: true, //\r\n                    getDroppedEnergy: true, //\r\n                    getFromTerminal: true //\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for lorry creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateLorryBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Lorry\r\n        let body: CreepBodyDescriptor = { carry: 3, move: 3 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        // There are currently no plans to use lorry before terminal becomes available\r\n        switch (tier) {\r\n            case TIER_1: // 3 Carry, 3 Move - Total Cost: 300\r\n                body = { carry: 3, move: 3 };\r\n                break;\r\n\r\n            case TIER_2: // 6 Carry, 5 Move - Total Cost: 550\r\n                body = { carry: 6, move: 5 };\r\n                break;\r\n\r\n            case TIER_3: // 8 Carry, 8 Move - Total Cost: 800\r\n                body = { carry: 8, move: 8 };\r\n                break;\r\n\r\n            case TIER_5:\r\n            case TIER_4: // 10 Carry, 10 Move - Total Cost: 1000\r\n                body = { carry: 10, move: 10 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6: // 20 Carry, 20 Move - Total Cost: 2000\r\n                body = { carry: 20, move: 20 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for lorry creep\r\n     * @param roomState the room state of the room\r\n     */\r\n    public static generateLorryOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    fillTower: true, //\r\n                    fillStorage: true, //\r\n                    fillContainer: true, //\r\n                    fillLink: true, //\r\n                    fillTerminal: true, //\r\n                    fillLab: true, //\r\n                    getFromStorage: true, //\r\n                    getFromContainer: true, //\r\n                    getDroppedEnergy: true, //\r\n                    getFromTerminal: true //\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for power upgrader creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generatePowerUpgraderBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Power Upgrader\r\n        let body: CreepBodyDescriptor = { work: 18, carry: 8, move: 4 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        // There are currently no plans to use power upgraders before links become available\r\n        // Need to experiment with work parts here and find out whats keeps up with the links\r\n        // Without over draining the storage, but still puts up numbers\r\n        switch (tier) {\r\n            case TIER_6: // 15 Work, 1 Carry, 1 Move - Total Cost: 2300\r\n                body = { work: 18, carry: 8, move: 4 };\r\n                break;\r\n\r\n            case TIER_7: // 1 Work, 8 Carry, 4 Move - Total Cost: 2800\r\n                body = { work: 22, carry: 8, move: 4 };\r\n                break;\r\n\r\n            case TIER_8: // 1 Work, 8 Carry, 4 Move - Total Cost: 2100\r\n                body = { work: 15, carry: 8, move: 4 }; // RCL 8 you can only do 15 per tick\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for power upgrader creep\r\n     * @param roomState the room state of the room\r\n     */\r\n    public static generatePowerUpgraderOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    upgrade: true, //\r\n                    getFromLink: true, //\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n    // ------------\r\n\r\n    // Remote -----\r\n    // No need to start building these guys until tier 4, but allow them at tier 3 in case our strategy changes\r\n    /**\r\n     * Generate body for remote miner creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateRemoteMinerBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Remote Miner\r\n        let body: CreepBodyDescriptor = { work: 6, carry: 1, move: 3 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        // Cap the remote miner at 6 work parts (6 so they finish mining early and can build/repair their container)\r\n        switch (tier) {\r\n            case TIER_3: // 6 Work, 1 Carry, 3 Move - Total Cost: 800\r\n                body = { work: 6, carry: 1, move: 3 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6:\r\n            case TIER_5:\r\n            case TIER_4: // 6 Work, 1 Carry, 4 Move - Total Cost: 850\r\n                body = { work: 6, carry: 1, move: 4 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for remote miner creep\r\n     * @param roomState the room state of the room\r\n     */\r\n    public static generateRemoteMinerOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n                creepOptions = {\r\n                    build: true, //\r\n                    repair: true, //\r\n                    fillContainer: true, //\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for remote harvester creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateRemoteHarvesterBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Remote Harvester\r\n        let body: CreepBodyDescriptor = { carry: 8, move: 8 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_3: // 8 Carry, 8 Move - Total Cost: 800\r\n                body = { carry: 8, move: 8 };\r\n                break;\r\n\r\n            case TIER_4: // 10 Carry, 10 Move- Total Cost: 1000\r\n                body = { carry: 10, move: 10 };\r\n                break;\r\n\r\n            case TIER_5: // 16 Carry, 16 Move - Total Cost: 1600\r\n                body = { carry: 16, move: 16 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6: // 20 Carry, 20 Move - Total Cost: 2000\r\n                body = { carry: 20, move: 20 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for remote harvester creep\r\n     * @param roomState the room state of the room\r\n     */\r\n    public static generateRemoteHarvesterOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n                creepOptions = {\r\n                    build: true, //\r\n                    upgrade: true, //\r\n                    repair: true, //\r\n                    wallRepair: true, //\r\n                    fillTower: true, //\r\n                    getFromContainer: true, //\r\n                    getDroppedEnergy: true, //\r\n                };\r\n\r\n                break;\r\n\r\n            case ROOM_STATE_ADVANCED:\r\n                creepOptions = {\r\n                    repair: true, //\r\n                    fillStorage: true, //\r\n                    getFromContainer: true, //\r\n                    getDroppedEnergy: true, //\r\n                };\r\n\r\n                break;\r\n\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    repair: true, //\r\n                    fillStorage: true, //\r\n                    fillLink: true, //\r\n                    getFromContainer: true, //\r\n                    getDroppedEnergy: true, //\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for remote reserver creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateRemoteReserverBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Remote Reserver\r\n        let body: CreepBodyDescriptor = { claim: 2, move: 2 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6:\r\n            case TIER_5:\r\n            case TIER_4: // 2 Claim, 2 Move - Total Cost: 800\r\n                body = { claim: 2, move: 2 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for remote reserver creep\r\n     * @param roomState the room state of the room\r\n     */\r\n    public static generateRemoteReserverOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                // Remote reservers don't really have options perse, so just leave as defaults\r\n                creepOptions = {};\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for remote colonizer creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateRemoteColonizerBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Remote Colonizer\r\n        let body: CreepBodyDescriptor = { work: 7, carry: 5, move: 6 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_4: // 7 Work, 5 Carry, 5 Move - Total Cost: 1300\r\n                body = { work: 7, carry: 5, move: 6 };\r\n                break;\r\n\r\n            case TIER_5: // 9 Work, 8 Carry, 10 Move - Total Cost: 1800\r\n                body = { work: 9, carry: 8, move: 10 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6: // 12 Work, 10 Carry, 10 Move - Total Cost: 2300\r\n                body = { work: 12, carry: 10, move: 12 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for remote colonizer creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateRemoteColonizerOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    build: true, //\r\n                    upgrade: true, //\r\n                    repair: true, //\r\n                    harvestSources: true,\r\n                    wallRepair: true, //\r\n                    getFromContainer: true, //\r\n                    getDroppedEnergy: true, //\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for claimer creep\r\n     * @param roomState the room state for the room\r\n     */\r\n    public static generateClaimerOptions(roomState: RoomStateConstant): CreepOptionsCiv | undefined {\r\n        let creepOptions: CreepOptionsCiv = this.getDefaultCreepOptionsCiv();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {};\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate options for claimer creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateClaimerBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Claimer\r\n        let body: CreepBodyDescriptor = { claim: 1, move: 2 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6:\r\n            case TIER_5:\r\n            case TIER_4:\r\n            case TIER_3:\r\n            case TIER_2: // 1 Claim, 2 Move, Total Cost: 400\r\n                body = { claim: 1, move: 2 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate body for remote defender creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateRemoteDefenderBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Remote Defender\r\n        let body: CreepBodyDescriptor = { attack: 5, move: 5 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_3: // 5 Attack, 5 Move - Total Cost: 550\r\n                body = { attack: 5, move: 5 };\r\n                break;\r\n\r\n            case TIER_4: //  6 Ranged Attack, 6 Move, - Total Cost: 1200\r\n                body = { ranged_attack: 6, move: 6 };\r\n                break;\r\n\r\n            case TIER_5: // 8 Ranged Attack, 7 Move, 1 Heal - Total Cost: 1800\r\n                body = { ranged_attack: 8, move: 7, heal: 1 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6: // 8 Ranged Attack, 10 Move, 2 Heal\r\n                body = { ranged_attack: 8, move: 10, heal: 2 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for remote defender creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateRemoteDefenderOptions(roomState: RoomStateConstant): CreepOptionsMili | undefined {\r\n        let creepOptions: CreepOptionsMili = this.getDefaultCreepOptionsMili();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    squadSize: 1,\r\n                    squadUUID: null,\r\n                    rallyLocation: null,\r\n                    rallyDone: false,\r\n                    healer: true,\r\n                    defender: true,\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n    // ----------\r\n\r\n    // Military -----\r\n    /**\r\n     * Generate body for zealot creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateZealotBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Zealot\r\n        let body: CreepBodyDescriptor = { work: 0, move: 0 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_1: // 2 Attack, 2 Move - Total Cost: 260\r\n                body = { attack: 2, move: 2 };\r\n                break;\r\n\r\n            case TIER_2: // 3 Attack, 3 Move  - Total Cost: 390\r\n                body = { attack: 3, move: 3 };\r\n                break;\r\n\r\n            case TIER_3: // 5 Attack, 5 Move - Total Cost: 650\r\n                body = { attack: 5, move: 5 };\r\n                break;\r\n\r\n            case TIER_4: // 10 Attack, 10 Move - Total Cost: 1300\r\n                body = { attack: 2, move: 2 };\r\n                break;\r\n\r\n            case TIER_5: // 15 Attack, 12 Move - Total Cost: 1800\r\n                body = { attack: 15, move: 12 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6: // 20 Attack, 14 Move - Total Cost: 2300\r\n                body = { attack: 20, move: 14 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for zealot creep\r\n     * @param roomState the room state of the room\r\n     * @param squadSizeParam the size of the squad associated with the zealot\r\n     * @param squadUUIDParam the squad id that the zealot is a member of\r\n     * @param rallyLocationParam the meeting place for the squad\r\n     */\r\n    public static generateZealotOptions(\r\n        roomState: RoomStateConstant,\r\n        squadSizeParam: number,\r\n        squadUUIDParam: number | null,\r\n        rallyLocationParam: RoomPosition | null\r\n    ): CreepOptionsMili | undefined {\r\n        let creepOptions: CreepOptionsMili = this.getDefaultCreepOptionsMili();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    squadSize: squadSizeParam,\r\n                    squadUUID: squadUUIDParam,\r\n                    rallyLocation: rallyLocationParam,\r\n                    rallyDone: false,\r\n                    attacker: true,\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for medic creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateMedicBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Medic\r\n        let body: CreepBodyDescriptor = { heal: 1, move: 1 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_1: // 1 Heal, 1 Move - Total Cost: 300\r\n                body = { heal: 1, move: 1 };\r\n                break;\r\n\r\n            case TIER_2: // 2 Heal, 1 Move - Total Cost: 550\r\n                body = { heal: 2, move: 1 };\r\n                break;\r\n\r\n            case TIER_3: // 2 Heal, 2 Move - Total Cost: 600\r\n                body = { heal: 2, move: 2 };\r\n                break;\r\n\r\n            case TIER_4: // 4 Heal, 4 Move - Total Cost: 1200\r\n                body = { heal: 4, move: 4 };\r\n                break;\r\n\r\n            case TIER_5: // 6 Heal, 6 Move - Total Cost: 1800\r\n                body = { heal: 6, move: 6 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6: // 8 Heal, 6 Move - Total Cost: 2300\r\n                body = { heal: 8, move: 6 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for medic creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateMedicOptions(\r\n        roomState: RoomStateConstant,\r\n        squadSizeParam: number,\r\n        squadUUIDParam: number | null,\r\n        rallyLocationParam: RoomPosition | null\r\n    ): CreepOptionsMili | undefined {\r\n        let creepOptions: CreepOptionsMili = this.getDefaultCreepOptionsMili();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    squadSize: squadSizeParam,\r\n                    squadUUID: squadUUIDParam,\r\n                    rallyLocation: rallyLocationParam,\r\n                    rallyDone: false,\r\n                    healer: true,\r\n                    flee: true\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * Generate body for stalker creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateStalkerBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Stalker\r\n        let body: CreepBodyDescriptor = { ranged_attack: 1, move: 1 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_1: // 1 Ranged Attack, 2 Move - Total Cost: 200\r\n                body = { ranged_attack: 1, move: 1 };\r\n                break;\r\n\r\n            case TIER_2: // 3 Ranged Attack, 2 Move - Total Cost: 550\r\n                body = { ranged_attack: 3, move: 2 };\r\n                break;\r\n\r\n            case TIER_3: // 4 Ranged Attack, 4 Move - Total Cost: 800\r\n                body = { ranged_attack: 4, move: 4 };\r\n                break;\r\n\r\n            case TIER_4: // 6 Ranged Attack, 6 Move - Total Cost: 1200\r\n                body = { ranged_attack: 6, move: 6 };\r\n                break;\r\n\r\n            case TIER_5: // 8 Ranged Attack, 8 Move - Total Cost: 1600\r\n                body = { ranged_attack: 8, move: 8 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6 || TIER_7 || TIER_8: // 12 Ranged Attack, 10 Move - Total Cost: 2300\r\n                body = { ranged_attack: 12, move: 10 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * Generate options for stalker creep\r\n     * @param roomState the room state of the room\r\n     * @param squadSizeParam the size of the squad associated with the zealot\r\n     * @param squadUUIDParam the squad id that the zealot is a member of\r\n     * @param rallyLocationParam the meeting place for the squad\r\n     */\r\n    public static generateStalkerOptions(\r\n        roomState: RoomStateConstant,\r\n        squadSizeParam: number,\r\n        squadUUIDParam: number | null,\r\n        rallyLocationParam: RoomPosition | null\r\n    ): CreepOptionsMili | undefined {\r\n        let creepOptions: CreepOptionsMili = this.getDefaultCreepOptionsMili();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO ||\r\n                ROOM_STATE_BEGINNER ||\r\n                ROOM_STATE_INTER ||\r\n                ROOM_STATE_ADVANCED ||\r\n                ROOM_STATE_STIMULATE ||\r\n                ROOM_STATE_UPGRADER ||\r\n                ROOM_STATE_SEIGE ||\r\n                ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    squadSize: squadSizeParam,\r\n                    squadUUID: squadUUIDParam,\r\n                    rallyLocation: rallyLocationParam,\r\n                    rallyDone: false,\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n\r\n    /**\r\n     * generate body for domestic defender creep\r\n     * @param tier the tier of the room\r\n     */\r\n    public static generateDomesticDefenderBody(tier: TierConstant): BodyPartConstant[] {\r\n        // Default Values for Stalker\r\n        let body: CreepBodyDescriptor = { attack: 2, move: 2 };\r\n        const opts: CreepBodyOptions = { mixType: GROUPED };\r\n\r\n        switch (tier) {\r\n            case TIER_1: // 2 Attack, 2 Move - Total Cost: 260\r\n                body = { attack: 2, move: 2 };\r\n                break;\r\n\r\n            case TIER_2: // 3 Attack, 2 Move - Total Cost: 340\r\n                body = { attack: 3, move: 2 };\r\n                break;\r\n\r\n            case TIER_3: // 5 Attack, 5 Move - Total Cost: 650\r\n                body = { attack: 5, move: 5 };\r\n                break;\r\n\r\n            case TIER_4: // 8 Attack, 8 Move - Total Cost: 880\r\n                body = { attack: 8, move: 8 };\r\n                break;\r\n\r\n            case TIER_5: // 10 Attack, 10 Move - Total Cost: 1300\r\n                body = { attack: 10, move: 10 };\r\n                break;\r\n\r\n            case TIER_8:\r\n            case TIER_7:\r\n            case TIER_6: // 15 Attack, 15 Move - Total Cost: 1950\r\n                body = { attack: 15, move: 15 };\r\n                break;\r\n        }\r\n\r\n        // Generate creep body based on body array and options\r\n        return SpawnApi.getCreepBody(body, opts);\r\n    }\r\n\r\n    /**\r\n     * generate options for domestic defender creep\r\n     * @param roomState the room state for the room spawning it\r\n     */\r\n    public static generateDomesticDefenderOptions(roomState: RoomStateConstant): CreepOptionsMili | undefined {\r\n        let creepOptions: CreepOptionsMili = this.getDefaultCreepOptionsMili();\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n            case ROOM_STATE_BEGINNER:\r\n            case ROOM_STATE_INTER:\r\n            case ROOM_STATE_ADVANCED:\r\n            case ROOM_STATE_STIMULATE:\r\n            case ROOM_STATE_UPGRADER:\r\n            case ROOM_STATE_SEIGE:\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                creepOptions = {\r\n                    squadSize: 0,\r\n                    squadUUID: null,\r\n                    rallyLocation: null,\r\n                    defender: true,\r\n                };\r\n\r\n                break;\r\n        }\r\n\r\n        return creepOptions;\r\n    }\r\n    // --------------\r\n\r\n    /**\r\n     * returns a set of creep options with all default values\r\n     */\r\n    public static getDefaultCreepOptionsCiv(): CreepOptionsCiv {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * returns set of mili creep options with all default values\r\n     */\r\n    public static getDefaultCreepOptionsMili(): CreepOptionsMili {\r\n        return {\r\n            squadSize: 0,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * generates a creep memory to give to a creep being spawned\r\n     */\r\n    public static generateDefaultCreepMemory(\r\n        roleConst: RoleConstant,\r\n        homeRoomNameParam: string,\r\n        targetRoomParam: string,\r\n        creepOptions: CreepOptionsCiv | CreepOptionsMili\r\n    ): CreepMemory {\r\n        return {\r\n            role: roleConst,\r\n            homeRoom: homeRoomNameParam,\r\n            targetRoom: targetRoomParam,\r\n            job: undefined,\r\n            options: creepOptions,\r\n            working: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * get number of active squad members for a given squad\r\n     * @param flagMemory the attack flag memory\r\n     * @param room the room they are coming from\r\n     */\r\n    public static getNumOfActiveSquadMembers(flagMemory: AttackFlagMemory, room: Room): number {\r\n        // Please improve this if possible lol. Had to get around type guards as we don't actually know what a creeps memory has in it unless we explicitly know the type i think\r\n        // We're going to run into this everytime we use creep memory so we need to find a nicer way around it if possible but if not casting it as a memory type\r\n        // Isn't the worst solution in the world\r\n        const militaryCreeps: Array<Creep | null> = MemoryApi.getMyCreeps(room.name, creep =>\r\n            this.isMilitaryRole(creep.memory.role)\r\n        );\r\n        return _.filter(militaryCreeps, creep => {\r\n            const creepOptions = creep!.memory.options as CreepOptionsMili;\r\n            return creepOptions.squadUUID === flagMemory.squadUUID;\r\n        }).length;\r\n    }\r\n\r\n    /**\r\n     * get if the creep is a military type creep or not\r\n     * @param roleConst the role of the creep\r\n     */\r\n    public static isMilitaryRole(roleConst: RoleConstant): boolean {\r\n        return (\r\n            roleConst === ROLE_DOMESTIC_DEFENDER ||\r\n            roleConst === ROLE_STALKER ||\r\n            roleConst === ROLE_ZEALOT ||\r\n            roleConst === ROLE_MEDIC\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns the number of miners that are not spawning, and have > 50 ticksToLive\r\n     * @param room the room we are checking in\r\n     */\r\n    public static getActiveMiners(room: Room): number {\r\n        let miners = MemoryHelper.getCreepOfRole(room, ROLE_MINER);\r\n        miners = _.filter(miners, (creep: Creep) => {\r\n            // False if miner is spawning or has less than 50 ticks to live\r\n            return !creep.spawning && creep.ticksToLive! > 50;\r\n        });\r\n        return miners.length;\r\n    }\r\n\r\n    /**\r\n     * gets the ClaimRoomMemory with lowest number creeps of the specified role with it as their target room\r\n     * Must also be less than the max amount of that role allowed for the room\r\n     * @param room the room spawning the creep\r\n     * @param roleConst the specified role we are checking for\r\n     */\r\n    public static getLowestNumRoleAssignedClaimRoom(room: Room, roleConst: RoleConstant): ClaimRoomMemory | undefined {\r\n        const allClaimRooms: Array<ClaimRoomMemory | undefined> = MemoryApi.getClaimRooms(room);\r\n        // Get all claim rooms in which the specified role does not yet have\r\n        const unfulfilledClaimRooms: Array<ClaimRoomMemory | undefined> = _.filter(\r\n            allClaimRooms,\r\n            claimRoom =>\r\n                this.getNumCreepAssignedAsTargetRoom(room, roleConst, claimRoom) <\r\n                this.getLimitPerClaimRoomForRole(roleConst)\r\n        );\r\n\r\n        let nextClaimRoom: ClaimRoomMemory | undefined;\r\n\r\n        // Find the unfulfilled with the lowest amount of creeps assigned to it\r\n        for (const claimRoom of unfulfilledClaimRooms) {\r\n            if (!nextClaimRoom) {\r\n                nextClaimRoom = claimRoom;\r\n                continue;\r\n            }\r\n\r\n            const lowestCreepsAssigned = this.getNumCreepAssignedAsTargetRoom(room, roleConst, nextClaimRoom);\r\n            const currentCreepsAssigned = this.getNumCreepAssignedAsTargetRoom(room, roleConst, claimRoom);\r\n\r\n            if (currentCreepsAssigned < lowestCreepsAssigned) {\r\n                nextClaimRoom = claimRoom;\r\n            }\r\n        }\r\n\r\n        return nextClaimRoom;\r\n    }\r\n\r\n    /**\r\n     * gets the RemoteRoomMemory with lowest number creeps of the specified role with it as their target room\r\n     * @param room the room spawning the creep\r\n     * @param roleConst the specified role we are checking for\r\n     */\r\n    public static getLowestNumRoleAssignedRemoteRoom(\r\n        room: Room,\r\n        roleConst: RoleConstant\r\n    ): RemoteRoomMemory | undefined {\r\n        const allRemoteRooms: Array<RemoteRoomMemory | undefined> = MemoryApi.getRemoteRooms(room);\r\n        // Get all claim rooms in which the specified role does not yet have\r\n        const unfulfilledRemoteRooms: Array<RemoteRoomMemory | undefined> = _.filter(\r\n            allRemoteRooms,\r\n            remoteRoom =>\r\n                this.getNumCreepAssignedAsTargetRoom(room, roleConst, remoteRoom) <\r\n                this.getLimitPerRemoteRoomForRolePerSource(roleConst, remoteRoom!.sources.data)\r\n        );\r\n\r\n        let nextRemoteRoom: RemoteRoomMemory | undefined;\r\n\r\n        // Find the unfulfilled with the lowest amount of creeps assigned to it\r\n        for (const remoteRoom of unfulfilledRemoteRooms) {\r\n            if (!nextRemoteRoom) {\r\n                nextRemoteRoom = remoteRoom;\r\n                continue;\r\n            }\r\n\r\n            const lowestCreepsAssigned = this.getNumCreepAssignedAsTargetRoom(room, roleConst, nextRemoteRoom);\r\n            const currentCreepsAssigned = this.getNumCreepAssignedAsTargetRoom(room, roleConst, remoteRoom);\r\n\r\n            if (currentCreepsAssigned < lowestCreepsAssigned) {\r\n                nextRemoteRoom = remoteRoom;\r\n            }\r\n        }\r\n\r\n        return nextRemoteRoom;\r\n    }\r\n\r\n    /**\r\n     * gets the AttackRoomMemory with active flags\r\n     * only one attack flag will be active at a time during any given tick\r\n     * if this is not true because of some error/oversight, it is self correcting since\r\n     * this will still only choose the first active flag it finds\r\n     * @param room the room spawning the creep\r\n     */\r\n    public static getAttackRoomWithActiveFlag(room: Room): AttackRoomMemory | undefined {\r\n        const allAttackRooms: Array<AttackRoomMemory | undefined> = MemoryApi.getAttackRooms(room);\r\n\r\n        // Return the first active flag we find (should only be 1 flag active at a time across all attack rooms)\r\n        return _.find(allAttackRooms, attackRoom => _.some(attackRoom!.flags, (flag: AttackFlagMemory) => flag.active));\r\n    }\r\n\r\n    /**\r\n     * get number of creeps of role with target room assigned to a specified room\r\n     * @param room the room spawning the creep\r\n     * @param roleConst the role of the creep\r\n     * @param roomMemory the room memory we are checking\r\n     */\r\n    public static getNumCreepAssignedAsTargetRoom(\r\n        room: Room,\r\n        roleConst: RoleConstant,\r\n        roomMemory: ClaimRoomMemory | AttackRoomMemory | RemoteRoomMemory | undefined\r\n    ): number {\r\n        const allCreepsOfRole: Array<Creep | null> = MemoryApi.getMyCreeps(\r\n            room.name,\r\n            creep => creep.memory.role === roleConst\r\n        );\r\n        let sum = 0;\r\n\r\n        for (const creep of allCreepsOfRole) {\r\n            if (creep!.memory.targetRoom === roomMemory!.roomName) {\r\n                ++sum;\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * gets the number of each claim room creep that is meant to be assigned to a room\r\n     * @param roleConst the role we are checking the limit for\r\n     */\r\n    public static getLimitPerClaimRoomForRole(roleConst: RoleConstant): number {\r\n        let creepNum: number = 0;\r\n\r\n        switch (roleConst) {\r\n            case ROLE_CLAIMER || ROLE_COLONIZER:\r\n                creepNum = 1;\r\n                break;\r\n        }\r\n\r\n        return creepNum;\r\n    }\r\n\r\n    /**\r\n     * gets the number of each remote room creep that is meant to be assigned to a room\r\n     * @param roleConst the role we are checking the limit for\r\n     * @param numSources the number of sources in the remote room\r\n     */\r\n    public static getLimitPerRemoteRoomForRolePerSource(roleConst: RoleConstant, numSources: number): number {\r\n        let creepNum: number = 0;\r\n\r\n        switch (roleConst) {\r\n            case ROLE_REMOTE_HARVESTER || ROLE_REMOTE_MINER:\r\n                creepNum = 1 * numSources;\r\n                break;\r\n\r\n            case ROLE_REMOTE_RESERVER:\r\n                creepNum = 1;\r\n        }\r\n\r\n        return creepNum;\r\n    }\r\n\r\n    /**\r\n     * gets the number of lorries for the room based on room state\r\n     * @param room the room we are doing limits for\r\n     * @param roomState the room state of the room we are checking limit for\r\n     */\r\n    public static getLorryLimitForRoom(room: Room, roomState: RoomStateConstant) {\r\n        // ! Some ideas for finding lorry limits for a room\r\n        // ! Turned in to insane ramblings though\r\n        /*\r\n            Potentially, we could check that the room state is within a certain value range\r\n            like advanced, stimulate, seige, maybe? (same values its changed on anyway, so just extra saftey)\r\n            And we could like check if any empire jobs exist... still not sure the route we're going to take\r\n            to make sure terminals and labs get filled exactly, but we do know that those will create room jobs\r\n            for creeps to follow, we could also have it fill another memory structure and we check that and\r\n            decide how many lorries we need to do this set of jobs, it also has the benifit of slowly going down\r\n            as the job is more and more complete ie if we spawn 1 lorry per 25k energy we want to move to a terminal,\r\n            then as the amount of energy needing to be moved remaining goes down, naturally the number of lorries needed\r\n            will as well.\r\n\r\n            I'm having a flash of an idea about empire job queues. Each room can check empire job queues and decide if they\r\n            need to create any jobs in the room, and this function for example will check how many lorries need to exist in the room\r\n            etc, etc, etc. We can see what way we wanna go there, we still are a little bit off from that since we need to finish\r\n            the more pertinant parts of job queues and set up the flag system and make sure the room structures run themselves (thats\r\n                when we actually start running into it, since terminals will presumably check this emprie job queue and decide if it needs\r\n                to sell energy, move to another room)\r\n\r\n            It would also be interesting to set up a system to supply each other with energy as needed. Like if you're being seiged and in real trouble\r\n            and you're running dry (lets say they've knocked out a couple of your other rooms too) i could send energy and help keep your\r\n            last room alive... possibly military support to would be really cool (that would be as simple as detecting and auto placing a flag\r\n                in your room and the system will handle itself)\r\n\r\n            Even more off-topic, but we make sure creep.attack() and tower.attack() is never called on an ally creep (maybe even override the functions)\r\n            (to ensure extra saftey in the case of abug)\r\n        */\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * get the number of accesssible tiles for the sources in a room\r\n     * @param room the room we are checking for\r\n     */\r\n    public static getNumAccessTilesToSources(room: Room): number {\r\n        const sources: Source[] = MemoryApi.getSources(room.name);\r\n        let accesssibleTiles: number = 0;\r\n        const roomTerrian: RoomTerrain = new Room.Terrain(room.name)\r\n        _.forEach(sources, (source: Source) => {\r\n            for (let y = source.pos.y - 1; y <= source.pos.y + 1; y++) {\r\n                for (let x = source.pos.x - 1; x <= source.pos.x + 1; x++) {\r\n                    if (source.pos.x === x && source.pos.y === y) {\r\n                        continue;\r\n                    }\r\n                    if (roomTerrian.get(x, y) !== TERRAIN_MASK_WALL) {\r\n                        accesssibleTiles++;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return accesssibleTiles;\r\n    }\r\n}\r\n","import MemoryHelper from \"Helpers/MemoryHelper\";\r\nimport MemoryHelper_Room from \"Helpers/MemoryHelper_Room\";\r\nimport RoomHelper from \"Helpers/RoomHelper\";\r\nimport { SpawnHelper } from \"Helpers/SpawnHelper\";\r\nimport { NO_CACHING_MEMORY } from \"utils/config\";\r\nimport {\r\n    BACKUP_JOB_CACHE_TTL,\r\n    CONSTR_CACHE_TTL,\r\n    CONTAINER_JOB_CACHE_TTL,\r\n    DROPS_CACHE_TTL,\r\n    FCREEP_CACHE_TTL,\r\n    HCREEP_CACHE_TTL,\r\n    LINK_JOB_CACHE_TTL,\r\n    ROLE_MINER,\r\n    ROOM_STATE_INTRO,\r\n    SOURCE_CACHE_TTL,\r\n    SOURCE_JOB_CACHE_TTL,\r\n    STRUCT_CACHE_TTL,\r\n    TOMBSTONE_CACHE_TTL,\r\n    CLAIM_JOB_CACHE_TTL,\r\n    RESERVE_JOB_CACHE_TTL,\r\n    SIGN_JOB_CACHE_TTL,\r\n    ATTACK_JOB_CACHE_TTL,\r\n    REPAIR_JOB_CACHE_TTL,\r\n    BUILD_JOB_CACHE_TTL,\r\n    UPGRADE_JOB_CACHE_TTL,\r\n    STORE_JOB_CACHE_TTL,\r\n    FILL_JOB_CACHE_TTL,\r\n    PICKUP_JOB_CACHE_TTL,\r\n    ALL_STRUCTURE_TYPES,\r\n    ERROR_ERROR,\r\n    ERROR_FATAL,\r\n    ERROR_INFO,\r\n    ERROR_WARN\r\n} from \"utils/Constants\";\r\nimport UserException from \"utils/UserException\";\r\nimport CarryPartJobs from \"Jobs/CarryPartJobs\";\r\nimport UtilHelper from \"Helpers/UtilHelper\";\r\n\r\n// the api for the memory class\r\nexport default class MemoryApi {\r\n    /**\r\n     * Remove all memory objects that are dead\r\n     */\r\n    public static garbageCollection(): void {\r\n        // Remove all dead creeps from memory\r\n        for (const name in Memory.creeps) {\r\n            if (!(name in Game.creeps)) {\r\n                delete Memory.creeps[name];\r\n            }\r\n        }\r\n\r\n        // Remove all dead rooms from memory\r\n        for (const roomName in Memory.rooms) {\r\n            if (\r\n                !(roomName in Game.rooms) &&\r\n                !MemoryHelper.dependentRoomExists(roomName) &&\r\n                !_.some(Game.creeps, (creep: Creep) => creep.memory.targetRoom === roomName)\r\n            ) {\r\n                delete Memory.rooms[roomName];\r\n            }\r\n        }\r\n\r\n        // Remove all dead flags from memory\r\n        for (const flag in Memory.flags) {\r\n            if (!_.some(Game.flags, (flagLoop: Flag) => flagLoop.name === Memory.flags[flag].flagName)) {\r\n                delete Memory.flags[flag];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update the room state for the room\r\n     * @param room the room we are updating the room state for\r\n     * @param roomState the new room state we are saving\r\n     */\r\n    public static updateRoomState(roomState: RoomStateConstant, room: Room): void {\r\n        room.memory.roomState = roomState;\r\n    }\r\n\r\n    /**\r\n     * get the upgrader link for the room\r\n     * @param room the room memory we are getting the upgrader link from\r\n     */\r\n    public static getUpgraderLink(room: Room): StructureLink | null {\r\n        return Game.getObjectById(room.memory.upgradeLink);\r\n    }\r\n\r\n    /**\r\n     * update the upgrader link for the room\r\n     * @param room the room we are updating it for\r\n     * @param id the id of the link\r\n     */\r\n    public static updateUpgraderLink(room: Room, id: string): void {\r\n        room.memory.upgradeLink = id;\r\n    }\r\n\r\n    /**\r\n     * Go through the room's depedent room memory and remove null values\r\n     * @param room the room we are cleaning the memory structure for\r\n     */\r\n    public static cleanDependentRoomMemory(room: Room): void {\r\n        // Re-map Remote Room array to remove null values\r\n        const allRemoteRooms: RemoteRoomMemory[] = Memory.rooms[room.name].remoteRooms!;\r\n        const nonNullRemoteRooms: RemoteRoomMemory[] = [];\r\n\r\n        _.forEach(allRemoteRooms, (rr: RemoteRoomMemory) => {\r\n            if (rr !== null) {\r\n                nonNullRemoteRooms.push(rr);\r\n            }\r\n        });\r\n        Memory.rooms[room.name].remoteRooms = nonNullRemoteRooms;\r\n\r\n        // Re-map Remote Room array to remove null values\r\n        const allClaimRooms: ClaimRoomMemory[] = Memory.rooms[room.name].claimRooms!;\r\n        const nonNullClaimRooms: ClaimRoomMemory[] = [];\r\n\r\n        _.forEach(allClaimRooms, (rr: ClaimRoomMemory) => {\r\n            if (rr !== null) {\r\n                nonNullClaimRooms.push(rr);\r\n            }\r\n        });\r\n        Memory.rooms[room.name].claimRooms = nonNullClaimRooms;\r\n\r\n        // Re-map Remote Room array to remove null values\r\n        const allAttackRooms: AttackRoomMemory[] = Memory.rooms[room.name].attackRooms!;\r\n        const nonNullAttackRooms: AttackRoomMemory[] = [];\r\n\r\n        _.forEach(allAttackRooms, (rr: AttackRoomMemory) => {\r\n            if (rr !== null) {\r\n                nonNullAttackRooms.push(rr);\r\n            }\r\n        });\r\n        Memory.rooms[room.name].attackRooms = nonNullAttackRooms;\r\n    }\r\n\r\n    /**\r\n     * Initialize the Memory object for a new room, and perform all one-time updates\r\n     * @param room The room to initialize the memory of.\r\n     */\r\n    public static initRoomMemory(roomName: string, isOwnedRoom: boolean): void {\r\n\r\n        // You might think of a better way/place to do this, but if we delete a memory structure as a \"reset\",\r\n        // We want it to be reformed\r\n        // Make sure jobs exist\r\n        if (Memory.rooms[roomName] && !Memory.rooms[roomName].jobs && isOwnedRoom) {\r\n            Memory.rooms[roomName].jobs = {};\r\n        }\r\n\r\n        // Abort if Memory already exists\r\n        if (Memory.rooms[roomName]) {\r\n            return;\r\n        }\r\n\r\n        // Initialize Memory - Typescript requires it be done this way\r\n        //                    unless we define a constructor for RoomMemory.\r\n        if (isOwnedRoom) {\r\n            Memory.rooms[roomName] = {\r\n                attackRooms: [],\r\n                claimRooms: [],\r\n                constructionSites: { data: null, cache: null },\r\n                creepLimit: {},\r\n                creeps: { data: null, cache: null },\r\n                defcon: -1,\r\n                hostiles: { data: null, cache: null },\r\n                remoteRooms: [],\r\n                roomState: ROOM_STATE_INTRO,\r\n                sources: { data: null, cache: null },\r\n                minerals: { data: null, cache: null },\r\n                tombstones: { data: null, cache: null },\r\n                droppedResources: { data: null, cache: null },\r\n                jobs: {},\r\n                structures: { data: null, cache: null },\r\n                upgradeLink: \"\"\r\n            };\r\n        }\r\n        else {\r\n            Memory.rooms[roomName] = {\r\n                structures: { data: null, cache: null },\r\n                sources: { data: null, cache: null },\r\n                minerals: { data: null, cache: null },\r\n                tombstones: { data: null, cache: null },\r\n                droppedResources: { data: null, cache: null },\r\n                constructionSites: { data: null, cache: null },\r\n                defcon: -1,\r\n                hostiles: { data: null, cache: null },\r\n            }\r\n        }\r\n\r\n\r\n        // Only populate out the memory structure if we have vision of the room\r\n        // Extra saftey provided at each helper function, but make sure only visible rooms are being sent anyway\r\n        if (Game.rooms[roomName]) {\r\n            this.getRoomMemory(Game.rooms[roomName], true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates Room Memory and calls update function as needed\r\n     * for the entire room memory.\r\n     *\r\n     * [Cached] Memory.rooms[room.name]\r\n     * @param room The name of the room to get memory for\r\n     * @param forceUpdate [Optional] Force all room memory to update\r\n     */\r\n    public static getRoomMemory(room: Room, forceUpdate?: boolean): void {\r\n        this.getConstructionSites(room.name, undefined, forceUpdate);\r\n        this.getMyCreeps(room.name, undefined, forceUpdate);\r\n        this.getHostileCreeps(room.name, undefined, forceUpdate);\r\n        this.getSources(room.name, undefined, forceUpdate);\r\n        this.getStructures(room.name, undefined, forceUpdate);\r\n        this.getAllGetEnergyJobs(room, undefined, forceUpdate);\r\n        this.getAllClaimPartJobs(room, undefined, forceUpdate);\r\n        this.getAllWorkPartJobs(room, undefined, forceUpdate);\r\n        // this.getCreepLimits(room, undefined, forceUpdate);\r\n        // this.getDefcon(room, undefined, forceUpdate);\r\n        // this.getRoomState(room, undefined, forceUpdate);\r\n    }\r\n\r\n    /**\r\n     * Initializes the memory of a newly spawned creep\r\n     * @param creep the creep we want to initialize memory for\r\n     */\r\n    public static initCreepMemory(\r\n        creep: Creep,\r\n        creepRole: RoleConstant,\r\n        creepHomeRoom: string,\r\n        creepOptions: CreepOptionsCiv | CreepOptionsMili,\r\n        creepTargetRoom?: string\r\n    ): void {\r\n        // abort if memory already exists\r\n        if (Memory.creeps[creep.name]) {\r\n            return;\r\n        }\r\n\r\n        // Initialize Memory\r\n        Memory.creeps[creep.name] = {\r\n            homeRoom: creepHomeRoom,\r\n            options: creepOptions,\r\n            role: creepRole,\r\n            targetRoom: creepTargetRoom || \"\",\r\n            job: undefined,\r\n            working: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the owned creeps in a room, updating memory if necessary.\r\n     *\r\n     * [Cached] Memory.rooms[room.name].creeps\r\n     * @param room The room to retrieve from\r\n     * @param filterFunction [Optional] The function to filter all creep objects\r\n     * @param forceUpdate [Optional] Invalidate Cache by force\r\n     * @returns Creep[ ] -- An array of owned creeps, empty if there are none\r\n     */\r\n    public static getMyCreeps(\r\n        roomName: string,\r\n        filterFunction?: (object: Creep) => boolean,\r\n        forceUpdate?: boolean\r\n    ): Creep[] {\r\n        // If we have no vision of the room, return an empty array\r\n        if (!Memory.rooms[roomName]) {\r\n            return [];\r\n        }\r\n\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[roomName].creeps ||\r\n            Memory.rooms[roomName].creeps!.cache < Game.time - FCREEP_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateMyCreeps(roomName);\r\n        }\r\n\r\n        const creepIDs: string[] = Memory.rooms[roomName].creeps!.data;\r\n\r\n        let creeps: Creep[] = MemoryHelper.getOnlyObjectsFromIDs<Creep>(creepIDs);\r\n\r\n        if (filterFunction !== undefined) {\r\n            creeps = _.filter(creeps, filterFunction);\r\n        }\r\n\r\n        return creeps;\r\n    }\r\n\r\n    /**\r\n     * Get all hostile creeps in a room, updating if necessary\r\n     *\r\n     * [Cached] Memory.rooms[room.name].hostiles\r\n     * @param room The room to retrieve from\r\n     * @param filterFunction [Optional] The function to filter all creep objects\r\n     * @param forceUpdate [Optional] Invalidate Cache by force\r\n     * @returns Creep[ ]  -- An array of hostile creeps, empty if none\r\n     */\r\n    public static getHostileCreeps(\r\n        roomName: string,\r\n        filterFunction?: (object: Creep) => boolean,\r\n        forceUpdate?: boolean\r\n    ): Creep[] {\r\n        // If we have no vision of the room, return an empty array\r\n        if (!Memory.rooms[roomName]) {\r\n            return [];\r\n        }\r\n\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[roomName].hostiles ||\r\n            Memory.rooms[roomName].creeps!.cache < Game.time - HCREEP_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateHostileCreeps(roomName);\r\n        }\r\n\r\n        const creepIDs: string[] = Memory.rooms[roomName].hostiles.data;\r\n\r\n        let creeps: Creep[] = MemoryHelper.getOnlyObjectsFromIDs<Creep>(creepIDs);\r\n\r\n        if (filterFunction !== undefined) {\r\n            creeps = _.filter(creeps, filterFunction);\r\n        }\r\n\r\n        return creeps;\r\n    }\r\n\r\n    /**\r\n     * Get structures in a room, updating if necessary\r\n     *\r\n     * [Cached] Memory.rooms[room.name].structures\r\n     * @param room The room to retrieve from\r\n     * @param filterFunction [Optional] The function to filter all structure objects\r\n     * @param forceUpdate [Optional] Invalidate Cache by force\r\n     * @returns Array<Structure> -- An array of structures\r\n     */\r\n    public static getStructures(\r\n        roomName: string,\r\n        filterFunction?: (object: Structure) => boolean,\r\n        forceUpdate?: boolean\r\n    ): Structure[] {\r\n        // If we have no vision of the room, return an empty array\r\n        if (!Memory.rooms[roomName]) {\r\n            return [];\r\n        }\r\n\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            Memory.rooms[roomName].structures === undefined ||\r\n            Memory.rooms[roomName].structures.cache < Game.time - STRUCT_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateStructures(roomName);\r\n        }\r\n\r\n        const structureIDs: string[] = [];\r\n        // Flatten the object into an array of IDs\r\n        for (const type in Memory.rooms[roomName].structures.data) {\r\n            const IDs = Memory.rooms[roomName].structures.data[type];\r\n            for (const singleID of IDs) {\r\n                if (singleID) {\r\n                    structureIDs.push(singleID);\r\n                }\r\n            }\r\n        }\r\n\r\n        let structures: Structure[] = MemoryHelper.getOnlyObjectsFromIDs<Structure<StructureConstant>>(structureIDs);\r\n\r\n        if (filterFunction !== undefined) {\r\n            structures = _.filter(structures, filterFunction);\r\n        }\r\n\r\n        return structures;\r\n    }\r\n\r\n    /**\r\n     * Get structures of a single type in a room, updating if necessary\r\n     *\r\n     * [Cached] Memory.rooms[room.name].structures\r\n     * @param room The room to check in\r\n     * @param type The type of structure to retrieve\r\n     * @param filterFunction [Optional] A function to filter by\r\n     * @param forceUpdate [Optional] Force structures memory to be updated\r\n     * @returns Structure[] An array of structures of a single type\r\n     */\r\n    public static getStructureOfType(\r\n        roomName: string,\r\n        type: StructureConstant,\r\n        filterFunction?: (object: any) => boolean,\r\n        forceUpdate?: boolean\r\n    ): Structure[] {\r\n        // If we have no vision of the room, return an empty array\r\n        if (!Memory.rooms[roomName]) {\r\n            return [];\r\n        }\r\n\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            Memory.rooms[roomName].structures === undefined ||\r\n            Memory.rooms[roomName].structures.data[type] === undefined ||\r\n            Memory.rooms[roomName].structures.cache < Game.time - STRUCT_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateStructures(roomName);\r\n        }\r\n\r\n        const structureIDs: string[] = Memory.rooms[roomName].structures.data[type];\r\n\r\n        let structures: Structure[] = MemoryHelper.getOnlyObjectsFromIDs<Structure>(structureIDs);\r\n\r\n        if (filterFunction !== undefined) {\r\n            structures = _.filter(structures, filterFunction);\r\n        }\r\n\r\n        return structures;\r\n    }\r\n\r\n    /**\r\n     * Get all construction sites in a room, updating if necessary\r\n     *\r\n     * [Cached] Memory.rooms[room.name].constructionSites\r\n     * @param room The room to retrieve from\r\n     * @param filterFunction [Optional] The function to filter all structure objects\r\n     * @param forceUpdate [Optional] Invalidate Cache by force\r\n     * @returns Array<ConstructionSite> -- An array of ConstructionSites\r\n     */\r\n    public static getConstructionSites(\r\n        roomName: string,\r\n        filterFunction?: (object: ConstructionSite) => boolean,\r\n        forceUpdate?: boolean\r\n    ): ConstructionSite[] {\r\n\r\n        // If we have no vision of the room, return an empty array\r\n        if (!Memory.rooms[roomName]) {\r\n            return [];\r\n        }\r\n\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[roomName].constructionSites ||\r\n            Memory.rooms[roomName].constructionSites.cache < Game.time - CONSTR_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateConstructionSites(roomName);\r\n        }\r\n\r\n        const constructionSiteIDs: string[] = Memory.rooms[roomName].constructionSites.data;\r\n\r\n        let constructionSites: ConstructionSite[] = MemoryHelper.getOnlyObjectsFromIDs<ConstructionSite>(\r\n            constructionSiteIDs\r\n        );\r\n\r\n        if (filterFunction !== undefined) {\r\n            constructionSites = _.filter(constructionSites, filterFunction);\r\n        }\r\n\r\n        return constructionSites;\r\n    }\r\n\r\n    /**\r\n     * Returns a list of tombstones in the room, updating if necessary\r\n     *\r\n     * @param room The room we want to look in\r\n     * @param filterFunction [Optional] The function to filter the tombstones objects\r\n     * @param forceUpdate [Optional] Invalidate Cache by force\r\n     * @returns Tombstone[]  An array of tombstones, if there are any\r\n     */\r\n    public static getTombstones(\r\n        room: Room,\r\n        filterFunction?: (object: Tombstone) => boolean,\r\n        forceUpdate?: boolean\r\n    ): Tombstone[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].tombstones ||\r\n            Memory.rooms[room.name].tombstones.cache < Game.time - TOMBSTONE_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateTombstones(room);\r\n        }\r\n\r\n        const tombstoneIDs: string[] = Memory.rooms[room.name].tombstones.data;\r\n\r\n        let tombstones = MemoryHelper.getOnlyObjectsFromIDs<Tombstone>(tombstoneIDs);\r\n\r\n        if (filterFunction !== undefined) {\r\n            tombstones = _.filter(tombstones, filterFunction);\r\n        }\r\n\r\n        return tombstones;\r\n    }\r\n\r\n    /**\r\n     * Returns a list of the dropped resources in a room, updating if necessary\r\n     *\r\n     * @param room The room we want to look in\r\n     * @param filterFunction [Optional] The function to filter the resource objects\r\n     * @param forceUpdate [Optional] Invalidate Cache by force\r\n     * @returns Resource[]  An array of dropped resources, if there are any\r\n     */\r\n    public static getDroppedResources(\r\n        room: Room,\r\n        filterFunction?: (object: RESOURCE_ENERGY) => boolean,\r\n        forceUpdate?: boolean\r\n    ): Resource[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].droppedResources ||\r\n            Memory.rooms[room.name].droppedResources.cache < Game.time - DROPS_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateDroppedResources(room);\r\n        }\r\n\r\n        const resourceIDs: string[] = Memory.rooms[room.name].droppedResources.data;\r\n\r\n        let droppedResources: Resource[] = MemoryHelper.getOnlyObjectsFromIDs<Resource>(resourceIDs);\r\n\r\n        if (filterFunction !== undefined) {\r\n            droppedResources = _.filter(droppedResources, filterFunction);\r\n        }\r\n\r\n        return droppedResources;\r\n    }\r\n\r\n    /**\r\n     * get sources in the room\r\n     * @param room the room we want sources from\r\n     * @param filterFunction [Optional] The function to filter all source objects\r\n     * @param forceUpdate [Optional] Invalidate cache by force\r\n     * @returns Source[]  An array of sources, if there are any\r\n     */\r\n    public static getSources(\r\n        roomName: string,\r\n        filterFunction?: (object: Source) => boolean,\r\n        forceUpdate?: boolean\r\n    ): Source[] {\r\n        // If we have no vision of the room, return an empty array\r\n        if (!Memory.rooms[roomName]) {\r\n            return [];\r\n        }\r\n\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            Memory.rooms[roomName].sources === undefined ||\r\n            Memory.rooms[roomName].sources.cache < Game.time - SOURCE_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateSources(roomName);\r\n        }\r\n\r\n        const sourceIDs = Memory.rooms[roomName].sources.data;\r\n\r\n        let sources: Source[] = MemoryHelper.getOnlyObjectsFromIDs<Source>(sourceIDs);\r\n\r\n        if (filterFunction !== undefined) {\r\n            sources = _.filter(sources, filterFunction);\r\n        }\r\n\r\n        return sources;\r\n    }\r\n\r\n    /**\r\n     * get minerals in the room\r\n     * @param room the room we want minerals from\r\n     * @param filterFunction [Optional] The function to filter all mineral objects\r\n     * @param forceUpdate [Optional] Invalidate cache by force\r\n     * @returns Mineral[]  An array of minerals, if there are any\r\n     */\r\n    public static getMinerals(\r\n        room: Room,\r\n        filterFunction?: (object: Source) => boolean,\r\n        forceUpdate?: boolean\r\n    ): Mineral[] {\r\n        //\r\n\r\n        // TODO Fill this out\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Get the remoteRoom objects\r\n     *\r\n     * Updates all dependencies if the cache is invalid, for efficiency\r\n     * @param room The room to check dependencies of\r\n     * @param filterFunction [Optional] The function to filter the room objects\r\n     * @param targetRoom [Optional] the name of the room we want to grab if we already know it\r\n     */\r\n    public static getRemoteRooms(\r\n        room: Room,\r\n        filterFunction?: (object: Room) => boolean,\r\n        targetRoom?: string\r\n    ): Array<RemoteRoomMemory | undefined> {\r\n        let remoteRooms: Array<RemoteRoomMemory | undefined>;\r\n\r\n        // Kind of hacky, but if filter function isn't provided then its just true so that is won't effect evaulation on getting the attack rooms\r\n        if (!filterFunction) {\r\n            filterFunction = (badPractice: Room) => true;\r\n        }\r\n\r\n        // TargetRoom parameter provided\r\n        if (targetRoom) {\r\n            remoteRooms = _.filter(\r\n                Memory.rooms[room.name].remoteRooms!,\r\n                (roomMemory: RemoteRoomMemory) => roomMemory.roomName === targetRoom && filterFunction\r\n            );\r\n        } else {\r\n            // No target room provided, just return them all\r\n            remoteRooms = _.filter(\r\n                Memory.rooms[room.name].remoteRooms!,\r\n                (roomMemory: RemoteRoomMemory) => filterFunction\r\n            );\r\n        }\r\n\r\n        return remoteRooms;\r\n    }\r\n\r\n    /**\r\n     * Get the claimRoom objects\r\n     *\r\n     * Updates all dependencies if the cache is invalid\r\n     * @param room The room to check the dependencies of\r\n     * @param filterFunction [Optional] THe function to filter the room objects\r\n     * @param targetRoom the name of the room we want to grab if we already know it\r\n     */\r\n    public static getClaimRooms(\r\n        room: Room,\r\n        filterFunction?: (object: Room) => boolean,\r\n        targetRoom?: string\r\n    ): Array<ClaimRoomMemory | undefined> {\r\n        let claimRooms: Array<ClaimRoomMemory | undefined>;\r\n\r\n        // Kind of hacky, but if filter function isn't provided then its just true so that is won't effect evaulation on getting the attack rooms\r\n        if (!filterFunction) {\r\n            filterFunction = (badPractice: Room) => true;\r\n        }\r\n\r\n        // TargetRoom parameter provided\r\n        if (targetRoom) {\r\n            claimRooms = _.filter(\r\n                Memory.rooms[room.name].claimRooms!,\r\n                (roomMemory: ClaimRoomMemory) => roomMemory.roomName === targetRoom && filterFunction\r\n            );\r\n        } else {\r\n            // No target room provided, just return them all\r\n            claimRooms = _.filter(Memory.rooms[room.name].claimRooms!, (roomMemory: ClaimRoomMemory) => filterFunction);\r\n        }\r\n\r\n        return claimRooms;\r\n    }\r\n\r\n    /**\r\n     * Get the attack room objects\r\n     *\r\n     * Updates all dependencies if the cache is invalid, for efficiency\r\n     * @param room The room to check dependencies of\r\n     * @param filterFunction [Optional] The function to filter the room objects\r\n     * @param targetRoom [Optional] the name of the specific room we want to grab\r\n     */\r\n    public static getAttackRooms(\r\n        room: Room,\r\n        targetRoom?: string,\r\n        filterFunction?: (object: Room) => boolean\r\n    ): Array<AttackRoomMemory | undefined> {\r\n        let attackRooms: Array<AttackRoomMemory | undefined>;\r\n\r\n        // Kind of hacky, but if filter function isn't provided then its just true so that is won't effect evaulation on getting the attack rooms\r\n        if (!filterFunction) {\r\n            filterFunction = (badPractice: Room) => true;\r\n        }\r\n\r\n        // TargetRoom parameter provided\r\n        if (targetRoom) {\r\n            attackRooms = _.filter(\r\n                Memory.rooms[room.name].attackRooms!,\r\n                (roomMemory: AttackRoomMemory) => roomMemory.roomName === targetRoom && filterFunction\r\n            );\r\n        } else {\r\n            // No target room provided, just return them all\r\n            attackRooms = _.filter(\r\n                Memory.rooms[room.name].attackRooms!,\r\n                (roomMemory: AttackRoomMemory) => filterFunction\r\n            );\r\n        }\r\n\r\n        return attackRooms;\r\n    }\r\n\r\n    /**\r\n     * Adjust creep limits given the amount and creep limit you want adjusted\r\n     * @param room the room we are adjusting limits for\r\n     * @param limitType the classification of limit (mili, remote, domestic)\r\n     * @param roleConst the actual role we are adjusting\r\n     * @param delta the change we are applying to the limit\r\n     */\r\n    public static adjustCreepLimitsByDelta(room: Room, limitType: string, role: string, delta: number): void {\r\n        Memory.rooms[room.name].creepLimit![limitType][role] += delta;\r\n    }\r\n\r\n    /**\r\n     * get the defcon level for the room\r\n     * @param room the room we are checking defcon for\r\n     */\r\n    public static getDefconLevel(room: Room): number {\r\n        return Memory.rooms[room.name].defcon;\r\n    }\r\n\r\n    /**\r\n     * Get count of all creeps, or of one if creepConst is specified\r\n     * @param room the room we are getting the count for\r\n     * @param creepConst [Optional] Count only one role\r\n     */\r\n    public static getCreepCount(room: Room, creepConst?: RoleConstant): number {\r\n        const filterFunction = creepConst === undefined ? undefined : (c: Creep) => c.memory.role === creepConst;\r\n\r\n        // Use get active mienrs instead specifically for miners to get them out early before they die\r\n        if (creepConst === ROLE_MINER) {\r\n            return SpawnHelper.getActiveMiners(room);\r\n        } else {\r\n            // Otherwise just get the actual count of the creeps\r\n            return MemoryApi.getMyCreeps(room.name, filterFunction).length;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get creep limits\r\n     * @param room the room we want the limits for\r\n     */\r\n    public static getCreepLimits(room: Room): CreepLimits {\r\n        const creepLimits: CreepLimits = {\r\n            domesticLimits: Memory.rooms[room.name].creepLimit![\"domesticLimits\"],\r\n            remoteLimits: Memory.rooms[room.name].creepLimit![\"remoteLimits\"],\r\n            militaryLimits: Memory.rooms[room.name].creepLimit![\"militaryLimits\"]\r\n        };\r\n\r\n        return creepLimits;\r\n    }\r\n\r\n    /**\r\n     * get all owned rooms\r\n     * @param filterFunction [Optional] a filter function for the rooms\r\n     * @returns Room[] array of rooms\r\n     */\r\n    public static getOwnedRooms(filterFunction?: (room: Room) => boolean): Room[] {\r\n        if (filterFunction) {\r\n            return _.filter(Game.rooms, currentRoom => RoomHelper.isOwnedRoom(currentRoom) && filterFunction);\r\n        }\r\n        return _.filter(Game.rooms, currentRoom => RoomHelper.isOwnedRoom(currentRoom));\r\n    }\r\n\r\n    /**\r\n     * get all flags as an array\r\n     * @param filterFunction [Optional] a function to filter the flags out\r\n     * @returns Flag[] an array of all flags\r\n     */\r\n    public static getAllFlags(filterFunction?: (flag: Flag) => boolean): Flag[] {\r\n        const allFlags: Flag[] = Object.keys(Game.flags).map(function (flagIndex) {\r\n            return Game.flags[flagIndex];\r\n        });\r\n\r\n        // Apply filter function if it exists, otherwise just return all flags\r\n        if (filterFunction) {\r\n            return _.filter(allFlags, filterFunction);\r\n        }\r\n        return allFlags;\r\n    }\r\n\r\n    /**\r\n     * Get all jobs (in a flatted list) of GetEnergyJobs.xxx\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the GetEnergyJob list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the caches\r\n     */\r\n    public static getAllGetEnergyJobs(\r\n        room: Room,\r\n        filterFunction?: (object: GetEnergyJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): GetEnergyJob[] {\r\n        const allGetEnergyJobs: GetEnergyJob[] = [];\r\n\r\n        _.forEach(this.getSourceJobs(room, filterFunction, forceUpdate), job => allGetEnergyJobs.push(job));\r\n        _.forEach(this.getContainerJobs(room, filterFunction, forceUpdate), job => allGetEnergyJobs.push(job));\r\n        _.forEach(this.getLinkJobs(room, filterFunction, forceUpdate), job => allGetEnergyJobs.push(job));\r\n        _.forEach(this.getBackupStructuresJobs(room, filterFunction, forceUpdate), job => allGetEnergyJobs.push(job));\r\n\r\n        return allGetEnergyJobs;\r\n    }\r\n    /**\r\n     * Get the list of GetEnergyJobs.sourceJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the getEnergyjob list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getSourceJobs(\r\n        room: Room,\r\n        filterFunction?: (object: GetEnergyJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): GetEnergyJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs!.sourceJobs ||\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs!.sourceJobs!.cache < Game.time - SOURCE_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateGetEnergy_sourceJobs(room);\r\n        }\r\n\r\n        let sourceJobs: GetEnergyJob[] = Memory.rooms[room.name].jobs!.getEnergyJobs!.sourceJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            sourceJobs = _.filter(sourceJobs, filterFunction);\r\n        }\r\n\r\n        return sourceJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of GetEnergyJobs.containerJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the getEnergyjob list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getContainerJobs(\r\n        room: Room,\r\n        filterFunction?: (object: GetEnergyJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): GetEnergyJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs!.containerJobs ||\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs!.containerJobs!.cache < Game.time - CONTAINER_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateGetEnergy_containerJobs(room);\r\n        }\r\n\r\n        let containerJobs: GetEnergyJob[] = Memory.rooms[room.name].jobs!.getEnergyJobs!.containerJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            containerJobs = _.filter(containerJobs, filterFunction);\r\n        }\r\n\r\n        return containerJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of GetEnergyJobs.linkJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the getEnergyjob list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getLinkJobs(\r\n        room: Room,\r\n        filterFunction?: (object: GetEnergyJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): GetEnergyJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs!.linkJobs ||\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs!.linkJobs!.cache < Game.time - LINK_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateGetEnergy_linkJobs(room);\r\n        }\r\n\r\n        let linkJobs: GetEnergyJob[] = Memory.rooms[room.name].jobs!.getEnergyJobs!.sourceJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            linkJobs = _.filter(linkJobs, filterFunction);\r\n        }\r\n\r\n        return linkJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of GetEnergyJobs.sourceJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the getEnergyjob list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getBackupStructuresJobs(\r\n        room: Room,\r\n        filterFunction?: (object: GetEnergyJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): GetEnergyJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs!.backupStructures ||\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs!.backupStructures!.cache < Game.time - BACKUP_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateGetEnergy_backupStructuresJobs(room);\r\n        }\r\n\r\n        let backupStructureJobs: GetEnergyJob[] = Memory.rooms[room.name].jobs!.getEnergyJobs!.backupStructures!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            backupStructureJobs = _.filter(backupStructureJobs, filterFunction);\r\n        }\r\n\r\n        return backupStructureJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of GetEnergyJobs.pickupJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the getEnergyjob list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getPickupJobs(\r\n        room: Room,\r\n        filterFunction?: (object: GetEnergyJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): GetEnergyJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs ||\r\n            !Memory.rooms[room.name].jobs!.getEnergyJobs!.pickupJobs ||\r\n            Memory.rooms[room.name].jobs!.getEnergyJobs!.pickupJobs!.cache < Game.time - PICKUP_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateGetEnergy_pickupJobs(room);\r\n        }\r\n\r\n        let pickupJobs: GetEnergyJob[] = Memory.rooms[room.name].jobs!.getEnergyJobs!.pickupJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            pickupJobs = _.filter(pickupJobs, filterFunction);\r\n        }\r\n\r\n        return pickupJobs;\r\n    }\r\n\r\n    /**\r\n     * Get all jobs (in a flatted list) of ClaimPartJobs.xxx\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the ClaimPartJob list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the caches\r\n     */\r\n    public static getAllClaimPartJobs(\r\n        room: Room,\r\n        filterFunction?: (object: ClaimPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): ClaimPartJob[] {\r\n        const allClaimPartJobs: ClaimPartJob[] = [];\r\n\r\n        _.forEach(this.getClaimJobs(room, filterFunction, forceUpdate), job => allClaimPartJobs.push(job));\r\n        _.forEach(this.getReserveJobs(room, filterFunction, forceUpdate), job => allClaimPartJobs.push(job));\r\n        _.forEach(this.getSignJobs(room, filterFunction, forceUpdate), job => allClaimPartJobs.push(job));\r\n        _.forEach(this.getControllerAttackJobs(room, filterFunction, forceUpdate), job => allClaimPartJobs.push(job));\r\n\r\n        return allClaimPartJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of ClaimPartJobs.claimJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the ClaimPartJobs list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getClaimJobs(\r\n        room: Room,\r\n        filterFunction?: (object: ClaimPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): ClaimPartJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.claimPartJobs ||\r\n            !Memory.rooms[room.name].jobs!.claimPartJobs!.claimJobs ||\r\n            Memory.rooms[room.name].jobs!.claimPartJobs!.claimJobs!.cache < Game.time - CLAIM_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateClaimPart_claimJobs(room);\r\n        }\r\n\r\n        let claimJobs: ClaimPartJob[] = Memory.rooms[room.name].jobs!.claimPartJobs!.claimJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            claimJobs = _.filter(claimJobs, filterFunction);\r\n        }\r\n\r\n        return claimJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of ClaimPartJobs.reserveJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the ClaimPartJobs list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getReserveJobs(\r\n        room: Room,\r\n        filterFunction?: (object: ClaimPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): ClaimPartJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.claimPartJobs ||\r\n            !Memory.rooms[room.name].jobs!.claimPartJobs!.reserveJobs ||\r\n            Memory.rooms[room.name].jobs!.claimPartJobs!.reserveJobs!.cache < Game.time - RESERVE_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateClaimPart_reserveJobs(room);\r\n        }\r\n\r\n        let claimJobs: ClaimPartJob[] = Memory.rooms[room.name].jobs!.claimPartJobs!.reserveJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            claimJobs = _.filter(claimJobs, filterFunction);\r\n        }\r\n\r\n        return claimJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of ClaimPartJobs.signJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the ClaimPartJobs list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getSignJobs(\r\n        room: Room,\r\n        filterFunction?: (object: ClaimPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): ClaimPartJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.claimPartJobs ||\r\n            !Memory.rooms[room.name].jobs!.claimPartJobs!.signJobs ||\r\n            Memory.rooms[room.name].jobs!.claimPartJobs!.signJobs!.cache < Game.time - SIGN_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateClaimPart_signJobs(room);\r\n        }\r\n\r\n        let signJobs: ClaimPartJob[] = Memory.rooms[room.name].jobs!.claimPartJobs!.signJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            signJobs = _.filter(signJobs, filterFunction);\r\n        }\r\n\r\n        return signJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of ClaimPartJobs.attackJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the ClaimPartJobs list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getControllerAttackJobs(\r\n        room: Room,\r\n        filterFunction?: (object: ClaimPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): ClaimPartJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.claimPartJobs ||\r\n            !Memory.rooms[room.name].jobs!.claimPartJobs!.attackJobs ||\r\n            Memory.rooms[room.name].jobs!.claimPartJobs!.attackJobs!.cache < Game.time - ATTACK_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateClaimPart_controllerAttackJobs(room);\r\n        }\r\n\r\n        let attackJobs: ClaimPartJob[] = Memory.rooms[room.name].jobs!.claimPartJobs!.attackJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            attackJobs = _.filter(attackJobs, filterFunction);\r\n        }\r\n\r\n        return attackJobs;\r\n    }\r\n\r\n    /**\r\n     * Get all jobs (in a flatted list) of WorkPartJobs.xxx\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the WorkPartJob list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the caches\r\n     */\r\n    public static getAllWorkPartJobs(\r\n        room: Room,\r\n        filterFunction?: (object: WorkPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): WorkPartJob[] {\r\n        const allWorkPartJobs: WorkPartJob[] = [];\r\n\r\n        _.forEach(this.getRepairJobs(room, filterFunction, forceUpdate), job => allWorkPartJobs.push(job));\r\n        _.forEach(this.getBuildJobs(room, filterFunction, forceUpdate), job => allWorkPartJobs.push(job));\r\n        _.forEach(this.getUpgradeJobs(room, filterFunction, forceUpdate), job => allWorkPartJobs.push(job));\r\n\r\n        return allWorkPartJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of WorkPartJobs.repairJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the WorkPartJobs list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getRepairJobs(\r\n        room: Room,\r\n        filterFunction?: (object: WorkPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): WorkPartJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.workPartJobs ||\r\n            !Memory.rooms[room.name].jobs!.workPartJobs!.repairJobs ||\r\n            Memory.rooms[room.name].jobs!.workPartJobs!.repairJobs!.cache < Game.time - REPAIR_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateWorkPart_repairJobs(room);\r\n        }\r\n\r\n        let repairJobs: WorkPartJob[] = Memory.rooms[room.name].jobs!.workPartJobs!.repairJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            repairJobs = _.filter(repairJobs, filterFunction);\r\n        }\r\n\r\n        return repairJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of WorkPartJobs.buildJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the WorkPartJobs list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getBuildJobs(\r\n        room: Room,\r\n        filterFunction?: (object: WorkPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): WorkPartJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.workPartJobs ||\r\n            !Memory.rooms[room.name].jobs!.workPartJobs!.buildJobs ||\r\n            Memory.rooms[room.name].jobs!.workPartJobs!.buildJobs!.cache < Game.time - BUILD_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateWorkPart_buildJobs(room);\r\n        }\r\n\r\n        let buildJobs: WorkPartJob[] = Memory.rooms[room.name].jobs!.workPartJobs!.buildJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            buildJobs = _.filter(buildJobs, filterFunction);\r\n        }\r\n\r\n        return buildJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of WorkPartJobs.upgradeJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the WorkPartJobs list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getUpgradeJobs(\r\n        room: Room,\r\n        filterFunction?: (object: WorkPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): WorkPartJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.workPartJobs ||\r\n            !Memory.rooms[room.name].jobs!.workPartJobs!.upgradeJobs ||\r\n            Memory.rooms[room.name].jobs!.workPartJobs!.upgradeJobs!.cache < Game.time - UPGRADE_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateWorkPart_upgradeJobs(room);\r\n        }\r\n\r\n        let upgradeJobs: WorkPartJob[] = Memory.rooms[room.name].jobs!.workPartJobs!.upgradeJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            upgradeJobs = _.filter(upgradeJobs, filterFunction);\r\n        }\r\n\r\n        return upgradeJobs;\r\n    }\r\n\r\n    /**\r\n     * Get all jobs (in a flatted list) of CarryPartJob.xxx\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the CarryPartJob list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the caches\r\n     */\r\n    public static getAllCarryPartJobs(\r\n        room: Room,\r\n        filterFunction?: (object: CarryPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): CarryPartJob[] {\r\n        const allCarryPartJobs: CarryPartJob[] = [];\r\n\r\n        _.forEach(this.getStoreJobs(room, filterFunction, forceUpdate), job => allCarryPartJobs.push(job));\r\n        _.forEach(this.getFillJobs(room, filterFunction, forceUpdate), job => allCarryPartJobs.push(job));\r\n\r\n        return allCarryPartJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of CarryPartJobs.fillJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the CarryPartJobs list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getFillJobs(\r\n        room: Room,\r\n        filterFunction?: (object: CarryPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): CarryPartJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.carryPartJobs ||\r\n            !Memory.rooms[room.name].jobs!.carryPartJobs!.fillJobs ||\r\n            Memory.rooms[room.name].jobs!.carryPartJobs!.fillJobs!.cache < Game.time - FILL_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateCarryPart_fillJobs(room);\r\n        }\r\n\r\n        let fillJobs: CarryPartJob[] = Memory.rooms[room.name].jobs!.carryPartJobs!.fillJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            fillJobs = _.filter(fillJobs, filterFunction);\r\n        }\r\n\r\n        return fillJobs;\r\n    }\r\n\r\n    /**\r\n     * Get the list of CarryPartJobs.storeJobs\r\n     * @param room The room to get the jobs from\r\n     * @param filterFunction [Optional] A function to filter the CarryPartJobs list\r\n     * @param forceUpdate [Optional] Forcibly invalidate the cache\r\n     */\r\n    public static getStoreJobs(\r\n        room: Room,\r\n        filterFunction?: (object: CarryPartJob) => boolean,\r\n        forceUpdate?: boolean\r\n    ): CarryPartJob[] {\r\n        if (\r\n            NO_CACHING_MEMORY ||\r\n            forceUpdate ||\r\n            !Memory.rooms[room.name].jobs!.carryPartJobs ||\r\n            !Memory.rooms[room.name].jobs!.carryPartJobs!.storeJobs ||\r\n            Memory.rooms[room.name].jobs!.carryPartJobs!.storeJobs!.cache < Game.time - STORE_JOB_CACHE_TTL\r\n        ) {\r\n            MemoryHelper_Room.updateCarryPart_storeJobs(room);\r\n        }\r\n\r\n        let storeJobs: CarryPartJob[] = Memory.rooms[room.name].jobs!.carryPartJobs!.storeJobs!.data;\r\n\r\n        if (filterFunction !== undefined) {\r\n            storeJobs = _.filter(storeJobs, filterFunction);\r\n        }\r\n\r\n        return storeJobs;\r\n    }\r\n\r\n    /**\r\n     * get all creeps in a specific squad given the squad uuid\r\n     * @param squadUUID the id for the squad\r\n     */\r\n    public static getCreepsInSquad(roomName: string, squadUUID: number): Creep[] | null {\r\n        return MemoryApi.getMyCreeps(roomName, (creep: Creep) => {\r\n            const currentCreepOptions: CreepOptionsMili = creep.memory.options as CreepOptionsMili;\r\n            if (!currentCreepOptions.squadUUID) {\r\n                return false;\r\n            }\r\n            return currentCreepOptions.squadUUID === squadUUID;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the job value in memory to deprecate resources or mark the job as taken\r\n     */\r\n    public static updateJobMemory(creep: Creep, room: Room): void {\r\n        // make sure creep has a job\r\n        if (creep.memory.job === undefined) {\r\n            throw new UserException(\r\n                \"Error in updateJobMemory\",\r\n                \"Attempted to updateJobMemory using a creep with no job.\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n        // make sure room has a jobs property\r\n        if (room.memory.jobs === undefined) {\r\n            throw new UserException(\r\n                \"Error in updateJobMemory\",\r\n                \"The room memory to update does not have a jobs property\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n\r\n        const creepJob: BaseJob = creep.memory.job!;\r\n        let roomJob: BaseJob | undefined;\r\n\r\n        // Assign room job to the room in memory\r\n        switch (creepJob!.jobType) {\r\n            case \"carryPartJob\":\r\n                roomJob = this.searchCarryPartJobs(creepJob as CarryPartJob, room);\r\n                break;\r\n            case \"claimPartJob\":\r\n                roomJob = this.searchClaimPartJobs(creepJob as ClaimPartJob, room);\r\n                break;\r\n            case \"getEnergyJob\":\r\n                roomJob = this.searchGetEnergyJobs(creepJob as GetEnergyJob, room);\r\n                break;\r\n            case \"workPartJob\":\r\n                roomJob = this.searchWorkPartJobs(creepJob as WorkPartJob, room);\r\n                break;\r\n            default:\r\n                throw new UserException(\r\n                    \"Error in updateJobMemory\",\r\n                    \"Creep has a job with an undefined jobType\",\r\n                    ERROR_ERROR\r\n                );\r\n        }\r\n\r\n        if (roomJob === undefined) {\r\n            throw new UserException(\r\n                \"Error in updateJobMemory\",\r\n                \"Could not find the job in room memory to update.\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n\r\n        // We have the roomJob location in memory\r\n        // now we just need to update the value based on the type of job\r\n\r\n        switch (creepJob!.jobType) {\r\n            case \"carryPartJob\":\r\n                this.updateCarryPartJob(roomJob as CarryPartJob, creep);\r\n                break;\r\n            case \"claimPartJob\":\r\n                this.updateClaimPartJob(roomJob as ClaimPartJob, creep);\r\n                break;\r\n            case \"getEnergyJob\":\r\n                this.updateGetEnergyJob(roomJob as GetEnergyJob, creep);\r\n                break;\r\n            case \"workPartJob\":\r\n                this.updateWorkPartJob(roomJob as WorkPartJob, creep);\r\n                break;\r\n            default:\r\n                throw new UserException(\r\n                    \"Error in updateJobMemory\",\r\n                    \"Creep has a job with an undefined jobType\",\r\n                    ERROR_ERROR\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches through claimPartJobs to find a specified job\r\n     * @param job THe job to serach for\r\n     * @param room The room to search in\r\n     */\r\n    public static searchClaimPartJobs(job: ClaimPartJob, room: Room): ClaimPartJob | undefined {\r\n        if (room.memory.jobs!.claimPartJobs === undefined) {\r\n            throw new UserException(\r\n                \"Error in searchClaimPartJobs\",\r\n                \"The room memory does not have a claimPartJobs property\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n\r\n        const jobListing = room.memory.jobs!.claimPartJobs!;\r\n\r\n        let roomJob: ClaimPartJob | undefined;\r\n\r\n        if (jobListing.claimJobs) {\r\n            roomJob = _.find(jobListing.claimJobs.data, (claimJob: ClaimPartJob) => job.targetID === claimJob.targetID);\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.reserveJobs) {\r\n            roomJob = _.find(\r\n                jobListing.reserveJobs.data,\r\n                (reserveJob: ClaimPartJob) => job.targetID === reserveJob.targetID\r\n            );\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.signJobs) {\r\n            roomJob = _.find(jobListing.signJobs.data, (signJob: ClaimPartJob) => job.targetID === signJob.targetID);\r\n        }\r\n\r\n        return roomJob;\r\n    }\r\n\r\n    /**\r\n     * Searches through carryPartJobs to find a specified job\r\n     * @param job The job to search for\r\n     * @param room The room to search in\r\n     */\r\n    public static searchCarryPartJobs(job: CarryPartJob, room: Room): CarryPartJob | undefined {\r\n        if (room.memory.jobs!.carryPartJobs === undefined) {\r\n            throw new UserException(\r\n                \"Error in searchCarryPartJobs\",\r\n                \"The room memory does not have a carryPartJobs property\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n\r\n        const jobListing = room.memory.jobs!.carryPartJobs!;\r\n\r\n        let roomJob: CarryPartJob | undefined;\r\n\r\n        if (jobListing.fillJobs) {\r\n            roomJob = _.find(jobListing.fillJobs.data, (fillJob: CarryPartJob) => job.targetID === fillJob.targetID);\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.storeJobs) {\r\n            roomJob = _.find(jobListing.storeJobs.data, (storeJob: CarryPartJob) => job.targetID === storeJob.targetID);\r\n        }\r\n\r\n        return roomJob;\r\n    }\r\n\r\n    /**\r\n     * Searches through workPartJobs to find a specified job\r\n     * @param job The job to search for\r\n     * @param room The room to search in\r\n     */\r\n    public static searchWorkPartJobs(job: WorkPartJob, room: Room): WorkPartJob | undefined {\r\n        if (room.memory.jobs!.workPartJobs === undefined) {\r\n            throw new UserException(\r\n                \"Error in workPartJobs\",\r\n                \"THe room memory does not have a workPartJobs property\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n\r\n        const jobListing = room.memory.jobs!.workPartJobs!;\r\n\r\n        let roomJob: WorkPartJob | undefined;\r\n\r\n        if (jobListing.upgradeJobs) {\r\n            roomJob = _.find(jobListing.upgradeJobs.data, (uJob: WorkPartJob) => job.targetID === uJob.targetID);\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.buildJobs) {\r\n            roomJob = _.find(jobListing.buildJobs.data, (buildJob: WorkPartJob) => job.targetID === buildJob.targetID);\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.repairJobs) {\r\n            roomJob = _.find(jobListing.repairJobs.data, (rJob: WorkPartJob) => job.targetID === rJob.targetID);\r\n        }\r\n\r\n        return roomJob;\r\n    }\r\n\r\n    /**\r\n     * Searches through getEnergyJobs to find a specified job\r\n     * @param job THe job to search for\r\n     * @param room THe room to search in\r\n     */\r\n    public static searchGetEnergyJobs(job: GetEnergyJob, room: Room): GetEnergyJob | undefined {\r\n        if (room.memory.jobs!.getEnergyJobs === undefined) {\r\n            throw new UserException(\r\n                \"Error in searchGetEnergyJobs\",\r\n                \"The room memory does not have a getEnergyJobs property\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n\r\n        const jobListing = room.memory.jobs!.getEnergyJobs!;\r\n\r\n        let roomJob: GetEnergyJob | undefined;\r\n\r\n        if (jobListing.containerJobs) {\r\n            roomJob = _.find(jobListing.containerJobs.data, (cJob: GetEnergyJob) => cJob.targetID === job.targetID);\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.sourceJobs) {\r\n            roomJob = _.find(jobListing.sourceJobs!.data, (sJob: GetEnergyJob) => sJob.targetID === job.targetID);\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.pickupJobs) {\r\n            roomJob = _.find(jobListing.pickupJobs!.data, (pJob: GetEnergyJob) => pJob.targetID === job.targetID);\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.backupStructures) {\r\n            roomJob = _.find(jobListing.backupStructures!.data, (sJob: GetEnergyJob) => sJob.targetID === job.targetID);\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.linkJobs) {\r\n            roomJob = _.find(jobListing.linkJobs!.data, (lJob: GetEnergyJob) => lJob.targetID === job.targetID);\r\n        }\r\n\r\n        if (roomJob === undefined && jobListing.tombstoneJobs) {\r\n            roomJob = _.find(jobListing.tombstoneJobs!.data, (tJob: GetEnergyJob) => tJob.targetID === job.targetID);\r\n        }\r\n\r\n        return roomJob;\r\n    }\r\n\r\n    /**\r\n     * Updates the CarryPartJob\r\n     * @param job The Job to update\r\n     */\r\n    public static updateCarryPartJob(job: CarryPartJob, creep: Creep): void {\r\n        if (job.actionType === \"transfer\") {\r\n            job.remaining -= creep.carry.energy;\r\n\r\n            if (job.remaining <= 0) {\r\n                job.isTaken = true;\r\n            }\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Updates the ClaimPartJob\r\n     * @param job The Job to update\r\n     */\r\n    public static updateClaimPartJob(job: ClaimPartJob, creep: Creep): void {\r\n        if (job.targetType === \"controller\") {\r\n            job.isTaken = true;\r\n\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     * Updates the getEnergyJob\r\n     * @param job The Job to update\r\n     */\r\n    public static updateGetEnergyJob(job: GetEnergyJob, creep: Creep): void {\r\n        if (job.targetType === \"source\") {\r\n            // Subtract creep effective mining capacity from resources\r\n            job.resources.energy -= creep.getActiveBodyparts(WORK) * 2 * 300;\r\n\r\n            if (job.resources.energy <= 0) {\r\n                job.isTaken = true;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (\r\n            job.targetType === \"droppedResource\" ||\r\n            job.targetType === \"link\" ||\r\n            job.targetType === \"container\" ||\r\n            job.targetType === \"storage\" ||\r\n            job.targetType === \"terminal\"\r\n        ) {\r\n            // Subtract creep carry from resources\r\n            job.resources.energy -= creep.carryCapacity;\r\n\r\n            if (job.resources.energy <= 0) {\r\n                job.isTaken = true;\r\n            }\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the workPartJob\r\n     * @param job The job to update\r\n     */\r\n    public static updateWorkPartJob(job: WorkPartJob, creep: Creep): void {\r\n        if (job.targetType === \"constructionSite\") {\r\n            // Creep builds 5 points/part/tick at 1 energy/point\r\n            job.remaining -= creep.carry.energy; // 1 to 1 ratio of energy to points built\r\n\r\n            if (job.remaining <= 0) {\r\n                job.isTaken = true;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (job.targetType === STRUCTURE_CONTROLLER) {\r\n            // Upgrade at a 1 to 1 ratio\r\n            job.remaining -= creep.carry.energy;\r\n            // * Do nothing really - Job will never be taken\r\n            // Could optionally mark something on the job to show that we have 1 worker upgrading already\r\n            return;\r\n        }\r\n\r\n        if (job.targetType in ALL_STRUCTURE_TYPES) {\r\n            // Repair 20 hits/part/tick at .1 energy/hit rounded up to nearest whole number\r\n            job.remaining -= Math.ceil(creep.carry.energy * 0.1);\r\n\r\n            if (job.remaining <= 0) {\r\n                job.isTaken = true;\r\n            }\r\n\r\n            return;\r\n        }\r\n    }\r\n}\r\n","import MemoryApi from \"../Api/Memory.Api\";\r\nimport UserException from \"utils/UserException\";\r\nimport SpawnApi from \"../Api/Spawn.Api\";\r\nimport {\r\n    ZEALOT_SOLO,\r\n    STALKER_SOLO,\r\n    STANDARD_SQUAD,\r\n    CLAIM_FLAG,\r\n    REMOTE_FLAG,\r\n    OVERRIDE_D_ROOM_FLAG,\r\n    ERROR_WARN,\r\n    STIMULATE_FLAG\r\n} from \"utils/Constants\";\r\n\r\nexport default class EmpireHelper {\r\n\r\n    /**\r\n     * commit a remote flag to memory\r\n     * @param flag the flag we want to commit\r\n     */\r\n    public static processNewRemoteFlag(flag: Flag): void {\r\n\r\n        // Get the host room and set the flags memory\r\n        const dependentRoom: Room = Game.rooms[this.findDependentRoom(flag.pos.roomName)];\r\n        const flagTypeConst: FlagTypeConstant | undefined = this.getFlagType(flag);\r\n        const roomName: string = flag.pos.roomName;\r\n        Memory.flags[flag.name].complete = false;\r\n        Memory.flags[flag.name].processed = true;\r\n        Memory.flags[flag.name].timePlaced = Game.time;\r\n        Memory.flags[flag.name].flagType = flagTypeConst;\r\n        Memory.flags[flag.name].flagName = flag.name;\r\n\r\n        // Create the RemoteFlagMemory object for this flag\r\n        const remoteFlagMemory: RemoteFlagMemory = {\r\n            active: true,\r\n            flagName: flag.name,\r\n            flagType: flagTypeConst\r\n        };\r\n\r\n\r\n        // If the dependent room already has this room covered, set the flag to be deleted and throw a warning\r\n        const existingDepedentRemoteRoomMem: RemoteRoomMemory | undefined = _.find(MemoryApi.getRemoteRooms(dependentRoom),\r\n            (rr: RemoteRoomMemory) => {\r\n                if (rr) {\r\n                    return rr.roomName === roomName;\r\n                }\r\n                return false;\r\n            });\r\n\r\n        if (existingDepedentRemoteRoomMem) {\r\n            Memory.flags[flag.name].complete = true;\r\n            throw new UserException(\r\n                \"Already working this dependent room!\",\r\n                \"The room you placed the remote flag in is already being worked by \" + existingDepedentRemoteRoomMem.roomName,\r\n                ERROR_WARN);\r\n        }\r\n\r\n        // Otherwise, add a brand new memory structure onto it\r\n        const remoteRoomMemory: RemoteRoomMemory = {\r\n            sources: { cache: Game.time, data: 1 },\r\n            hostiles: { cache: Game.time, data: null },\r\n            structures: { cache: Game.time, data: null },\r\n            roomName: flag.pos.roomName,\r\n            flags: [remoteFlagMemory],\r\n        };\r\n\r\n        console.log(\"Remote Flag [\" + flag.name + \"] processed. Host Room: [\" + dependentRoom.name + \"]\");\r\n        dependentRoom.memory.remoteRooms!.push(remoteRoomMemory);\r\n    }\r\n\r\n    /**\r\n     * commit a attack flag to memory\r\n     * @param flag the flag we want to commit\r\n     */\r\n    public static processNewAttackFlag(flag: Flag): void {\r\n\r\n        // Get the host room and set the flags memory\r\n        const dependentRoom: Room = Game.rooms[this.findDependentRoom(flag.pos.roomName)];\r\n        const flagTypeConst: FlagTypeConstant | undefined = this.getFlagType(flag);\r\n        const roomName: string = flag.pos.roomName;\r\n        Memory.flags[flag.name].complete = false;\r\n        Memory.flags[flag.name].processed = true;\r\n        Memory.flags[flag.name].timePlaced = Game.time;\r\n        Memory.flags[flag.name].flagType = flagTypeConst;\r\n        Memory.flags[flag.name].flagName = flag.name;\r\n\r\n        // Create the RemoteFlagMemory object for this flag\r\n        const attackFlagMemory: AttackFlagMemory = this.generateAttackFlagOptions(flag, flagTypeConst, dependentRoom.name);\r\n\r\n\r\n        // If the dependent room already has this room covered, just push this flag onto the existing structure\r\n        const existingDepedentAttackRoomMem: AttackRoomMemory | undefined = _.find(MemoryApi.getAttackRooms(dependentRoom),\r\n            (rr: AttackRoomMemory) => {\r\n                if (rr) {\r\n                    return rr.roomName === roomName;\r\n                }\r\n                return false;\r\n            });\r\n\r\n        if (existingDepedentAttackRoomMem) {\r\n            console.log(\"Attack Flag [\" + flag.name + \"] processed. Added to existing Host Room: [\" + existingDepedentAttackRoomMem.roomName + \"]\");\r\n            existingDepedentAttackRoomMem.flags.push(attackFlagMemory);\r\n            return;\r\n        }\r\n\r\n        // Otherwise, add a brand new memory structure onto it\r\n        const attackRoomMemory: AttackRoomMemory = {\r\n            hostiles: { cache: Game.time, data: null },\r\n            structures: { cache: Game.time, data: null },\r\n            roomName: flag.pos.roomName,\r\n            flags: [attackFlagMemory],\r\n        };\r\n\r\n        console.log(\"Attack Flag [\" + flag.name + \"] processed. Host Room: [\" + dependentRoom.name + \"]\");\r\n        dependentRoom.memory.attackRooms!.push(attackRoomMemory);\r\n    }\r\n\r\n    /**\r\n     * commit a claim flag to memory\r\n     * @param flag the flag we want to commit\r\n     */\r\n    public static processNewClaimFlag(flag: Flag): void {\r\n\r\n        // Get the host room and set the flags memory\r\n        const dependentRoom: Room = Game.rooms[this.findDependentRoom(flag.pos.roomName)];\r\n        const flagTypeConst: FlagTypeConstant | undefined = this.getFlagType(flag);\r\n        const roomName: string = flag.pos.roomName;\r\n        Memory.flags[flag.name].complete = false;\r\n        Memory.flags[flag.name].processed = true;\r\n        Memory.flags[flag.name].timePlaced = Game.time;\r\n        Memory.flags[flag.name].flagType = flagTypeConst;\r\n        Memory.flags[flag.name].flagName = flag.name;\r\n\r\n        // Create the ClaimFlagMemory object for this flag\r\n        const claimFlagMemory: ClaimFlagMemory = {\r\n            active: true,\r\n            flagName: flag.name,\r\n            flagType: flagTypeConst\r\n        };\r\n\r\n\r\n        // If the dependent room already has this room covered, set the flag to be deleted and throw a warning\r\n        const existingDepedentClaimRoomMem: ClaimRoomMemory | undefined = _.find(MemoryApi.getClaimRooms(dependentRoom),\r\n            (rr: ClaimRoomMemory) => {\r\n                if (rr) {\r\n                    return rr.roomName === roomName;\r\n                }\r\n                return false;\r\n            });\r\n\r\n        if (existingDepedentClaimRoomMem) {\r\n            Memory.flags[flag.name].complete = true;\r\n            throw new UserException(\r\n                \"Already working this dependent room!\",\r\n                \"The room you placed the claim flag in is already being worked by \" + existingDepedentClaimRoomMem.roomName,\r\n                ERROR_WARN);\r\n        }\r\n\r\n        // Otherwise, add a brand new memory structure onto it\r\n        const claimRoomMemory: ClaimRoomMemory = {\r\n            roomName: flag.pos.roomName,\r\n            flags: [claimFlagMemory],\r\n        };\r\n\r\n        console.log(\"Claim Flag [\" + flag.name + \"] processed. Host Room: [\" + dependentRoom.name + \"]\");\r\n        dependentRoom.memory.claimRooms!.push(claimRoomMemory);\r\n    }\r\n\r\n    /**\r\n     * commit a depedent room over-ride flag to memory\r\n     * @param flag the flag we are commiting to memory\r\n     */\r\n    public static processNewDependentRoomOverrideFlag(flag: Flag): void {\r\n\r\n        // Set all the memory values for the flag\r\n        const flagTypeConst: FlagTypeConstant | undefined = this.getFlagType(flag);\r\n        Memory.flags[flag.name].complete = false;\r\n        Memory.flags[flag.name].processed = true;\r\n        Memory.flags[flag.name].timePlaced = Game.time;\r\n        Memory.flags[flag.name].flagType = flagTypeConst;\r\n        Memory.flags[flag.name].flagName = flag.name;\r\n\r\n        console.log(\"Option Flag [\" + flag.name + \"] processed. Flag Type: [\" + flagTypeConst + \"]\");\r\n    }\r\n\r\n    /**\r\n     * commit a stimulate flag to an owned room\r\n     * @param flag the flag we are commiting to memory\r\n     */\r\n    public static processNewStimulateFlag(flag: Flag): void {\r\n\r\n        // Set all the memory values for the flag\r\n        const flagTypeConst: FlagTypeConstant | undefined = this.getFlagType(flag);\r\n        Memory.flags[flag.name].complete = false;\r\n        Memory.flags[flag.name].processed = true;\r\n        Memory.flags[flag.name].timePlaced = Game.time;\r\n        Memory.flags[flag.name].flagType = flagTypeConst;\r\n        Memory.flags[flag.name].flagName = flag.name;\r\n    }\r\n\r\n    /**\r\n     * finds the closest colonized room to support a\r\n     * Remote/Attack/Claim room\r\n     * Calls helper functions to decide auto or over-ride\r\n     * @param targetRoom the room we want to support\r\n     */\r\n    public static findDependentRoom(targetRoom: string): string {\r\n\r\n        // Green & White flags are considered override flags, get those and find the one that was placed most recently\r\n        // ! - Idea for here... going to add a constant to describe each flag type, then we can make an empire api function\r\n        // that returns the flag type, so this next line could be replaced with (flag: Flag) => this.getFlagType === OVERRIDE_FLAG\r\n        const allOverrideFlags = MemoryApi.getAllFlags((flag: Flag) => flag.color === COLOR_GREEN && flag.secondaryColor === COLOR_WHITE);\r\n        let overrideFlag: Flag | undefined;\r\n\r\n        // If we don't have any d-room override flags, we don't need to worry about it and will use auto room detection\r\n        if (allOverrideFlags.length > 0) {\r\n            for (const flag of allOverrideFlags) {\r\n                if (!overrideFlag) {\r\n                    overrideFlag = flag;\r\n                }\r\n                else {\r\n                    if (flag.memory.timePlaced > overrideFlag.memory.timePlaced) {\r\n                        overrideFlag = flag;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Set the override flag as complete and call the helper to find the override room\r\n            Memory.flags[overrideFlag!.name].complete = true;\r\n            return this.findDependentRoomManual(overrideFlag!);\r\n        }\r\n\r\n        // If no override flag was found, automatically find closest dependent room\r\n        return this.findDependentRoomAuto(targetRoom);\r\n    }\r\n\r\n    /**\r\n     * Automatically come up with a dependent room\r\n     * @param targetRoom the room we want to support\r\n     */\r\n    public static findDependentRoomAuto(targetRoom: string): string {\r\n\r\n        const ownedRooms = MemoryApi.getOwnedRooms();\r\n        let shortestPathRoom: Room | undefined;\r\n\r\n        // Loop over owned rooms, finding the shortest path\r\n        for (const currentRoom of ownedRooms) {\r\n\r\n            if (!shortestPathRoom) {\r\n                shortestPathRoom = currentRoom;\r\n                continue;\r\n            }\r\n\r\n\r\n            const shortestPath = Game.map.findRoute(shortestPathRoom.name, targetRoom) as Array<{ exit: ExitConstant; room: string; }>;\r\n            const currentPath = Game.map.findRoute(currentRoom.name, targetRoom) as Array<{ exit: ExitConstant; room: string; }>;\r\n\r\n            // If the path is shorter, its the new canidate room\r\n            if (currentPath.length < shortestPath.length) {\r\n                shortestPathRoom = currentRoom;\r\n            }\r\n        }\r\n\r\n        // Throw exception if no rooms were found\r\n        if (!shortestPathRoom) {\r\n            throw new UserException(\r\n                \"Auto-Dependent Room Finder Error\",\r\n                \"No room with shortest path found to the target room.\",\r\n                ERROR_WARN\r\n            );\r\n        }\r\n\r\n        return shortestPathRoom!.name;\r\n    }\r\n\r\n    /**\r\n     * Manually get the dependent room based on flags\r\n     * @param targetRoom the room we want to support\r\n     * @param overrideFlag the flag for the selected override flag\r\n     */\r\n    public static findDependentRoomManual(overrideFlag: Flag): string {\r\n\r\n        // Throw error if we have no vision in the override flag room\r\n        // (Shouldn't happen, but user error can allow it to occur)\r\n        if (!Game.flags[overrideFlag.name].room) {\r\n            throw new UserException(\r\n                \"Manual Dependent Room Finding Error\",\r\n                \"Flag [\" + overrideFlag.name + \"]. We have no vision in the room you attempted to manually set as override dependent room.\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n        return Game.flags[overrideFlag.name].room!.name;\r\n    }\r\n\r\n    /**\r\n     * get the rally location for the room we are attacking\r\n     * @param homeRoom the room we are spawning from\r\n     * @param targetRoom the room we are attacking\r\n     */\r\n    public static findRallyLocation(homeRoom: string, targetRoom: string): RoomPosition {\r\n\r\n        const fullPath = Game.map.findRoute(homeRoom, targetRoom) as Array<{ exit: ExitConstant; room: string; }>;\r\n\r\n        // To prevent out of bounds, only allow room paths that have as least 2 elements (should literally never occur unless we\r\n        // are attacking our own room (??? maybe an active defender strategy, so i won't throw an error for it tbh)\r\n        if (fullPath.length <= 2) {\r\n            return new RoomPosition(25, 25, homeRoom);\r\n        }\r\n\r\n        // Return the room right BEFORE the room we are attacking. This is the rally room (location is just in middle of room)\r\n        return new RoomPosition(25, 25, fullPath[fullPath.length - 2].room);\r\n    }\r\n\r\n    /**\r\n     * if a claim room has no flags associated with it, delete the claim room memory structure\r\n     * @param claimRooms an array of all the claim room memory structures in the empire\r\n     */\r\n    public static cleanDeadClaimRooms(claimRooms: Array<ClaimRoomMemory | undefined>): void {\r\n\r\n        // Loop over claim rooms, and if we find one with no associated flag, remove it\r\n        for (const claimRoom in claimRooms) {\r\n            if (!claimRooms[claimRoom]) {\r\n                continue;\r\n            }\r\n            const claimRoomName: string = claimRooms[claimRoom]!.roomName;\r\n\r\n            if (!claimRooms[claimRoom]!.flags[0]) {\r\n                console.log(\"Removing Claim Room [\" + claimRooms[claimRoom]!.roomName + \"]\");\r\n\r\n                // Get the dependent room for the attack room we are removing from memory\r\n                const dependentRoom: Room | undefined = _.find(MemoryApi.getOwnedRooms(),\r\n                    (room: Room) => {\r\n                        const rr = room.memory.claimRooms;\r\n                        return _.some(rr!, (innerRR: ClaimRoomMemory) => {\r\n                            if (innerRR) {\r\n                                return innerRR.roomName === claimRoomName;\r\n                            }\r\n                            return false;\r\n                        });\r\n                    });\r\n\r\n                delete Memory.rooms[dependentRoom!.name].claimRooms![claimRoom];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * removes all claim room memory structures that do not have an existing flag associated with them\r\n     * @param claimRooms an array of all the claim room memory structures in the empire\r\n     */\r\n    public static cleanDeadClaimRoomFlags(claimRooms: Array<ClaimRoomMemory | undefined>): void {\r\n\r\n        // Loop over claim rooms, remote rooms, and attack rooms, and make sure the flag they're referencing actually exists\r\n        // Delete the memory structure if its not associated with an existing flag\r\n        for (const claimRoom of claimRooms) {\r\n            if (!claimRoom) {\r\n                continue;\r\n            }\r\n\r\n            for (const flag in claimRoom!.flags) {\r\n                if (!claimRoom!.flags[flag]) {\r\n                    continue;\r\n                }\r\n\r\n                // Tell typescript that these are claim flag memory structures\r\n                const currentFlag: ClaimFlagMemory = claimRoom!.flags[flag] as ClaimFlagMemory;\r\n                if (!Game.flags[currentFlag.flagName]) {\r\n                    console.log(\"Removing [\" + flag + \"] from Claim Room [\" + claimRoom!.roomName + \"]\");\r\n                    delete claimRoom!.flags[flag];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if an attack room has no flags associated with it, delete the attack room memory structure\r\n     * @param attackRooms an array of all the attack room memory structures in the empire\r\n     */\r\n    public static cleanDeadAttackRooms(attackRooms: Array<AttackRoomMemory | undefined>): void {\r\n\r\n        // Loop over remote rooms, and if we find one with no associated flag, remove it\r\n        for (const attackRoom in attackRooms) {\r\n            if (!attackRooms[attackRoom]) {\r\n                continue;\r\n            }\r\n            const attackRoomName: string = attackRooms[attackRoom]!.roomName;\r\n\r\n            if (!attackRooms[attackRoom]!.flags[0]) {\r\n                console.log(\"Removing Attack Room [\" + attackRooms[attackRoom]!.roomName + \"]\");\r\n\r\n                // Get the dependent room for the attack room we are removing from memory\r\n                const dependentRoom: Room | undefined = _.find(MemoryApi.getOwnedRooms(),\r\n                    (room: Room) => {\r\n                        const rr = room.memory.attackRooms;\r\n                        return _.some(rr!, (innerRR: AttackRoomMemory) => {\r\n                            if (innerRR) {\r\n                                return innerRR.roomName === attackRoomName;\r\n                            }\r\n                            return false;\r\n                        });\r\n                    });\r\n\r\n                delete Memory.rooms[dependentRoom!.name].attackRooms![attackRoom];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clean dead attack room flags from a live attack room\r\n     */\r\n    public static cleanDeadAttackRoomFlags(attackRooms: Array<AttackRoomMemory | undefined>): void {\r\n\r\n        // Loop over attack rooms, and make sure the flag they're referencing actually exists\r\n        // Delete the memory structure if its not associated with an existing flag\r\n        for (const attackRoom of attackRooms) {\r\n            if (!attackRoom) {\r\n                continue;\r\n            }\r\n\r\n            for (const flag in attackRoom!.flags) {\r\n                if (!attackRoom!.flags[flag]) {\r\n                    continue;\r\n                }\r\n\r\n                // Tell typescript that these are claim flag memory structures\r\n                const currentFlag: AttackFlagMemory = attackRoom!.flags[flag] as AttackFlagMemory;\r\n                if (!Game.flags[currentFlag.flagName]) {\r\n                    console.log(\"Removing [\" + flag + \"] from Attack Room [\" + attackRoom!.roomName + \"]\");\r\n                    delete attackRoom!.flags[flag];;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if an remote room has no flags associated with it, delete the attack room memory structure\r\n     * @param attackRooms an array of all the attack room memory structures in the empire\r\n     */\r\n    public static cleanDeadRemoteRooms(remoteRooms: Array<RemoteRoomMemory | undefined>): void {\r\n\r\n        // Loop over remote rooms, and if we find one with no associated flag, remove it\r\n        for (const remoteRoom in remoteRooms) {\r\n            if (!remoteRooms[remoteRoom]) {\r\n                continue;\r\n            }\r\n            const remoteRoomName: string = remoteRooms[remoteRoom]!.roomName;\r\n\r\n            if (!remoteRooms[remoteRoom]!.flags[0]) {\r\n                console.log(\"Removing Remote Room [\" + remoteRooms[remoteRoom]!.roomName + \"]\");\r\n\r\n                // Get the dependent room for this room\r\n                const dependentRoom: Room | undefined = _.find(MemoryApi.getOwnedRooms(),\r\n                    (room: Room) => {\r\n                        const rr = room.memory.remoteRooms;\r\n                        return _.some(rr!, (innerRR: RemoteRoomMemory) => {\r\n                            if (innerRR) {\r\n                                return innerRR.roomName === remoteRoomName;\r\n                            }\r\n                            return false;\r\n                        });\r\n                    });\r\n\r\n                delete Memory.rooms[dependentRoom!.name].remoteRooms![remoteRoom];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * removes all claim room memory structures that do not have an existing flag associated with them\r\n     * @param claimRooms an array of all the claim room memory structures in the empire\r\n     */\r\n    public static cleanDeadRemoteRoomsFlags(remoteRooms: Array<RemoteRoomMemory | undefined>): void {\r\n\r\n        // Loop over remote rooms and make sure the flag they're referencing actually exists\r\n        // Delete the memory structure if its not associated with an existing flag\r\n        for (const remoteRoom of remoteRooms) {\r\n            if (!remoteRoom) {\r\n                continue;\r\n            }\r\n\r\n            for (const flag in remoteRoom!.flags) {\r\n                if (!remoteRoom!.flags[flag]) {\r\n                    continue;\r\n                }\r\n\r\n                // Tell typescript that these are claim flag memory structures\r\n                const currentFlag: RemoteFlagMemory = remoteRoom!.flags[flag] as RemoteFlagMemory;\r\n                if (!Game.flags[currentFlag.flagName]) {\r\n                    console.log(\"Removing [\" + flag + \"] from Remote Room Memory [\" + remoteRoom!.roomName + \"]\");\r\n                    delete remoteRoom!.flags[flag];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * gets the flag type for a flag\r\n     * @param flag the flag we are checking the type for\r\n     * @returns the flag type constant that tells you the type of flag it is\r\n     */\r\n    public static getFlagType(flag: Flag): FlagTypeConstant | undefined {\r\n\r\n        let flagType: FlagTypeConstant | undefined;\r\n\r\n        // Attack flags\r\n        if (flag.color === COLOR_RED) {\r\n\r\n            // Check the subtype\r\n            switch (flag.secondaryColor) {\r\n\r\n                // Zealot Solo\r\n                case COLOR_BLUE:\r\n                    flagType = ZEALOT_SOLO;\r\n                    break;\r\n\r\n                // Stalker Solo\r\n                case COLOR_BROWN:\r\n                    flagType = STALKER_SOLO;\r\n\r\n                // Standard Squad\r\n                case COLOR_RED:\r\n                    flagType = STANDARD_SQUAD;\r\n            }\r\n        }\r\n        // Claim Flags\r\n        else if (flag.color === COLOR_WHITE) {\r\n            flagType = CLAIM_FLAG;\r\n        }\r\n        // Option Flags\r\n        else if (flag.color === COLOR_GREEN) {\r\n\r\n            // Check the subtype\r\n            switch (flag.secondaryColor) {\r\n\r\n                // Depedent Room Override Flag\r\n                case COLOR_WHITE:\r\n                    flagType = OVERRIDE_D_ROOM_FLAG;\r\n                    break;\r\n\r\n                case COLOR_YELLOW:\r\n                    flagType = STIMULATE_FLAG;\r\n            }\r\n        }\r\n        // Remote Flags\r\n        else if (flag.color === COLOR_YELLOW) {\r\n            flagType = REMOTE_FLAG;\r\n        }\r\n\r\n        // Unknown Flag Type\r\n        else {\r\n\r\n            // If it isn't a valid flag type, set it to complete to flag it for deletion and throw a warning\r\n            Memory.flags[flag.name].complete = true;\r\n            throw new UserException(\r\n                \"Invalid flag type\",\r\n                \"The flag you placed has no defined type.\",\r\n                ERROR_WARN);\r\n        }\r\n\r\n        return flagType;\r\n    }\r\n\r\n    /**\r\n     * generate the options for an attack flag based on its type\r\n     * @param flag the flag we are getting options for\r\n     * @param flagTypeConst the flag type of this flag\r\n     * @param dependentRoom the room that will be hosting this attack room\r\n     * @returns the object for the attack flag associated memory structure\r\n     */\r\n    public static generateAttackFlagOptions(flag: Flag, flagTypeConst: FlagTypeConstant | undefined, dependentRoom: string): AttackFlagMemory {\r\n\r\n        // Generate the attack flag options based on the type of flag it is\r\n        const attackFlagMemory: AttackFlagMemory = {\r\n            active: false,\r\n            squadSize: 0,\r\n            squadUUID: 0,\r\n            rallyLocation: null,\r\n            flagName: flag.name,\r\n            flagType: flagTypeConst\r\n        }\r\n\r\n        // Fill in these options based on the flag type\r\n        switch (flagTypeConst) {\r\n\r\n            // Zealot Solo\r\n            case ZEALOT_SOLO:\r\n                // We don't need to adjust the memory for this type\r\n                break;\r\n\r\n            // Stalker Solo\r\n            case STALKER_SOLO:\r\n                // We don't need to adjust memory for this type\r\n                break;\r\n\r\n            // Standard Squad\r\n            case STANDARD_SQUAD:\r\n\r\n                attackFlagMemory.squadSize = 3;\r\n                attackFlagMemory.squadUUID = SpawnApi.generateSquadUUID();\r\n                attackFlagMemory.rallyLocation = this.findRallyLocation(dependentRoom, flag.pos.roomName);\r\n                break;\r\n\r\n            // Throw a warning if we were unable to generate memory for this flag type, and set it to be deleted\r\n            default:\r\n                flag.memory.complete = true;\r\n                throw new UserException(\r\n                    \"Unable to get attack flag memory for flag type \" + flagTypeConst,\r\n                    \"Flag \" + flag.name + \" was of an invalid type for the purpose of generating attack flag memory\",\r\n                    ERROR_WARN);\r\n        }\r\n\r\n        return attackFlagMemory;\r\n    }\r\n}\r\n","// Config file for memory related actions\r\n/**\r\n * set a zealot flag to one time use\r\n */\r\nexport const ZEALOT_FLAG_ONE_TIME_USE = true;\r\n\r\n/**\r\n * set a stalker flag to one time use\r\n */\r\nexport const STALKER_FLAG_ONE_TIME_USE = true;\r\n\r\n/**\r\n * set a standard squad flag to one time use\r\n */\r\nexport const STANDARD_SQUAD_FLAG_ONE_TIME_USE = true;\r\n","import EmpireHelper from \"../Helpers/EmpireHelper\";\r\nimport MemoryApi from \"./Memory.Api\";\r\nimport { ZEALOT_SOLO, STALKER_SOLO, STANDARD_SQUAD } from \"utils/Constants\";\r\nimport {\r\n    ZEALOT_FLAG_ONE_TIME_USE,\r\n    STALKER_FLAG_ONE_TIME_USE,\r\n    STANDARD_SQUAD_FLAG_ONE_TIME_USE\r\n} from \"utils/militaryConfig\"\r\n\r\nexport default class Empire {\r\n\r\n    /**\r\n     * get new flags that need to be processed\r\n     * @returns Flag[] an array of flags that need to be processed (empty if none)\r\n     */\r\n    public static getUnprocessedFlags(): Flag[] {\r\n\r\n        // Create an array of all flags\r\n        const allFlags: Flag[] = MemoryApi.getAllFlags();\r\n        const newFlags: Flag[] = [];\r\n\r\n        // Create an array of all unprocessed flags\r\n        for (const flag of allFlags) {\r\n            if (!flag.memory.processed || flag.memory.processed === undefined) {\r\n                newFlags.push(flag);\r\n            }\r\n        }\r\n\r\n        // Returns all unprocessed flags, empty array if there are none\r\n        return newFlags;\r\n    }\r\n    /**\r\n     * search for new flags and properly commit them\r\n     * @param newFlags StringMap of new flags we need to process\r\n     */\r\n    public static processNewFlags(newFlags: Flag[]): void {\r\n\r\n        // Don't run the function if theres no new flags\r\n        if (newFlags.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Loop over all new flags and call the proper helper\r\n        for (const flag of newFlags) {\r\n\r\n            switch (flag.color) {\r\n\r\n                // Remote Flags\r\n                case COLOR_YELLOW:\r\n\r\n                    EmpireHelper.processNewRemoteFlag(flag);\r\n                    break;\r\n\r\n                // Attack Flags\r\n                case COLOR_RED:\r\n\r\n                    EmpireHelper.processNewAttackFlag(flag);\r\n                    break;\r\n\r\n                // Claim Flags\r\n                case COLOR_WHITE:\r\n\r\n                    EmpireHelper.processNewClaimFlag(flag);\r\n                    break;\r\n\r\n                // Option flags\r\n                case COLOR_GREEN:\r\n\r\n                    // Dependent Room override flag\r\n                    if (flag.secondaryColor === COLOR_WHITE) {\r\n                        EmpireHelper.processNewDependentRoomOverrideFlag(flag);\r\n                    }\r\n                    else if (flag.secondaryColor === COLOR_YELLOW) {\r\n                        EmpireHelper.processNewStimulateFlag(flag);\r\n                    }\r\n\r\n                // Unhandled Flag, print warning to console\r\n                // Set to processed to prevent the flag from attempting processization every tick\r\n                default:\r\n\r\n                    console.log(\"Attempted to process flag of an unhandled type.\")\r\n                    flag.memory.processed = true;\r\n                    break;\r\n            }\r\n\r\n            // Set up the memory for the room if it doesn't already exist\r\n            const roomName = flag.pos.roomName;\r\n            if (!Memory.rooms[roomName]) {\r\n                const isOwnedRoom: boolean = false;\r\n                console.log(\"Initializing Room Memory for Dependent Room [\" + roomName + \"].\");\r\n                MemoryApi.initRoomMemory(roomName, isOwnedRoom);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * deletes all flags marked as complete\r\n     */\r\n    public static deleteCompleteFlags(): void {\r\n\r\n        const completeFlags = MemoryApi.getAllFlags((flag: Flag) => flag.memory.complete);\r\n\r\n        // Loop over all flags, removing them and their direct memory from the game\r\n        for (const flag of completeFlags) {\r\n            console.log(\"Removing flag [\" + flag.name + \"]\");\r\n            flag.remove();\r\n            delete Memory.flags[flag.name];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * look for dead flags (memory with no associated flag existing) and remove them\r\n     */\r\n    public static cleanDeadFlags(): void {\r\n\r\n        // Get all flag based action memory structures (Remote, Claim, and Attack Room Memory)\r\n        const allRooms = MemoryApi.getOwnedRooms();\r\n        const claimRooms: Array<ClaimRoomMemory | undefined> = _.flatten(_.map(allRooms,\r\n            room => MemoryApi.getClaimRooms(room)));\r\n        const remoteRooms: Array<RemoteRoomMemory | undefined> = _.flatten(_.map(allRooms,\r\n            room => MemoryApi.getRemoteRooms(room)));\r\n        const attackRooms: Array<AttackRoomMemory | undefined> = _.flatten(_.map(allRooms,\r\n            room => MemoryApi.getAttackRooms(room)));\r\n\r\n\r\n        // Clean dead flags from memory structures\r\n        EmpireHelper.cleanDeadClaimRoomFlags(claimRooms);\r\n        EmpireHelper.cleanDeadRemoteRoomsFlags(remoteRooms);\r\n        EmpireHelper.cleanDeadAttackRoomFlags(attackRooms);\r\n\r\n        // Clean the memory of each type of dependent room memory structure with no existing flags associated\r\n        EmpireHelper.cleanDeadClaimRooms(claimRooms);\r\n        EmpireHelper.cleanDeadRemoteRooms(remoteRooms);\r\n        EmpireHelper.cleanDeadAttackRooms(attackRooms);\r\n    }\r\n\r\n    /**\r\n     * get if the flag is considered a one time use flag\r\n     */\r\n    public static isAttackFlagOneTimeUse(flagMemory: AttackFlagMemory): boolean {\r\n        // Reference config file to decide what flag is considered 1 time use, assume yes by default\r\n        switch (flagMemory.flagType) {\r\n            case ZEALOT_SOLO:\r\n                return ZEALOT_FLAG_ONE_TIME_USE;\r\n            case STALKER_SOLO:\r\n                return STALKER_FLAG_ONE_TIME_USE;\r\n            case STANDARD_SQUAD:\r\n                return STANDARD_SQUAD_FLAG_ONE_TIME_USE;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if there are no active attack flags for a specific room, active one\r\n     */\r\n    public static activateAttackFlags(room: Room): void {\r\n\r\n        const attackRooms: Array<AttackRoomMemory | undefined> = MemoryApi.getAttackRooms(room);\r\n        const attackRoomWithNoActiveFlag: AttackRoomMemory | undefined = _.find(attackRooms, (attackRoom: AttackRoomMemory) => {\r\n            if (attackRoom) {\r\n                return !_.some(attackRoom!.flags, (flag: AttackFlagMemory) => flag.active);\r\n            }\r\n            return false;\r\n        });\r\n\r\n        // Break early if there are none\r\n        if (!attackRoomWithNoActiveFlag) {\r\n            return;\r\n        }\r\n\r\n        // Break early if no attack flags on this room (possible to happen from an error with cleaning)\r\n        if (!attackRoomWithNoActiveFlag!.flags) {\r\n            return;\r\n        }\r\n\r\n        // Activate the first one we see, possible to change later for another standard\r\n        for (const arf in attackRoomWithNoActiveFlag!.flags) {\r\n            if (attackRoomWithNoActiveFlag!.flags[arf]) {\r\n                attackRoomWithNoActiveFlag!.flags[arf]!.active = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\n","import EmpireApi from \"../Api/Empire.Api\";\r\nimport MemoryApi from \"../Api/Memory.Api\";\r\n\r\n// empire-wide manager\r\nexport default class EmpireManager {\r\n\r\n    /**\r\n     * run the empire for the AI\r\n     */\r\n    public static runEmpireManager(): void {\r\n\r\n        // Get unprocessed flags and process them\r\n        const unprocessedFlags: Flag[] = EmpireApi.getUnprocessedFlags();\r\n        const ownedRooms: Room[] = MemoryApi.getOwnedRooms();\r\n\r\n        if (unprocessedFlags.length > 0) {\r\n\r\n            EmpireApi.processNewFlags(unprocessedFlags);\r\n        }\r\n\r\n        // Delete unused flags and flag memory\r\n        EmpireApi.deleteCompleteFlags();\r\n        EmpireApi.cleanDeadFlags();\r\n\r\n        // Activate attack flags for every room\r\n        _.forEach(ownedRooms, (room: Room) => EmpireApi.activateAttackFlags(room));\r\n\r\n        // ! - [TODO] Empire Queue and Alliance/Public Memory Stuff\r\n    }\r\n}\r\n","// @ts-ignore\r\nimport MemoryApi from \"Api/Memory.Api\";\r\n\r\n// manager for the memory of the empire\r\nexport default class MemoryManager {\r\n    /**\r\n     * run the memory for the AI\r\n     */\r\n    public static runMemoryManager(): void {\r\n        this.initMainMemory();\r\n\r\n        MemoryApi.garbageCollection();\r\n\r\n        const ownedRooms: Room[] = MemoryApi.getOwnedRooms();\r\n\r\n        _.forEach(ownedRooms, (room: Room) => {\r\n            const isOwnedRoom: boolean = true;\r\n            MemoryApi.initRoomMemory(room.name, isOwnedRoom);\r\n            MemoryApi.cleanDependentRoomMemory(room);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ensures the initial Memory object is defined properly\r\n     */\r\n    public static initMainMemory() {\r\n        if (!Memory.rooms) {\r\n            Memory.rooms = {};\r\n        }\r\n\r\n        if (!Memory.flags) {\r\n            Memory.flags = {};\r\n        }\r\n\r\n        if (!Memory.creeps) {\r\n            Memory.creeps = {};\r\n        }\r\n    }\r\n}\r\n","import RoomApi from \"../Api/Room.Api\";\r\nimport MemoryApi from \"../Api/Memory.Api\";\r\nimport RoomHelper from \"Helpers/RoomHelper\";\r\nimport {\r\n    RUN_TOWER_TIMER,\r\n    RUN_LAB_TIMER,\r\n    RUN_LINKS_TIMER,\r\n    RUN_TERMINAL_TIMER,\r\n    RUN_ROOM_STATE_TIMER,\r\n    RUN_DEFCON_TIMER,\r\n} from \"utils/config\";\r\n\r\n// room-wide manager\r\nexport default class RoomManager {\r\n\r\n    /**\r\n     * run the room for every room\r\n     */\r\n    public static runRoomManager(): void {\r\n\r\n        const ownedRooms: Room[] = MemoryApi.getOwnedRooms();\r\n        _.forEach(ownedRooms, (room: Room) => {\r\n            this.runSingleRoom(room);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * run the room for a single room\r\n     * @param room the room we are running this manager function on\r\n     */\r\n    public static runSingleRoom(room: Room): void {\r\n\r\n        // Set Defcon and Room State (roomState relies on defcon being set first)\r\n        if (RoomHelper.excecuteEveryTicks(RUN_ROOM_STATE_TIMER)) {\r\n            RoomApi.setDefconLevel(room);\r\n        }\r\n\r\n        if (RoomHelper.excecuteEveryTicks(RUN_DEFCON_TIMER)) {\r\n            RoomApi.setRoomState(room);\r\n        }\r\n\r\n        // Run all structures in the room if they exist\r\n        // Run Towers\r\n        const defcon: number = MemoryApi.getDefconLevel(room);\r\n        if (defcon >= 1 &&\r\n            RoomHelper.excecuteEveryTicks(RUN_TOWER_TIMER)) {\r\n            RoomApi.runTowers(room);\r\n        }\r\n\r\n        // Run Labs\r\n        if (RoomHelper.isExistInRoom(room, STRUCTURE_LAB) &&\r\n            RoomHelper.excecuteEveryTicks(RUN_LAB_TIMER)) {\r\n            RoomApi.runLabs(room);\r\n        }\r\n\r\n        // Run Links\r\n        if (RoomHelper.isExistInRoom(room, STRUCTURE_LINK) &&\r\n            RoomHelper.excecuteEveryTicks(RUN_LINKS_TIMER)) {\r\n            RoomApi.runLinks(room);\r\n        }\r\n\r\n        // Run Terminals\r\n        if (RoomHelper.isExistInRoom(room, STRUCTURE_TERMINAL) &&\r\n            RoomHelper.excecuteEveryTicks(RUN_TERMINAL_TIMER)) {\r\n            RoomApi.runTerminal(room);\r\n        }\r\n    }\r\n}\r\n","import SpawnApi from \"../Api/Spawn.Api\";\r\nimport MemoryApi from \"../Api/Memory.Api\";\r\n\r\n// handles spawning for every room\r\nexport default class SpawnManager {\r\n    /**\r\n     * run the spawning for the AI for each room\r\n     */\r\n    public static runSpawnManager(): void {\r\n        const ownedRooms = MemoryApi.getOwnedRooms();\r\n\r\n        // Loop over all rooms and run the spawn for each one\r\n        for (const room of ownedRooms) {\r\n            this.runSpawnForRoom(room);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * run spawn ai for a specific room\r\n     * @param room the room we are running spawn for\r\n     */\r\n    public static runSpawnForRoom(room: Room): void {\r\n        const openSpawn: StructureSpawn | null = SpawnApi.getOpenSpawn(room);\r\n\r\n        // if we don't have an open spawn, return early\r\n        if (openSpawn === null) {\r\n            return;\r\n        }\r\n\r\n        // If we have a spawn, generate creep limits for the room\r\n        SpawnApi.setCreepLimits(room);\r\n\r\n        // add method to generate the over ride values from flags for the military creeps\r\n        const nextCreepRole: RoleConstant | null = SpawnApi.getNextCreep(room);\r\n\r\n        // If we are spawning a creep this tick, continue from here\r\n        if (nextCreepRole) {\r\n            const energyAvailable: number = room.energyAvailable;\r\n            const roomTier: TierConstant = SpawnApi.getTier(room, nextCreepRole);\r\n            const creepBody: BodyPartConstant[] = SpawnApi.generateCreepBody(roomTier, nextCreepRole);\r\n            const bodyEnergyCost: number = SpawnApi.getEnergyCostOfBody(creepBody);\r\n\r\n            // Check if we even have enough energy to even spawn this potential monstrosity\r\n            if (energyAvailable >= bodyEnergyCost) {\r\n                // Get all the information we will need to spawn the next creep\r\n                const roomState: RoomStateConstant = room.memory.roomState!;\r\n                const targetRoom: string = SpawnApi.getCreepTargetRoom(room, nextCreepRole);\r\n                const militarySquadOptions: StringMap = SpawnApi.generateSquadOptions(room, targetRoom, nextCreepRole);\r\n                const homeRoom: string = SpawnApi.getCreepHomeRoom(room, nextCreepRole, targetRoom);\r\n                const creepOptions: any = SpawnApi.generateCreepOptions(\r\n                    room,\r\n                    nextCreepRole,\r\n                    roomState,\r\n                    militarySquadOptions[\"squadSize\"],\r\n                    militarySquadOptions[\"squadUUID\"],\r\n                    militarySquadOptions[\"rallyLocation\"]\r\n                );\r\n\r\n                // Spawn the creep\r\n                SpawnApi.spawnNextCreep(room, creepBody, creepOptions, nextCreepRole, openSpawn, homeRoom, targetRoom);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   “sources” entry.  This value is prepended to the individual\n    //   entries in the “source” field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   “sourceRoot”, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n","/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n","// tslint:disable:no-conditional-assignment\r\nimport { SourceMapConsumer } from \"source-map\";\r\nimport UserException from \"./UserException\";\r\n\r\nexport class ErrorMapper {\r\n    // Cache consumer\r\n    private static _consumer?: SourceMapConsumer;\r\n\r\n    public static get consumer(): SourceMapConsumer {\r\n        if (this._consumer == null) {\r\n            this._consumer = new SourceMapConsumer(require(\"main.js.map\"));\r\n        }\r\n\r\n        return this._consumer;\r\n    }\r\n\r\n    // Cache previously mapped traces to improve performance\r\n    public static cache: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Generates a stack trace using a source map generate original symbol names.\r\n     *\r\n     * WARNING - EXTREMELY high CPU cost for first call after reset - >30 CPU! Use sparingly!\r\n     * (Consecutive calls after a reset are more reasonable, ~0.1 CPU/ea)\r\n     *\r\n     * @param {Error | string} error The error or original stack trace\r\n     * @returns {string} The source-mapped stack trace\r\n     */\r\n    public static sourceMappedStackTrace(error: Error | string): string {\r\n        const stack: string = error instanceof Error ? (error.stack as string) : error;\r\n        if (this.cache.hasOwnProperty(stack)) {\r\n            return this.cache[stack];\r\n        }\r\n\r\n        const re = /^\\s+at\\s+(.+?\\s+)?\\(?([0-z._\\-\\\\\\/]+):(\\d+):(\\d+)\\)?$/gm;\r\n        let match: RegExpExecArray | null;\r\n        let outStack = error.toString();\r\n\r\n        while ((match = re.exec(stack))) {\r\n            if (match[2] === \"main\") {\r\n                const pos = this.consumer.originalPositionFor({\r\n                    column: parseInt(match[4], 10),\r\n                    line: parseInt(match[3], 10)\r\n                });\r\n\r\n                if (pos.line != null) {\r\n                    if (pos.name) {\r\n                        outStack += `\\n    at ${pos.name} (${pos.source}:${pos.line}:${pos.column})`;\r\n                    } else {\r\n                        if (match[1]) {\r\n                            // no original source file name known - use file name from given trace\r\n                            outStack += `\\n    at ${match[1]} (${pos.source}:${pos.line}:${pos.column})`;\r\n                        } else {\r\n                            // no original source file name known or in given trace - omit name\r\n                            outStack += `\\n    at ${pos.source}:${pos.line}:${pos.column}`;\r\n                        }\r\n                    }\r\n                } else {\r\n                    // no known position\r\n                    break;\r\n                }\r\n            } else {\r\n                // no more parseable lines\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.cache[stack] = outStack;\r\n        return outStack;\r\n    }\r\n\r\n    public static wrapLoop(loop: () => void): () => void {\r\n        return () => {\r\n            try {\r\n                loop();\r\n            } catch (e) {\r\n                // * if this causes an error later on, remove the first if statement and change else if to 'if'\r\n                if (e instanceof UserException) {\r\n                    console.log('<font color=\"' + e.titleColor + '\">' + e.title + \"</font>\");\r\n                    console.log('<font color=\"' + e.bodyColor + '\">' + e.body + \"</font>\");\r\n                } else if (e instanceof Error) {\r\n                    if (\"sim\" in Game.rooms) {\r\n                        const message = `Source maps don't work in the simulator - displaying original error`;\r\n                        console.log(`<span style='color:red'>${message}<br>${_.escape(e.stack)}</span>`);\r\n                    } else {\r\n                        console.log(`<span style='color:red'>${_.escape(this.sourceMappedStackTrace(e))}</span>`);\r\n                    }\r\n                } else {\r\n                    // can't handle it\r\n                    throw e;\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n","import UserException from \"utils/UserException\";\r\n\r\nexport default class UtilHelper {\r\n    /**\r\n     * Display an error to the console\r\n     * @param e Either a UserException or an Error\r\n     */\r\n    public static printError(\r\n        e: UserException | Error\r\n    ): void {\r\n        if (e instanceof UserException) {\r\n            console.log('<font color=\"' + e.titleColor + '\">' + e.title + \"</font>\");\r\n            console.log('<font color=\"' + e.bodyColor + '\">' + e.body + \"</font>\");\r\n        }\r\n        else {\r\n            console.log(\"Unexpected error, see the details below: \");\r\n            console.log(e.stack);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    ROOM_STATE_INTRO,\r\n    ROOM_STATE_BEGINNER,\r\n    ROOM_STATE_INTER,\r\n    ROOM_STATE_ADVANCED,\r\n    ROOM_STATE_NUKE_INBOUND,\r\n    ROOM_STATE_SEIGE,\r\n    ROOM_STATE_STIMULATE,\r\n    ROOM_STATE_UPGRADER,\r\n    STANDARD_SQUAD,\r\n    ZEALOT_SOLO,\r\n    STALKER_SOLO\r\n} from \"utils/constants\";\r\nimport RoomHelper from \"Helpers/RoomHelper\";\r\n\r\nconst textColor = '#bab8ba';\r\nconst textSize = .8;\r\nconst charHeight = textSize * 1.1;\r\n\r\n// Helper for room visuals\r\nexport default class RoomVisualManager {\r\n\r\n    /**\r\n     * display m\r\n     * @param lines the array of text we want to display\r\n     * @param x the x value we are starting it at\r\n     * @param y the y value we are starting it at\r\n     * @param roomName the room name its going in\r\n     * @param isLeft if we are left aligning\r\n     */\r\n    public static multiLineText(lines: string[], x: number, y: number, roomName: string, isLeft: boolean): void {\r\n        if (lines.length === 0) {\r\n            return;\r\n        }\r\n        const vis = new RoomVisual(roomName);\r\n\r\n        // Draw text\r\n        let dy = 0;\r\n        for (const line of lines) {\r\n\r\n            if (isLeft) {\r\n                vis.text(line, x, y + dy, {\r\n                    align: 'left',\r\n                    color: textColor,\r\n                    opacity: .8,\r\n                    font: ' .7 Trebuchet MS'\r\n                });\r\n            }\r\n            else {\r\n                vis.text(line, x, y + dy, {\r\n                    align: 'right',\r\n                    color: textColor,\r\n                    opacity: .8,\r\n                    font: ' .7 Trebuchet MS'\r\n                });\r\n            }\r\n\r\n            dy += charHeight;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * take the room state we are given and return the name of that room state\r\n     * @param roomState the room state we are getting the string for\r\n     */\r\n    public static convertRoomStateToString(roomState: RoomStateConstant): string {\r\n\r\n        switch (roomState) {\r\n            case ROOM_STATE_INTRO:\r\n                return \"Intro\";\r\n            case ROOM_STATE_BEGINNER:\r\n                return \"Beginner\";\r\n            case ROOM_STATE_INTER:\r\n                return \"Intermediate\";\r\n            case ROOM_STATE_ADVANCED:\r\n                return \"Advanced\";\r\n            case ROOM_STATE_NUKE_INBOUND:\r\n                return \"Nuke Incoming!\";\r\n            case ROOM_STATE_SEIGE:\r\n                return \"Seige!\";\r\n            case ROOM_STATE_STIMULATE:\r\n                return \"Stimulate\";\r\n            case ROOM_STATE_UPGRADER:\r\n                return \"Upgrader\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * take the flag type we are given and return the string name of that flag type\r\n     * @param flagType the type of flag we are getting the string for\r\n     */\r\n    public static convertFlagTypeToString(flagType: FlagTypeConstant | undefined): string {\r\n        switch (flagType) {\r\n            case STANDARD_SQUAD:\r\n                return \"Standard Squad\";\r\n            case STALKER_SOLO:\r\n                return \"Stalker Solo\";\r\n            case ZEALOT_SOLO:\r\n                return \"Zealot Solo\";\r\n            default:\r\n                return \"Not An Attack Flag\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the amount of seconds in each tick (estimate)\r\n     */\r\n    public static getSecondsPerTick(): number {\r\n        const TIME_BETWEEN_CHECKS: number = 50;\r\n        if (!Memory.visual) {\r\n            Memory.visual = {\r\n                time: Date.now(),\r\n                secondsPerTick: 0,\r\n                controllerProgressArray: [],\r\n                avgControlPointsPerHourArray: []\r\n\r\n            } as VisualMemory;\r\n        }\r\n\r\n        // Every 50 ticks, update the time and find the new seconds per tick\r\n        if (RoomHelper.excecuteEveryTicks(TIME_BETWEEN_CHECKS)) {\r\n            const updatedTime: number = Date.now();\r\n            const oldTime: number = Memory.visual.time;\r\n            const avgTimePerTick = ((updatedTime - oldTime) / TIME_BETWEEN_CHECKS) / 1000;\r\n            Memory.visual.time = updatedTime;\r\n            Memory.visual.secondsPerTick = Math.floor(avgTimePerTick * 10) / 10;\r\n        }\r\n        return Memory.visual.secondsPerTick;\r\n    }\r\n\r\n    /**\r\n     * get the average controller progress over the last specified ticks\r\n     * @param ticks the number of ticks we are wanting to collect\r\n     * @param room the room we are getting the CPPT for\r\n     */\r\n    public static getAverageControlPointsPerTick(ticks: number, room: Room): number {\r\n        if (!Memory.visual || !Memory.visual.controllerProgressArray) {\r\n            Memory.visual = {\r\n                time: Date.now(),\r\n                secondsPerTick: 0,\r\n                controllerProgressArray: [],\r\n                avgControlPointsPerHourArray: []\r\n            } as VisualMemory;\r\n        }\r\n\r\n        const progressSampleSize: number = Memory.visual.controllerProgressArray.length;\r\n        const newControllerProgress: number = room.controller!.progress;\r\n        let progressSum: number = 0;\r\n\r\n        if (progressSampleSize < ticks) {\r\n            // Add this ticks value to the array if it isn't already too large\r\n            Memory.visual.controllerProgressArray.push(newControllerProgress);\r\n        }\r\n        else {\r\n            // Move everything left, then add new value to end\r\n            for (let j = 0; j < progressSampleSize; ++j) {\r\n                Memory.visual.controllerProgressArray[j] = Memory.visual.controllerProgressArray[j + 1];\r\n            }\r\n            Memory.visual.controllerProgressArray[progressSampleSize - 1] = newControllerProgress;\r\n        }\r\n\r\n        // Get the average control points per tick\r\n        for (let i = 0; i < progressSampleSize - 1; ++i) {\r\n            progressSum += (Memory.visual.controllerProgressArray[i + 1] - Memory.visual.controllerProgressArray[i]);\r\n        }\r\n\r\n        return Math.floor(progressSum / progressSampleSize);\r\n    }\r\n\r\n    /**\r\n     * converts the value into something shorter so it can be displayed by the graph\r\n     * ex converts 22,000 -> 22k\r\n     * @param rangeVal the value we are converting\r\n     */\r\n    public static convertRangeToDisplayVal(rangeVal: number): string | number {\r\n        return rangeVal > 999 ? (rangeVal / 1000).toFixed(1) + 'k' : rangeVal;\r\n    }\r\n\r\n    /**\r\n     * gets the estimated time in days, hours, minutes to the next rcl based on current average\r\n     * @param room the room we are gettign this value for\r\n     */\r\n    public static getEstimatedTimeToNextLevel(room: Room): string {\r\n        return \"\";\r\n    }\r\n}\r\n","import RoomVisualHelper from \"./RoomVisualHelper\";\r\nimport MemoryApi from \"Api/Memory.Api\";\r\nimport {\r\n    ROLE_MINER,\r\n    ROLE_CLAIMER,\r\n    ROLE_COLONIZER,\r\n    ROLE_HARVESTER,\r\n    ROLE_LORRY,\r\n    ROLE_REMOTE_HARVESTER,\r\n    ROLE_REMOTE_MINER,\r\n    ROLE_REMOTE_RESERVER,\r\n    ROLE_WORKER,\r\n    ROLE_POWER_UPGRADER,\r\n    OVERRIDE_D_ROOM_FLAG,\r\n    STIMULATE_FLAG\r\n} from \"utils/constants\";\r\nimport { ROOM_OVERLAY_GRAPH_ON } from \"utils/config\";\r\n\r\n// Api for room visuals\r\nexport default class RoomVisualApi {\r\n\r\n    /**\r\n     * draws the information that is empire wide (will be same for every room)\r\n     * @param room the room we are displaying it in\r\n     * @param x the x coord for the visual\r\n     * @param y the y coord for the visual\r\n     */\r\n    public static createEmpireInfoVisual(room: Room, x: number, y: number): number {\r\n\r\n        // Get all the information we will need to display in the box\r\n        const usedCpu: number = Game.cpu.getUsed();\r\n        const cpuLimit: number = Game.cpu['limit'];\r\n        const bucket: number = Game.cpu['bucket'];\r\n        const BUCKET_LIMIT: number = 10000;\r\n        const gclProgress: number = Game.gcl['progress'];\r\n        const gclTotal: number = Game.gcl['progressTotal'];\r\n\r\n        const cpuPercent = Math.floor((usedCpu / cpuLimit * 100) * 10) / 10;\r\n        const bucketPercent = Math.floor((bucket / BUCKET_LIMIT * 100) * 10) / 10;\r\n        const gclPercent = Math.floor((gclProgress / gclTotal * 100) * 10) / 10;\r\n\r\n        // Draw the text\r\n        const lines: string[] = [];\r\n        lines.push(\"\");\r\n        lines.push(\"Empire Info\")\r\n        lines.push(\"\");\r\n        lines.push(\"CPU:   \" + cpuPercent + \"%\");\r\n        lines.push(\"BKT:   \" + bucketPercent + \"%\");\r\n        lines.push(\"GCL:   \" + gclPercent + \"%\");\r\n        lines.push(\"LVL:    \" + Game.gcl['level']);\r\n        lines.push(\"\");\r\n        lines.push(\"Viewing:  [ \" + room.name + \" ]\");\r\n        RoomVisualHelper.multiLineText(lines, x, y, room.name, true);\r\n\r\n        // Draw a box around the text\r\n        new RoomVisual(room.name)\r\n            .line(x - 1, y + lines.length - 1, x + 7.5, y + lines.length - 1)    // bottom line\r\n            .line(x - 1, y - 1, x + 7.5, y - 1)                  // top line\r\n            .line(x - 1, y - 1, x - 1, y + lines.length - 1)   // left line\r\n            .line(x + 7.5, y - 1, x + 7.5, y + lines.length - 1);  // right line\r\n\r\n        // Return where the next box should start\r\n        return y + lines.length;\r\n    }\r\n\r\n    /**\r\n     * draws the information of creep limits and currently living members\r\n     * @param room the room we are displaying it in\r\n     * @param x the x coord for the visual\r\n     * @param y the y coord for the visual\r\n     */\r\n    public static createCreepCountVisual(room: Room, x: number, y: number): number {\r\n\r\n        // Get the info we need to display\r\n        const creepsInRoom = MemoryApi.getMyCreeps(room.name);\r\n        const creepLimits = MemoryApi.getCreepLimits(room);\r\n        const roles: StringMap = {\r\n            miner: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_MINER).length,\r\n            harvester: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_HARVESTER).length,\r\n            worker: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_WORKER).length,\r\n            lorry: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_LORRY).length,\r\n            powerUpgrader: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_POWER_UPGRADER).length,\r\n            remoteMiner: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_REMOTE_MINER).length,\r\n            remoteReserver: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_REMOTE_RESERVER).length,\r\n            remoteHarvester: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_REMOTE_HARVESTER).length,\r\n            claimer: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_CLAIMER).length,\r\n            colonizer: _.filter(creepsInRoom, (c: Creep) => c.memory.role === ROLE_COLONIZER).length\r\n        };\r\n        const spawningCreep: Creep[] = _.filter(MemoryApi.getMyCreeps(room.name), (c: Creep) => c.spawning);\r\n        let spawningRole: string;\r\n        const lines: string[] = [];\r\n        lines.push(\"\");\r\n        lines.push(\"Creep Info\");\r\n        lines.push(\"\");\r\n        if (spawningCreep.length === 0) {\r\n            lines.push(\"Spawning:       \" + \"None\");\r\n        }\r\n        for (const creep of spawningCreep) {\r\n            spawningRole = creep.memory.role;\r\n            lines.push(\"Spawning:       \" + spawningRole);\r\n        }\r\n        lines.push(\"Creeps in Room:     \" + MemoryApi.getCreepCount(room));\r\n\r\n        if (creepLimits['domesticLimits']) {\r\n\r\n            // Add creeps to the lines array\r\n            if (creepLimits.domesticLimits.miner > 0) {\r\n                lines.push(\"Miners:     \" + roles[ROLE_MINER] + \" / \" + creepLimits.domesticLimits.miner);\r\n            }\r\n            if (creepLimits.domesticLimits.harvester > 0) {\r\n                lines.push(\"Harvesters:     \" + roles[ROLE_HARVESTER] + \" / \" + creepLimits.domesticLimits.harvester);\r\n            }\r\n            if (creepLimits.domesticLimits.worker > 0) {\r\n                lines.push(\"Workers:     \" + roles[ROLE_WORKER] + \" / \" + creepLimits.domesticLimits.worker);\r\n            }\r\n            if (creepLimits.domesticLimits.lorry > 0) {\r\n                lines.push(\"Lorries:    \" + roles[ROLE_LORRY] + \" / \" + creepLimits.domesticLimits.lorry);\r\n            }\r\n            if (creepLimits.domesticLimits.powerUpgrader > 0) {\r\n                lines.push(\"Power Upgraders:    \" + roles[ROLE_POWER_UPGRADER] + \" / \" + creepLimits.domesticLimits.powerUpgrader);\r\n            }\r\n        }\r\n\r\n        if (creepLimits['remoteLimits']) {\r\n\r\n            if (creepLimits.remoteLimits.remoteMiner > 0) {\r\n                lines.push(\"Remote Miners:      \" + roles[ROLE_REMOTE_MINER] + \" / \" + creepLimits.remoteLimits.remoteMiner);\r\n            }\r\n            if (creepLimits.remoteLimits.remoteHarvester > 0) {\r\n                lines.push(\"Remote Harvesters:    \" + roles[ROLE_REMOTE_HARVESTER] + \" / \" + creepLimits.remoteLimits.remoteHarvester);\r\n            }\r\n            if (creepLimits.remoteLimits.remoteReserver > 0) {\r\n                lines.push(\"Remote Reservers:    \" + roles[ROLE_REMOTE_RESERVER] + \" / \" + creepLimits.remoteLimits.remoteReserver);\r\n            }\r\n            if (creepLimits.remoteLimits.remoteColonizer > 0) {\r\n                lines.push(\"Remote Colonizers:    \" + roles[ROLE_COLONIZER] + \" / \" + creepLimits.remoteLimits.remoteColonizer);\r\n            }\r\n            if (creepLimits.remoteLimits.claimer > 0) {\r\n                lines.push(\"Claimers:       \" + roles[ROLE_CLAIMER] + \" / \" + creepLimits.remoteLimits.claimer);\r\n            }\r\n        }\r\n\r\n        lines.push(\"\");\r\n        RoomVisualHelper.multiLineText(lines, x, y, room.name, true);\r\n\r\n        // Draw a box around the text\r\n        new RoomVisual(room.name)\r\n            .line(x - 1, y + lines.length - 1, x + 10, y + lines.length - 1)    // bottom line\r\n            .line(x - 1, y - 1, x + 10, y - 1)                  // top line\r\n            .line(x - 1, y - 1, x - 1, y + lines.length - 1)   // left line\r\n            .line(x + 10, y - 1, x + 10, y + lines.length - 1);  // right line\r\n\r\n        // Return the end of this box\r\n        return y + lines.length;\r\n    }\r\n\r\n    /**\r\n     * draws the information of the room state\r\n     * @param room the room we are displaying it in\r\n     * @param x the x coord for the visual\r\n     * @param y the y coord for the visual\r\n     */\r\n    public static createRoomInfoVisual(room: Room, x: number, y: number): number {\r\n\r\n        // Get the info we need\r\n        const roomState: string = RoomVisualHelper.convertRoomStateToString(room.memory.roomState!);\r\n        const level: number = room.controller!.level;\r\n        const controllerProgress: number = room.controller!.progress;\r\n        const controllerTotal: number = room.controller!.progressTotal;\r\n        const controllerPercent: number = Math.floor((controllerProgress / controllerTotal * 100) * 10) / 10;\r\n        const defconLevel: number = room.memory.defcon;\r\n\r\n        // Draw the text\r\n        const lines: string[] = [];\r\n        lines.push(\"\");\r\n        lines.push(\"Room Info\");\r\n        lines.push(\"\");\r\n        lines.push(\"Room State:     \" + roomState);\r\n        lines.push(\"Room Level:     \" + level);\r\n        lines.push(\"Progress:         \" + controllerPercent + \"%\");\r\n        lines.push(\"DEFCON:         \" + defconLevel);\r\n        if (room.storage) {\r\n            lines.push(\"Storage:        \" + room.storage.store.energy.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));\r\n        }\r\n        // Adding this disclaimer, beacuse some of the information you need is actually calculated in the graph function\r\n        // Consider decoupling these so you could use them independently\r\n        if (ROOM_OVERLAY_GRAPH_ON) {\r\n            lines.push(\"Est TTL:        \" + RoomVisualHelper.getEstimatedTimeToNextLevel(room));\r\n        }\r\n        lines.push(\"\");\r\n        RoomVisualHelper.multiLineText(lines, x, y, room.name, true);\r\n\r\n        // Draw a box around the text\r\n        new RoomVisual(room.name)\r\n            .line(x - 1, y + lines.length - 1, x + 10, y + lines.length - 1)    // bottom line\r\n            .line(x - 1, y - 1, x + 10, y - 1)                  // top line\r\n            .line(x - 1, y - 1, x - 1, y + lines.length - 1)   // left line\r\n            .line(x + 10, y - 1, x + 10, y + lines.length - 1);  // right line\r\n\r\n        // Return where the next box should start\r\n        return y + lines.length;\r\n    }\r\n\r\n    /**\r\n     * draws the information for remote flags\r\n     * @param room the room we are displaying it in\r\n     * @param x the x coord for the visual\r\n     * @param y the y coord for the visual\r\n     */\r\n    public static createRemoteFlagVisual(room: Room, x: number, y: number): number {\r\n\r\n        const dependentRemoteRooms: Array<RemoteRoomMemory | undefined> = MemoryApi.getRemoteRooms(room);\r\n\r\n        // Draw the text\r\n        const lines: string[] = [];\r\n        lines.push(\"\");\r\n        lines.push(\"Remote Rooms \")\r\n        lines.push(\"\");\r\n        for (const dr of dependentRemoteRooms) {\r\n            if (!dr) {\r\n                continue;\r\n            }\r\n\r\n            lines.push(\"Room:   [ \" + dr!.roomName + \" ] \");\r\n            lines.push(\"Flag:   [ \" + dr!.flags[0].flagName + \" ] \");\r\n            lines.push(\"\");\r\n        }\r\n\r\n        // If no remote rooms, print none\r\n        if (lines.length === 3) {\r\n            lines.push(\"No Current Remote Rooms \");\r\n            lines.push(\"\");\r\n        }\r\n        RoomVisualHelper.multiLineText(lines, x, y, room.name, false);\r\n\r\n        // Draw the box around the text\r\n        // Draw a box around the text\r\n        new RoomVisual(room.name)\r\n            .line(x - 10, y + lines.length - 1, x + .25, y + lines.length - 1)    // bottom line\r\n            .line(x - 10, y - 1, x + .25, y - 1)                  // top line\r\n            .line(x - 10, y - 1, x - 10, y + lines.length - 1)   // left line\r\n            .line(x + .25, y - 1, x + .25, y + lines.length - 1);  // right line\r\n\r\n        // Return where the next box should start\r\n        return y + lines.length;\r\n    }\r\n\r\n    /**\r\n     * draws the information for claim flags\r\n     * @param room the room we are displaying it in\r\n     * @param x the x coord for the visual\r\n     * @param y the y coord for the visual\r\n     */\r\n    public static createClaimFlagVisual(room: Room, x: number, y: number): number {\r\n\r\n        const dependentRemoteRooms: Array<ClaimRoomMemory | undefined> = MemoryApi.getClaimRooms(room);\r\n\r\n        // Draw the text\r\n        const lines: string[] = [];\r\n        lines.push(\"\");\r\n        lines.push(\"Claim Rooms \")\r\n        lines.push(\"\");\r\n        for (const dr of dependentRemoteRooms) {\r\n            if (!dr) {\r\n                continue;\r\n            }\r\n\r\n            lines.push(\"Room:   [ \" + dr!.roomName + \" ] \");\r\n            lines.push(\"Flag:   [ \" + dr!.flags[0].flagName + \" ] \");\r\n            lines.push(\"\");\r\n        }\r\n\r\n        // If no remote rooms, print none\r\n        if (lines.length === 3) {\r\n            lines.push(\"No Current Claim Rooms \");\r\n            lines.push(\"\");\r\n        }\r\n        RoomVisualHelper.multiLineText(lines, x, y, room.name, false);\r\n\r\n        // Draw the box around the text\r\n        // Draw a box around the text\r\n        new RoomVisual(room.name)\r\n            .line(x - 10, y + lines.length - 1, x + .25, y + lines.length - 1)    // bottom line\r\n            .line(x - 10, y - 1, x + .25, y - 1)                  // top line\r\n            .line(x - 10, y - 1, x - 10, y + lines.length - 1)   // left line\r\n            .line(x + .25, y - 1, x + .25, y + lines.length - 1);  // right line\r\n\r\n        // Return where the next box should start\r\n        return y + lines.length;\r\n    }\r\n\r\n    /**\r\n     * draws the information for attack flags\r\n     * @param room the room we are displaying it in\r\n     * @param x the x coord for the visual\r\n     * @param y the y coord for the visual\r\n     */\r\n    public static createAttackFlagVisual(room: Room, x: number, y: number): number {\r\n\r\n        const dependentRemoteRooms: Array<AttackRoomMemory | undefined> = MemoryApi.getAttackRooms(room);\r\n        // Draw the text\r\n        const lines: string[] = [];\r\n        lines.push(\"\");\r\n        lines.push(\"Attack Rooms \")\r\n        lines.push(\"\");\r\n        for (const dr of dependentRemoteRooms) {\r\n            if (!dr) {\r\n                continue;\r\n            }\r\n\r\n            lines.push(\"Room:   [ \" + dr!.roomName + \" ] \");\r\n            for (const flag of dr!.flags) {\r\n                if (!flag) {\r\n                    continue;\r\n                }\r\n                lines.push(\"Flag:   [ \" + flag.flagName + \" ] \");\r\n                lines.push(\"Type:   [ \" + RoomVisualHelper.convertFlagTypeToString(flag.flagType) + \" ]\");\r\n            }\r\n            lines.push(\"\");\r\n        }\r\n\r\n        // If no remote rooms, print none\r\n        if (lines.length === 3) {\r\n            lines.push(\"No Current Attack Rooms \");\r\n            lines.push(\"\");\r\n        }\r\n        RoomVisualHelper.multiLineText(lines, x, y, room.name, false);\r\n\r\n        // Draw the box around the text\r\n        // Draw a box around the text\r\n        new RoomVisual(room.name)\r\n            .line(x - 10, y + lines.length - 1, x + .25, y + lines.length - 1)    // bottom line\r\n            .line(x - 10, y - 1, x + .25, y - 1)                  // top line\r\n            .line(x - 10, y - 1, x - 10, y + lines.length - 1)   // left line\r\n            .line(x + .25, y - 1, x + .25, y + lines.length - 1);  // right line\r\n\r\n        // Return where the next box should start\r\n        return y + lines.length;\r\n    }\r\n\r\n    /**\r\n     * draws the information for option flags\r\n     * @param room the room we are displaying it in\r\n     * @param x the x coord for the visual\r\n     * @param y the y coord for the visual\r\n     */\r\n    public static createOptionFlagVisual(room: Room, x: number, y: number): number {\r\n\r\n        const optionFlags = _.filter(Memory.flags, (flag: FlagMemory) =>\r\n            flag.flagType ===\r\n            (OVERRIDE_D_ROOM_FLAG || STIMULATE_FLAG) &&\r\n            (Game.flags[flag.flagName].pos.roomName === room.name)\r\n        );\r\n\r\n        // Draw the text\r\n        const lines: string[] = [];\r\n        lines.push(\"\");\r\n        lines.push(\"Option Flags \")\r\n        lines.push(\"\");\r\n        for (const of of optionFlags) {\r\n            if (!of) {\r\n                continue;\r\n            }\r\n\r\n            lines.push(\"Flag:   [ \" + of.flagName + \" ] \");\r\n            lines.push(\"Type:   [ \" + of.flagType + \" ] \");\r\n            lines.push(\"\");\r\n        }\r\n\r\n        // If no remote rooms, print none\r\n        if (lines.length === 3) {\r\n            lines.push(\"No Current Option Flags \");\r\n            lines.push(\"\");\r\n        }\r\n        RoomVisualHelper.multiLineText(lines, x, y, room.name, false);\r\n\r\n        // Draw the box around the text\r\n        new RoomVisual(room.name)\r\n            .line(x - 10, y + lines.length - 1, x + .25, y + lines.length - 1)    // bottom line\r\n            .line(x - 10, y - 1, x + .25, y - 1)                  // top line\r\n            .line(x - 10, y - 1, x - 10, y + lines.length - 1)   // left line\r\n            .line(x + .25, y - 1, x + .25, y + lines.length - 1);  // right line\r\n\r\n        // Return where the next box should start\r\n        return y + lines.length;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param room the room we are creating the visual for\r\n     * @param x the x value for the starting point of the graph\r\n     * @param y the y value for the starting point of the graph\r\n     */\r\n    public static createUpgradeGraphVisual(room: Room, x: number, y: number): void {\r\n\r\n        const textColor = '#bab8ba';\r\n        const X_VALS: GraphTickMarkMemory[] = [\r\n            { 'start': x, 'end': x + 3 },       // 0\r\n            { 'start': x + 3, 'end': x + 6 },   // 1\r\n            { 'start': x + 6, 'end': x + 9 },   // 2\r\n            { 'start': x + 9, 'end': x + 12 },  // 3\r\n            { 'start': x + 12, 'end': x + 15 }, // 4\r\n        ];\r\n        const Y_SCALE = 7.5;\r\n        const X_SCALE = 15;\r\n        const secondsPerTick: number = RoomVisualHelper.getSecondsPerTick();\r\n        const ticksPerHour: number = Math.floor(3600 / secondsPerTick);\r\n        const avgControlPointsPerTick: number = RoomVisualHelper.getAverageControlPointsPerTick(25, room);\r\n        const controlPointsPerHourEstimate: number = avgControlPointsPerTick * ticksPerHour;\r\n\r\n        // Update the control points per hour estimate array\r\n        if (!Memory.visual!.avgControlPointsPerHourArray) {\r\n            Memory.visual!.avgControlPointsPerHourArray = [];\r\n        }\r\n        const avgControlPointsPerHourSize: number = Memory.visual.avgControlPointsPerHourArray.length;\r\n        if (avgControlPointsPerHourSize < 5) {\r\n            Memory.visual.avgControlPointsPerHourArray.push(controlPointsPerHourEstimate);\r\n        }\r\n        else {\r\n            for (let i = 0; i < avgControlPointsPerHourSize - 1; ++i) {\r\n                Memory.visual.avgControlPointsPerHourArray[i] = Memory.visual.avgControlPointsPerHourArray[i + 1]\r\n            }\r\n            Memory.visual.avgControlPointsPerHourArray[avgControlPointsPerHourSize - 1] = controlPointsPerHourEstimate;\r\n        }\r\n\r\n        // Collect values and functions needed to draw the lines on the graph\r\n        const minVal: number = _.min(Memory.visual.avgControlPointsPerHourArray);\r\n        const maxVal: number = _.max(Memory.visual.avgControlPointsPerHourArray);\r\n        const minRange: number = minVal * .75;\r\n        const maxRange: number = maxVal * 1.25;\r\n        const getY2Coord = (raw: number) => {\r\n            const range: number = maxRange - minRange;\r\n            const offset: number = raw - minRange;\r\n            const percentage: number = offset / range;\r\n            return percentage * Y_SCALE;\r\n        };\r\n\r\n        // Get the scale for the graph\r\n        const displayMinRange: string = RoomVisualHelper.convertRangeToDisplayVal(minRange).toString();\r\n        const displayMaxRange: string = RoomVisualHelper.convertRangeToDisplayVal(maxRange).toString();\r\n\r\n        // Draw the graph outline and the scale text\r\n        new RoomVisual(room.name)\r\n            .line(x, y, x, y - Y_SCALE)    // bottom line\r\n            .line(x, y, x + X_SCALE, y)   // left line\r\n            .line(X_VALS[1].start, y - .25, X_VALS[1].start, y + .25) // tick marks\r\n            .line(X_VALS[2].start, y - .25, X_VALS[2].start, y + .25)\r\n            .line(X_VALS[3].start, y - .25, X_VALS[3].start, y + .25)\r\n            .line(X_VALS[4].start, y - .25, X_VALS[4].start, y + .25)\r\n            .text(displayMaxRange, x - 2.2, y - Y_SCALE + .5, {\r\n                align: 'left',\r\n                color: textColor,\r\n                opacity: .8,\r\n                font: ' .7 Trebuchet MS'\r\n            })\r\n            .text(displayMinRange, x - 2.2, y, {\r\n                align: 'left',\r\n                color: textColor,\r\n                opacity: .8,\r\n                font: ' .7 Trebuchet MS'\r\n            });\r\n\r\n        // Draw the lines for the graph\r\n        let startCoord: number = 0;\r\n        let endCoord: number = 0;\r\n        for (let i = 0; i < avgControlPointsPerHourSize; ++i) {\r\n            // Set the initial previous and next coordinate (first line will always be flat)\r\n            if (i === 0) {\r\n                startCoord = getY2Coord(Memory.visual.avgControlPointsPerHourArray[i]);\r\n                endCoord = startCoord;\r\n            }\r\n            endCoord = getY2Coord(Memory.visual.avgControlPointsPerHourArray[i]);\r\n            new RoomVisual(room.name)\r\n                .line(X_VALS[i].start, y - startCoord, X_VALS[i].end, y - endCoord)\r\n                .circle(X_VALS[i].end, y - endCoord);\r\n\r\n            startCoord = endCoord;\r\n        }\r\n    }\r\n}\r\n","import MemoryApi from \"../../Api/Memory.Api\";\r\nimport RoomVisualApi from \"./RoomVisual.Api\";\r\nimport {\r\n    ROOM_OVERLAY_GRAPH_ON\r\n} from \"utils/config\";\r\n\r\n// Manager for room visuals\r\nexport default class RoomVisualManager {\r\n\r\n    /**\r\n     * FUTURE PLANS FOR THIS MANAGER\r\n     *\r\n     * Create progreess bars for all the percentages\r\n     * Place more ideas here --\r\n     */\r\n    /**\r\n     * run the manager for each room\r\n     */\r\n    public static runRoomVisualManager(): void {\r\n\r\n        const ownedRooms = MemoryApi.getOwnedRooms();\r\n\r\n        _.forEach(ownedRooms,\r\n            (room: Room) => this.runSingleRoomVisualManager(room)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * run the manager for a single room\r\n     * @param room the room we want to run the room visual for\r\n     */\r\n    public static runSingleRoomVisualManager(room: Room): void {\r\n\r\n        let endLeftLine: number = 1;\r\n        let endRightLine: number = 1;\r\n        const LEFT_START_X = 1;\r\n        const RIGHT_START_X = 48;\r\n\r\n        // Left Side -----\r\n        // Display the Empire box in the top left\r\n        endLeftLine = RoomVisualApi.createEmpireInfoVisual(room, LEFT_START_X, endLeftLine);\r\n        // Display the Creep Info box in middle left\r\n        endLeftLine = RoomVisualApi.createCreepCountVisual(room, LEFT_START_X, endLeftLine);\r\n        // Display the Room Info box in the bottom left\r\n        endLeftLine = RoomVisualApi.createRoomInfoVisual(room, LEFT_START_X, endLeftLine);\r\n\r\n        if (ROOM_OVERLAY_GRAPH_ON) {\r\n            RoomVisualApi.createUpgradeGraphVisual(room, LEFT_START_X + 1, 45);\r\n        }\r\n        // ------\r\n\r\n        // Right Side -----\r\n        // Display Remote Flag box on the top right\r\n        endRightLine = RoomVisualApi.createRemoteFlagVisual(room, RIGHT_START_X, endRightLine);\r\n        // Display Claim Flag Box on the upper middle right\r\n        endRightLine = RoomVisualApi.createClaimFlagVisual(room, RIGHT_START_X, endRightLine);\r\n        // Display Attack Flag Box on the lower middle right\r\n        endRightLine = RoomVisualApi.createAttackFlagVisual(room, RIGHT_START_X, endRightLine);\r\n        // Display Option Flag box on the bottom right\r\n        endRightLine = RoomVisualApi.createOptionFlagVisual(room, RIGHT_START_X, endRightLine);\r\n    }\r\n}\r\n","export default class Normalize {\r\n\r\n    /**\r\n     * Returns a mockup of a room object for a given roomname\r\n     * @param roomName\r\n     */\r\n    public static getMockRoomObject(roomName: string) {\r\n        const mockRoom: Room = new Room(roomName);\r\n        mockRoom.name = roomName;\r\n        mockRoom.visual.roomName = roomName;\r\n        mockRoom.memory = Memory.rooms[roomName];\r\n        mockRoom.energyAvailable = -1; // Unknown Value\r\n        mockRoom.energyCapacityAvailable = -1; // Unknown Value\r\n    }\r\n\r\n    /**\r\n     * Normalizes to a Room Name\r\n     * @param room The name of a room as a string, or the Room object\r\n     * @returns Room.name The name of the room object\r\n     */\r\n    public static roomName(room: Room | string): string {\r\n        if (room instanceof Room) {\r\n            room = room.name;\r\n        }\r\n        return <string>room;\r\n    }\r\n\r\n    /**\r\n     * Normalizes to a Room Object\r\n     * @param room\r\n     * @returns Room The Room Object\r\n     */\r\n    public static roomObject(room: Room | string): Room {\r\n        if (!(room instanceof Room)) {\r\n            room = Game.rooms[<string>room];\r\n        }\r\n        return <Room>room;\r\n    }\r\n\r\n    /**\r\n     * Normalizes to a RoomPosition object\r\n     * @param pos A RoomPosition object or an object with a pos property\r\n     */\r\n    public static roomPos(object: RoomPosition | _HasRoomPosition): RoomPosition {\r\n        if (object instanceof RoomPosition) {\r\n            return object;\r\n        }\r\n        return object.pos;\r\n    }\r\n\r\n    /**\r\n     * Normalizes to a creep object given an ID or Name\r\n     * @param creep\r\n     */\r\n    public static creepObject(creep: Creep | string): Creep {\r\n        if (creep instanceof Creep) {\r\n            return creep;\r\n        }\r\n        // If passed a name - Tested first since hash keys are faster than the Game.getObjectById function\r\n        let obj: Creep | null = Game.creeps[creep];\r\n        // If passed an ID instead of a name, use the slower getObjectById function\r\n        if (obj === undefined) {\r\n            obj = Game.getObjectById(creep);\r\n        }\r\n        // Risks returning null instead of a creep object, but I think that is outside the scope of a normalize method\r\n        return <Creep>obj;\r\n    }\r\n}\r\n","import { ERROR_WARN } from \"utils/constants\";\r\nimport UserException from \"utils/UserException\";\r\nimport MemoryApi from \"Api/Memory.Api\";\r\nimport { CONTROLLER_SIGNING_TEXT } from \"utils/config\";\r\nimport Normalize from \"./Normalize\";\r\n\r\n// helper function for creeps\r\nexport default class CreepHelper {\r\n    /**\r\n     * get the mining container for a specific job\r\n     * @param job the job we are getting the mining container from\r\n     * @param room the room we are checking in\r\n     */\r\n    public static getMiningContainer(job: GetEnergyJob | undefined, room: Room): StructureContainer | undefined {\r\n        if (!job) {\r\n            throw new UserException(\r\n                \"Job is undefined\",\r\n                \"Job is undefined for room \" + room.name + \". Can't get the mining container of an undefined job.\",\r\n                ERROR_WARN\r\n            );\r\n        }\r\n\r\n        const source: Source | null = Game.getObjectById(job.targetID);\r\n        if (!source) {\r\n            throw new UserException(\"Source null in getMiningContainer\", \"room: \" + room.name, ERROR_WARN);\r\n        }\r\n\r\n        // Get containers and find the closest one to the source\r\n        const containers: StructureContainer[] = MemoryApi.getStructureOfType(\r\n            room.name,\r\n            STRUCTURE_CONTAINER\r\n        ) as StructureContainer[];\r\n\r\n        const closestContainer = source.pos.findClosestByRange(containers);\r\n\r\n        if (!closestContainer) {\r\n            return undefined;\r\n        } else {\r\n            // If we have a container, but its not next to the source, its not the correct container\r\n            if (source.pos.isNearTo(closestContainer)) {\r\n                return closestContainer;\r\n            }\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the text to sign a controller with\r\n     */\r\n    public static getSigningText(): string {\r\n        // Find a random index in the array of messages and choose that\r\n        const MIN = 0;\r\n        const MAX = CONTROLLER_SIGNING_TEXT.length - 1;\r\n        const numberOfMessages: number = Math.floor(Math.random() * (+MAX - +MIN)) + +MIN;\r\n        return CONTROLLER_SIGNING_TEXT[numberOfMessages];\r\n    }\r\n\r\n    /**\r\n     * Check if the targetPosition is the destination of the creep's current move target\r\n     * @target The target object or roomposition to move to\r\n     * @range [Optional] The range to stop at from the target\r\n     */\r\n    public static isTargetCurrentDestination(creep: Creep, target: object, range = 0): boolean {\r\n        if (creep.memory._move === undefined) {\r\n            return false;\r\n        }\r\n\r\n        let targetPosition: RoomPosition;\r\n\r\n        if (target.hasOwnProperty(\"pos\") || target instanceof RoomPosition) {\r\n            targetPosition = Normalize.roomPos(target as _HasRoomPosition | RoomPosition);\r\n        } else {\r\n            throw new UserException(\r\n                \"Error in targetIsCurrentDestination\",\r\n                \"Creep [\" +\r\n                creep.name +\r\n                \"] tried to check if targetIsCurrentDestination on a target with no pos property. \\n Target: [\" +\r\n                JSON.stringify(target) +\r\n                \"]\",\r\n                ERROR_ERROR\r\n            );\r\n        }\r\n\r\n        const currentDestination = creep.memory._move.dest;\r\n\r\n        // Check if curr_dest = targetPosition\r\n        // TODO Change this so that it checks if it is in a variable range\r\n\r\n        if (currentDestination.roomName !== targetPosition.roomName) {\r\n            return false;\r\n        }\r\n\r\n        const distanceApart =\r\n            Math.abs(currentDestination.x - targetPosition.x) + Math.abs(currentDestination.y - targetPosition.y);\r\n        // Return true if distance from currentDestination to targetPosition is within the allowed range (default is 0, exact match)\r\n        return distanceApart <= range;\r\n    }\r\n\r\n    /**\r\n     * Gets creep.memory.supplementary.moveTargetID, or falls back to creep.memory.job.\r\n     */\r\n    public static getMoveTarget(creep: Creep, job: BaseJob): RoomObject | null {\r\n        // Get target to move to, using supplementary.moveTargetID if available, job.targetID if not.\r\n        if (creep.memory.supplementary && creep.memory.supplementary.moveTargetID) {\r\n            return Game.getObjectById(creep.memory.supplementary.moveTargetID);\r\n        } else {\r\n            return Game.getObjectById(job.targetID);\r\n        }\r\n    }\r\n}\r\n","import UserException from \"utils/UserException\";\r\nimport CreepHelper from \"Helpers/CreepHelper\";\r\nimport {\r\n    DEFAULT_MOVE_OPTS,\r\n    ERROR_ERROR,\r\n    ROOM_STATE_BEGINNER,\r\n    ROOM_STATE_INTRO,\r\n    ROLE_MINER,\r\n    ERROR_WARN\r\n} from \"utils/constants\";\r\n\r\n// Api for all types of creeps (more general stuff here)\r\nexport default class CreepApi {\r\n    /**\r\n     * Call the proper doWork function based on job.jobType\r\n     */\r\n    public static doWork(creep: Creep, job: BaseJob) {\r\n        switch (job.jobType) {\r\n            case \"getEnergyJob\":\r\n                this.doWork_GetEnergyJob(creep, job as GetEnergyJob);\r\n                break;\r\n            case \"carryPartJob\":\r\n                this.doWork_CarryPartJob(creep, job as CarryPartJob);\r\n                break;\r\n            case \"claimPartJob\":\r\n                this.doWork_ClaimPartJob(creep, job as ClaimPartJob);\r\n                break;\r\n            case \"workPartJob\":\r\n                this.doWork_WorkPartJob(creep, job as WorkPartJob);\r\n                break;\r\n            default:\r\n                throw new UserException(\r\n                    \"Bad job.jobType in CreepApi.doWork\",\r\n                    \"The jobtype of the job passed to CreepApi.doWork was invalid.\",\r\n                    ERROR_FATAL\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Call the proper travelTo function based on job.jobType\r\n     */\r\n    public static travelTo(creep: Creep, job: BaseJob) {\r\n        switch (job.jobType) {\r\n            case \"getEnergyJob\":\r\n                this.travelTo_GetEnergyJob(creep, job as GetEnergyJob);\r\n                break;\r\n            case \"carryPartJob\":\r\n                this.travelTo_CarryPartJob(creep, job as CarryPartJob);\r\n                break;\r\n            case \"claimPartJob\":\r\n                this.travelTo_ClaimPartJob(creep, job as ClaimPartJob);\r\n                break;\r\n            case \"workPartJob\":\r\n                this.travelTo_WorkPartJob(creep, job as WorkPartJob);\r\n                break;\r\n            default:\r\n                throw new UserException(\r\n                    \"Bad job.jobType in CreepApi.travelTo\",\r\n                    \"The jobtype of the job passed to CreepApi.travelTo was invalid\",\r\n                    ERROR_FATAL\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Do work on the target provided by claimPartJob\r\n     */\r\n    public static doWork_ClaimPartJob(creep: Creep, job: ClaimPartJob) {\r\n        const target = Game.getObjectById(job.targetID);\r\n        this.nullCheck_target(creep, target);\r\n\r\n        let deleteOnSuccess = true;\r\n\r\n        let returnCode: number;\r\n\r\n        if (job.actionType === \"claim\" && target instanceof StructureController) {\r\n            returnCode = creep.claimController(target);\r\n        } else if (job.actionType === \"reserve\" && target instanceof StructureController) {\r\n            returnCode = creep.reserveController(target);\r\n            deleteOnSuccess = false;\r\n        } else if (job.actionType === \"sign\" && target instanceof StructureController) {\r\n            returnCode = creep.signController(target, CreepHelper.getSigningText());\r\n        } else if (job.actionType === \"attack\" && target instanceof StructureController) {\r\n            returnCode = creep.attackController(target);\r\n            deleteOnSuccess = false;\r\n        } else {\r\n            throw this.badTarget_Error(creep, job);\r\n        }\r\n\r\n        // Can handle the return code here - e.g. display an error if we expect creep to be in range but it's not\r\n        switch (returnCode) {\r\n            case OK:\r\n                if (deleteOnSuccess) {\r\n                    delete creep.memory.job;\r\n                    creep.memory.working = false;\r\n                }\r\n                break;\r\n            case ERR_NOT_IN_RANGE:\r\n                creep.memory.working = false;\r\n                break;\r\n            case ERR_NOT_FOUND:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Do work on the target provided by carryPartJob\r\n     */\r\n    public static doWork_CarryPartJob(creep: Creep, job: CarryPartJob) {\r\n        let target;\r\n\r\n        target = Game.getObjectById(job.targetID);\r\n\r\n        this.nullCheck_target(creep, target);\r\n\r\n        let returnCode: number;\r\n        let deleteOnSuccess: boolean = false;\r\n\r\n        if (job.actionType === \"transfer\" && (target instanceof Structure || target instanceof Creep)) {\r\n            deleteOnSuccess = true;\r\n            returnCode = creep.transfer(target, RESOURCE_ENERGY);\r\n        } else {\r\n            throw this.badTarget_Error(creep, job);\r\n        }\r\n\r\n        // Can handle the return code here - e.g. display an error if we expect creep to be in range but it's not\r\n        switch (returnCode) {\r\n            case OK:\r\n                // If successful, delete the job from creep memory\r\n                if (deleteOnSuccess) {\r\n                    delete creep.memory.job;\r\n                    creep.memory.working = false;\r\n                }\r\n                break;\r\n            case ERR_NOT_IN_RANGE:\r\n                creep.memory.working = false;\r\n                break;\r\n            case ERR_NOT_FOUND:\r\n                break;\r\n            case ERR_NOT_ENOUGH_ENERGY:\r\n            case ERR_FULL:\r\n                delete creep.memory.job;\r\n                creep.memory.working = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Do work on the target provided by workPartJob\r\n     */\r\n    public static doWork_WorkPartJob(creep: Creep, job: WorkPartJob) {\r\n        const target = Game.getObjectById(job.targetID);\r\n\r\n        this.nullCheck_target(creep, target);\r\n\r\n        let returnCode: number;\r\n        let deleteOnSuccess: boolean = false;\r\n\r\n        if (job.actionType === \"build\" && target instanceof ConstructionSite) {\r\n            returnCode = creep.build(target);\r\n            if (!target || creep.carry.energy === 0) {\r\n                deleteOnSuccess = true;\r\n            }\r\n        } else if (job.actionType === \"repair\" && target instanceof Structure) {\r\n            returnCode = creep.repair(target);\r\n            if (target.hits === target.hitsMax || creep.carry.energy === 0) {\r\n                deleteOnSuccess = true;\r\n            }\r\n        } else if (job.actionType === \"upgrade\" && target instanceof StructureController) {\r\n            returnCode = creep.upgradeController(target);\r\n            if (creep.carry.energy === 0) {\r\n                deleteOnSuccess = true;\r\n            }\r\n        } else {\r\n            throw this.badTarget_Error(creep, job);\r\n        }\r\n\r\n        // Can handle the return code here - e.g. display an error if we expect creep to be in range but it's not\r\n        switch (returnCode) {\r\n            case OK:\r\n                // If successful and creep is empty, delete the job from creep memory\r\n                if (deleteOnSuccess) {\r\n                    delete creep.memory.job;\r\n                    creep.memory.working = false;\r\n                }\r\n                break;\r\n            case ERR_NOT_IN_RANGE:\r\n                creep.memory.working = false;\r\n                break;\r\n            case ERR_NOT_FOUND:\r\n                delete creep.memory.job;\r\n                creep.memory.working = false;\r\n                break;\r\n            default:\r\n                if (deleteOnSuccess) {\r\n                    delete creep.memory.job;\r\n                    creep.memory.working = false;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Do work on the target provided by a getEnergyJob\r\n     */\r\n    public static doWork_GetEnergyJob(creep: Creep, job: GetEnergyJob) {\r\n        const target = Game.getObjectById(job.targetID);\r\n\r\n        this.nullCheck_target(creep, target);\r\n\r\n        let returnCode: number;\r\n\r\n        if (job.actionType === \"harvest\" && (target instanceof Source || target instanceof Mineral)) {\r\n            returnCode = creep.harvest(target);\r\n        } else if (job.actionType === \"pickup\" && target instanceof Resource) {\r\n            returnCode = creep.pickup(target);\r\n        } else if (job.actionType === \"withdraw\" && target instanceof Structure) {\r\n            returnCode = creep.withdraw(target, RESOURCE_ENERGY);\r\n        } else {\r\n            throw this.badTarget_Error(creep, job);\r\n        }\r\n\r\n        // Can handle the return code here - e.g. display an error if we expect creep to be in range but it's not\r\n        switch (returnCode) {\r\n            case OK:\r\n                // If successful and not harvesting, delete the job from creep memory\r\n                // * If we run into not being able to stop harvesting minerals, my best solution is to seperate\r\n                // * the above \"instanceof Source | Mineral\" into two different if statements, and use a boolean to decide to delete when successful.\r\n                if (job.actionType !== \"harvest\") {\r\n                    delete creep.memory.job;\r\n                    creep.memory.working = false;\r\n                }\r\n                break;\r\n            case ERR_NOT_IN_RANGE:\r\n                creep.memory.working = false;\r\n                break;\r\n            case ERR_NOT_FOUND:\r\n                break;\r\n            case ERR_FULL:\r\n                delete creep.memory.job;\r\n                creep.memory.working = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Travel to the target provided by GetEnergyJob in creep.memory.job\r\n     */\r\n    public static travelTo_GetEnergyJob(creep: Creep, job: GetEnergyJob) {\r\n        const moveTarget = CreepHelper.getMoveTarget(creep, job);\r\n\r\n        this.nullCheck_target(creep, moveTarget);\r\n\r\n        // Move options target\r\n        const moveOpts: MoveToOpts = DEFAULT_MOVE_OPTS;\r\n\r\n        // In this case all actions are complete with a range of 1, but keeping for structure\r\n        if (job.actionType === \"harvest\" && (moveTarget instanceof Source || moveTarget instanceof Mineral)) {\r\n            moveOpts.range = 1;\r\n        } else if (job.actionType === \"harvest\" && moveTarget instanceof StructureContainer) {\r\n            moveOpts.range = 0;\r\n        } else if (job.actionType === \"withdraw\" && (moveTarget instanceof Structure || moveTarget instanceof Creep)) {\r\n            moveOpts.range = 1;\r\n        } else if (job.actionType === \"pickup\" && moveTarget instanceof Resource) {\r\n            moveOpts.range = 1;\r\n        }\r\n\r\n        if (creep.pos.getRangeTo(moveTarget!) <= moveOpts.range!) {\r\n            creep.memory.working = true;\r\n            return; // If we are in range to the target, then we do not need to move again, and next tick we will begin work\r\n        }\r\n\r\n        creep.moveTo(moveTarget!, moveOpts);\r\n    }\r\n\r\n    /**\r\n     * Travel to the target provided by CarryPartJob in creep.memory.job\r\n     */\r\n    public static travelTo_CarryPartJob(creep: Creep, job: CarryPartJob) {\r\n        const moveTarget = CreepHelper.getMoveTarget(creep, job);\r\n\r\n        this.nullCheck_target(creep, moveTarget);\r\n\r\n        // Move options for target\r\n        const moveOpts = DEFAULT_MOVE_OPTS;\r\n\r\n        if (job.actionType === \"transfer\" && (moveTarget instanceof Structure || moveTarget instanceof Creep)) {\r\n            moveOpts.range = 1;\r\n        } // else range = 0;\r\n\r\n        if (creep.pos.getRangeTo(moveTarget!) <= moveOpts.range!) {\r\n            creep.memory.working = true;\r\n            return;\r\n        }\r\n\r\n        creep.moveTo(moveTarget!, moveOpts);\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Travel to the target provided by ClaimPartJob in creep.memory.job\r\n     */\r\n    public static travelTo_ClaimPartJob(creep: Creep, job: ClaimPartJob) {\r\n        const moveTarget = CreepHelper.getMoveTarget(creep, job);\r\n\r\n        this.nullCheck_target(creep, moveTarget);\r\n\r\n        // Move options for target\r\n        const moveOpts = DEFAULT_MOVE_OPTS;\r\n\r\n        // All actiontypes that affect controller have range of 1\r\n        if (moveTarget instanceof StructureController) {\r\n            moveOpts.range = 1;\r\n        }\r\n\r\n        if (creep.pos.getRangeTo(moveTarget!) <= moveOpts.range!) {\r\n            creep.memory.working = true;\r\n            return;\r\n        }\r\n\r\n        creep.moveTo(moveTarget!, moveOpts);\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Travel to the target provided by WorkPartJob in creep.memory.job\r\n     */\r\n    public static travelTo_WorkPartJob(creep: Creep, job: WorkPartJob) {\r\n        const moveTarget = CreepHelper.getMoveTarget(creep, job);\r\n\r\n        this.nullCheck_target(creep, moveTarget);\r\n\r\n        // Move options for target\r\n        const moveOpts = DEFAULT_MOVE_OPTS;\r\n\r\n        if (job.actionType === \"build\" && moveTarget instanceof ConstructionSite) {\r\n            moveOpts.range = 1;\r\n        } else if (job.actionType === \"repair\" && moveTarget instanceof Structure) {\r\n            moveOpts.range = 1;\r\n        } else if (job.actionType === \"upgrade\" && moveTarget instanceof StructureController) {\r\n            moveOpts.range = 3;\r\n        }\r\n\r\n        if (creep.pos.getRangeTo(moveTarget!) <= moveOpts.range!) {\r\n            creep.memory.working = true;\r\n            return;\r\n        }\r\n\r\n        creep.moveTo(moveTarget!, moveOpts);\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Checks if the target is null and throws the appropriate error\r\n     */\r\n    public static nullCheck_target(creep: Creep, target: object | null) {\r\n        if (target === null) {\r\n            // preserve for the error message\r\n            const jobAsString: string = JSON.stringify(creep.memory.job);\r\n\r\n            delete creep.memory.job;\r\n            creep.memory.working = false;\r\n\r\n            if (creep.memory.supplementary && creep.memory.supplementary.moveTarget) {\r\n                delete creep.memory.supplementary.moveTarget;\r\n            }\r\n\r\n            throw new UserException(\r\n                \"Null Job Target\",\r\n                \"Null Job Target for creep: \" + creep.name + \"\\nJob: \" + jobAsString,\r\n                ERROR_WARN\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throws an error that the job actionType or targetType is invalid for the job type\r\n     */\r\n    public static badTarget_Error(creep: Creep, job: BaseJob) {\r\n        return new UserException(\r\n            \"Invalid Job actionType or targetType\",\r\n            \"An invalid actionType or structureType has been provided by creep [\" +\r\n                creep.name +\r\n                \"]\" +\r\n                \"\\n Job: \" +\r\n                JSON.stringify(job),\r\n            ERROR_ERROR\r\n        );\r\n    }\r\n\r\n    /**\r\n     * move the creep off of the exit tile\r\n     * @param creep the creep we are moving\r\n     * @returns if the creep had to be moved\r\n     */\r\n    public static moveCreepOffExit(creep: Creep): boolean {\r\n        const x: number = creep.pos.x;\r\n        const y: number = creep.pos.y;\r\n\r\n        if (x === 0) {\r\n            creep.move(RIGHT);\r\n            return true;\r\n        }\r\n        if (y === 0) {\r\n            creep.move(BOTTOM);\r\n            return true;\r\n        }\r\n        if (x === 49) {\r\n            creep.move(LEFT);\r\n            return true;\r\n        }\r\n        if (y === 49) {\r\n            creep.move(TOP);\r\n            return true;\r\n        }\r\n\r\n        // Creep is not on exit tile\r\n        return false;\r\n    }\r\n}\r\n","import MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\nimport { ROLE_MINER } from \"utils/constants\";\r\nimport CreepHelper from \"Helpers/CreepHelper\";\r\nimport MemoryHelper from \"Helpers/MemoryHelper\";\r\nimport { MINERS_GET_CLOSEST_SOURCE } from \"utils/config\";\r\n\r\n// Manager for the miner creep role\r\nexport default class MinerCreepManager {\r\n    /**\r\n     * Run the miner creep\r\n     * @param creep The creep to run\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n        if (creep.spawning) {\r\n            return; // Don't do anything until you've spawned\r\n        }\r\n\r\n        const homeRoom: Room = Game.rooms[creep.memory.homeRoom];\r\n\r\n        if (creep.memory.job === undefined) {\r\n            creep.memory.job = this.getNewSourceJob(creep, homeRoom);\r\n\r\n            if (creep.memory.job === undefined) {\r\n                return; // idle for a tick\r\n            }\r\n\r\n            // Set supplementary.moveTarget to container if one exists and isn't already taken\r\n            this.handleNewJob(creep, homeRoom);\r\n        }\r\n\r\n        if (creep.memory.job) {\r\n            if (creep.memory.working) {\r\n                CreepApi.doWork(creep, creep.memory.job);\r\n                return;\r\n            }\r\n\r\n            CreepApi.travelTo(creep, creep.memory.job);\r\n        }\r\n    }\r\n\r\n    public static getNewSourceJob(creep: Creep, room: Room): GetEnergyJob | undefined {\r\n        const creepOptions = creep.memory.options as CreepOptionsCiv;\r\n\r\n        if (creepOptions.harvestSources) {\r\n            const sourceJobs = MemoryApi.getSourceJobs(room, (sJob: GetEnergyJob) => !sJob.isTaken);\r\n\r\n            if (sourceJobs.length > 0) {\r\n                // Filter out jobs that have too little energy -\r\n                // The energy in the StoreDefinition is the amount of energy per 300 ticks left\r\n                const suitableJobs = _.filter(\r\n                    sourceJobs,\r\n                    (sJob: GetEnergyJob) => sJob.resources.energy >= creep.getActiveBodyparts(WORK) * 2 * 300 //  (Workparts * 2 * 300 = effective mining capacity)\r\n                );\r\n\r\n                // If config allows getting closest source\r\n                if (MINERS_GET_CLOSEST_SOURCE) {\r\n                    let sourceIDs: string[];\r\n\r\n                    // Get sources from suitableJobs if any, else get regular sourceJob instead\r\n                    if (suitableJobs.length > 0) {\r\n                        sourceIDs = _.map(suitableJobs, (job: GetEnergyJob) => job.targetID);\r\n                    } else {\r\n                        sourceIDs = _.map(sourceJobs, (job: GetEnergyJob) => job.targetID);\r\n                    }\r\n\r\n                    // Find the closest source\r\n                    const sourceObjects: Source[] = MemoryHelper.getOnlyObjectsFromIDs(sourceIDs);\r\n\r\n                    const closestAvailableSource: Source = creep.pos.findClosestByRange(sourceObjects)!; // Force not null since we used MemoryHelper.getOnlyObjectsFromIds;\r\n\r\n                    // return the job that corresponds with the closest source\r\n                    return _.find(sourceJobs, (job: GetEnergyJob) => job.targetID === closestAvailableSource.id);\r\n                } else {\r\n                    // Return the first suitableJob if any\r\n                    // if none, return first sourceJob.\r\n                    if (suitableJobs.length > 0) {\r\n                        return suitableJobs[0];\r\n                    } else {\r\n                        return sourceJobs[0];\r\n                    }\r\n                }\r\n            }\r\n        } // End harvestSources option\r\n\r\n        // no available jobs\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handle initalizing a new job\r\n     */\r\n    public static handleNewJob(creep: Creep, room: Room): void {\r\n        // Update room memory to reflect the new job\r\n        MemoryApi.updateJobMemory(creep, room);\r\n\r\n        const miningContainer = CreepHelper.getMiningContainer(\r\n            creep.memory.job as GetEnergyJob,\r\n            Game.rooms[creep.memory.homeRoom]\r\n        );\r\n\r\n        if (miningContainer === undefined) {\r\n            // Returning here to prevent supplementary id from being formed,\r\n            // so in that case creep will just walk up to the source\r\n            return;\r\n        }\r\n\r\n        // Check for any creeps on the miningContainer\r\n        const creepsOnContainer = miningContainer.pos.lookFor(LOOK_CREEPS);\r\n\r\n        if (creepsOnContainer.length > 0) {\r\n            // If the creep on the container is a miner (and not some random creep that's in the way)\r\n            if (creepsOnContainer[0].memory.role === ROLE_MINER) {\r\n                return; // Don't target it\r\n            }\r\n        }\r\n\r\n        if (creep.memory.supplementary === undefined) {\r\n            creep.memory.supplementary = {};\r\n        }\r\n\r\n        creep.memory.supplementary.moveTargetID = miningContainer.id;\r\n    }\r\n}\r\n","import MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\n\r\n// Manager for the miner creep role\r\nexport default class HarvesterCreepManager {\r\n    /**\r\n     * run the harvester creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n        if (creep.spawning) {\r\n            return; // don't do anything until spawned\r\n        }\r\n\r\n        const homeRoom: Room = Game.rooms[creep.memory.homeRoom];\r\n\r\n        if (creep.memory.job === undefined) {\r\n            creep.memory.job = this.getNewJob(creep, homeRoom);\r\n\r\n            if (creep.memory.job === undefined) {\r\n                return; // idle for a tick\r\n            }\r\n\r\n            this.handleNewJob(creep, homeRoom);\r\n        }\r\n\r\n        // I think i know how to fix creeps idling for a tick between traveling and doing the job\r\n        // Travel to checks if they're there and returns, problem is we call it after do work\r\n        // We should either have travelTo before do work to and change them to return a boolean value on if there creep was there\r\n        // Or we should have some sort of canReach check here. 1 tick delay between every extension for example will add up to an extra 40-80\r\n        // ticks spent filling up spawn alone\r\n        if (creep.memory.job) {\r\n            if (creep.memory.working) {\r\n                CreepApi.doWork(creep, creep.memory.job);\r\n                return;\r\n            }\r\n\r\n            CreepApi.travelTo(creep, creep.memory.job);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decides which kind of job to get and calls the appropriate function\r\n     */\r\n    public static getNewJob(creep: Creep, room: Room): BaseJob | undefined {\r\n        // if creep is empty, get a GetEnergyJob\r\n        if (creep.carry.energy === 0) {\r\n            return this.newGetEnergyJob(creep, room);\r\n        } else {\r\n            let job: BaseJob | undefined = this.newCarryPartJob(creep, room);\r\n            if (job === undefined) {\r\n                job = this.newWorkPartJob(creep, room);\r\n            }\r\n\r\n            return job;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a GetEnergyJob for the harvester\r\n     */\r\n    public static newGetEnergyJob(creep: Creep, room: Room): GetEnergyJob | undefined {\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n        if (creepOptions.getFromContainer) {\r\n            // All container jobs with enough energy to fill creep.carry, and not taken\r\n            const containerJobs = MemoryApi.getContainerJobs(\r\n                room,\r\n                (cJob: GetEnergyJob) => !cJob.isTaken && cJob.resources!.energy >= creep.carryCapacity\r\n            );\r\n\r\n            if (containerJobs.length > 0) {\r\n                return containerJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.getDroppedEnergy) {\r\n            // All dropped resources with enough energy to fill creep.carry, and not taken\r\n            const dropJobs = MemoryApi.getPickupJobs(\r\n                room,\r\n                (dJob: GetEnergyJob) => !dJob.isTaken && dJob.resources!.energy >= creep.carryCapacity\r\n            );\r\n\r\n            if (dropJobs.length > 0) {\r\n                return dropJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.getFromStorage || creepOptions.getFromTerminal) {\r\n            // All backupStructures with enough energy to fill creep.carry, and not taken\r\n            const backupStructures = MemoryApi.getBackupStructuresJobs(\r\n                room,\r\n                (job: GetEnergyJob) => !job.isTaken && job.resources!.energy >= creep.carryCapacity\r\n            );\r\n\r\n            if (backupStructures.length > 0) {\r\n                return backupStructures[0];\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get a CarryPartJob for the harvester\r\n     */\r\n    public static newCarryPartJob(creep: Creep, room: Room): CarryPartJob | undefined {\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n\r\n        if (creepOptions.fillTower || creepOptions.fillSpawn) {\r\n            const fillJobs = MemoryApi.getFillJobs(\r\n                room,\r\n                (fJob: CarryPartJob) => !fJob.isTaken && fJob.targetType !== \"link\",\r\n                true\r\n            );\r\n\r\n            if (fillJobs.length > 0) {\r\n                return fillJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.fillStorage || creepOptions.fillContainer) {\r\n            const storeJobs = MemoryApi.getStoreJobs(room, (bsJob: CarryPartJob) => !bsJob.isTaken);\r\n\r\n            if (storeJobs.length > 0) {\r\n                // Find the closeest job to the creep currently\r\n                // ! - I'm 90% confident theres a better way to do this, feel free\r\n                const jobObjects: Array<any | null> = _.map(storeJobs, (storeJob: CarryPartJob) => Game.getObjectById(storeJob.targetID));\r\n                const jobObjectPos: RoomPosition[] = [];\r\n                for (const jo of jobObjects) {\r\n                    if (!jo) {\r\n                        continue;\r\n                    }\r\n                    jobObjectPos.push(jo.pos);\r\n                }\r\n                const closestTarget: RoomPosition = creep.pos.findClosestByPath(jobObjectPos) as RoomPosition;\r\n                const closestJob: CarryPartJob | undefined = _.find(storeJobs,\r\n                    (j: CarryPartJob) => {\r\n                        const roomObj: any = Game.getObjectById(j.targetID);\r\n                        const roomPos: RoomPosition = roomObj.pos as RoomPosition;\r\n                        return closestTarget === roomPos;\r\n                    });\r\n                return closestJob;\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets a new WorkPartJob for harvester\r\n     */\r\n    public static newWorkPartJob(creep: Creep, room: Room): WorkPartJob | undefined {\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n        const upgradeJobs = MemoryApi.getUpgradeJobs(room, (job: WorkPartJob) => !job.isTaken);\r\n\r\n        if (creepOptions.upgrade) {\r\n            if (upgradeJobs.length > 0) {\r\n                return upgradeJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.build) {\r\n            const buildJobs = MemoryApi.getBuildJobs(room, (job: WorkPartJob) => !job.isTaken);\r\n            if (buildJobs.length > 0) {\r\n                return buildJobs[0];\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handles setup for a new job\r\n     */\r\n    public static handleNewJob(creep: Creep, room: Room): void {\r\n        MemoryApi.updateJobMemory(creep, room);\r\n    }\r\n}\r\n","import MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\nimport { ROOM_STATE_UPGRADER } from \"utils/constants\";\r\n\r\n// Manager for the miner creep role\r\nexport default class WorkerCreepManager {\r\n    /**\r\n     * run the worker creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n        if (creep.spawning) {\r\n            return;\r\n        }\r\n\r\n        const homeRoom = Game.rooms[creep.memory.homeRoom];\r\n\r\n        if (creep.memory.job === undefined) {\r\n            creep.memory.job = this.getNewJob(creep, homeRoom);\r\n\r\n            if (creep.memory.job === undefined) {\r\n                return;\r\n            }\r\n\r\n            this.handleNewJob(creep, homeRoom);\r\n        }\r\n\r\n        if (creep.memory.job) {\r\n            if (creep.memory.working) {\r\n                CreepApi.doWork(creep, creep.memory.job);\r\n                return;\r\n            }\r\n\r\n            CreepApi.travelTo(creep, creep.memory.job);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a new job for the worker creep\r\n     */\r\n    public static getNewJob(creep: Creep, room: Room): BaseJob | undefined {\r\n        if (creep.carry.energy === 0) {\r\n            return this.newGetEnergyJob(creep, room);\r\n        } else {\r\n            let job: BaseJob | undefined = this.newWorkPartJob(creep, room);\r\n            if (job === undefined) {\r\n                job = this.newCarryPartJob(creep, room);\r\n            }\r\n\r\n            return job;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a GetEnergyJob for the harvester\r\n     */\r\n    public static newGetEnergyJob(creep: Creep, room: Room): GetEnergyJob | undefined {\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n        if (creepOptions.getFromContainer) {\r\n            // All container jobs with enough energy to fill creep.carry, and not taken\r\n            const containerJobs = MemoryApi.getContainerJobs(\r\n                room,\r\n                (cJob: GetEnergyJob) => !cJob.isTaken && cJob.resources.energy >= creep.carryCapacity\r\n            );\r\n\r\n            if (containerJobs.length > 0) {\r\n                return containerJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.getDroppedEnergy) {\r\n            // All dropped resources with enough energy to fill creep.carry, and not taken\r\n            const dropJobs = MemoryApi.getPickupJobs(\r\n                room,\r\n                (dJob: GetEnergyJob) => !dJob.isTaken && dJob.resources.energy >= creep.carryCapacity\r\n            );\r\n\r\n            if (dropJobs.length > 0) {\r\n                return dropJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.getFromTerminal || creepOptions.getFromStorage) {\r\n            // All backupStructures with enough energy to fill creep.carry, and not taken\r\n            const backupStructures = MemoryApi.getBackupStructuresJobs(\r\n                room,\r\n                (job: GetEnergyJob) => !job.isTaken && job.resources.energy >= creep.carryCapacity\r\n            );\r\n\r\n            if (backupStructures.length > 0) {\r\n                return backupStructures[0];\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets a new WorkPartJob for worker\r\n     */\r\n    public static newWorkPartJob(creep: Creep, room: Room): WorkPartJob | undefined {\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n        const upgradeJobs = MemoryApi.getUpgradeJobs(room, (job: WorkPartJob) => !job.isTaken);\r\n        const isCurrentUpgrader: boolean = _.some(\r\n            MemoryApi.getMyCreeps(room.name),\r\n            (c: Creep) => c.memory.job && c.memory.job!.actionType === \"upgrade\"\r\n        );\r\n\r\n        // Assign upgrade job is one isn't currently being worked\r\n        if (creepOptions.upgrade && !isCurrentUpgrader) {\r\n            if (upgradeJobs.length > 0) {\r\n                return upgradeJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.build) {\r\n            const buildJobs = MemoryApi.getBuildJobs(room, (job: WorkPartJob) => !job.isTaken);\r\n            if (buildJobs.length > 0) {\r\n                return buildJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.repair) {\r\n            const repairJobs = MemoryApi.getRepairJobs(room, (job: WorkPartJob) => !job.isTaken);\r\n            if (repairJobs.length > 0) {\r\n                return repairJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.upgrade) {\r\n            if (upgradeJobs.length > 0) {\r\n                return upgradeJobs[0];\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get a CarryPartJob for the worker\r\n     */\r\n    public static newCarryPartJob(creep: Creep, room: Room): CarryPartJob | undefined {\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n\r\n        if (creepOptions.fillSpawn || creepOptions.fillTower) {\r\n            const fillJobs = MemoryApi.getFillJobs(\r\n                room,\r\n                (fJob: CarryPartJob) => !fJob.isTaken && fJob.targetType !== \"link\"\r\n            );\r\n\r\n            if (fillJobs.length > 0) {\r\n                return fillJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.fillStorage || creepOptions.fillTerminal) {\r\n            const storeJobs = MemoryApi.getStoreJobs(room, (bsJob: CarryPartJob) => !bsJob.isTaken);\r\n\r\n            if (storeJobs.length > 0) {\r\n                return storeJobs[0];\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handles new job initializing\r\n     */\r\n    public static handleNewJob(creep: Creep, room: Room) {\r\n        MemoryApi.updateJobMemory(creep, room);\r\n\r\n        switch (creep.memory.job!.jobType) {\r\n            case \"getEnergyJob\":\r\n                break;\r\n            case \"carryPartJob\":\r\n                break;\r\n            case \"workPartJob\":\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import RoomApi from \"../../Api/Room.Api\";\r\nimport MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepDomesticApi from \"Api/CreepDomestic.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\nimport CreepDomestic from \"Api/CreepDomestic.Api\";\r\nimport {\r\n    ERROR_WARN\r\n} from \"utils/constants\";\r\n\r\n// Manager for the miner creep role\r\nexport default class LorryCreepManager {\r\n\r\n    /**\r\n     * run the lorry creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n\r\n    }\r\n}\r\n","import MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\n\r\n// Manager for the miner creep role\r\nexport default class PowerUpgraderCreepManager {\r\n    /**\r\n     * run the power upgrader creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n        if (creep.spawning) {\r\n            return; // don't do anything until spawned\r\n        }\r\n\r\n        const homeRoom: Room = Game.rooms[creep.memory.homeRoom];\r\n\r\n        if (creep.memory.job === undefined) {\r\n            creep.memory.job = this.getNewJob(creep, homeRoom);\r\n\r\n            if (creep.memory.job === undefined) {\r\n                return; // idle for a tick\r\n            }\r\n\r\n            this.handleNewJob(creep, homeRoom);\r\n        }\r\n\r\n        if (creep.memory.job) {\r\n            if (creep.memory.working) {\r\n                CreepApi.doWork(creep, creep.memory.job);\r\n                return;\r\n            }\r\n\r\n            CreepApi.travelTo(creep, creep.memory.job);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decides which kind of job to get and calls the appropriate function\r\n     */\r\n    public static getNewJob(creep: Creep, room: Room): BaseJob | undefined {\r\n        // if creep is empty, get a GetEnergyJob\r\n        if (creep.carry.energy === 0) {\r\n            return this.newGetEnergyJob(creep, room);\r\n        } else {\r\n            // Creep energy > 0\r\n            return this.newUpgradeJob(creep, room);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get an upgrading job\r\n     */\r\n    public static newUpgradeJob(creep: Creep, room: Room): WorkPartJob | undefined {\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n        if (creepOptions.upgrade) {\r\n            // All link jobs with enough energy to fill creep.carry, and not taken\r\n            const upgraderJob = MemoryApi.getUpgradeJobs(room, (job: WorkPartJob) => !job.isTaken);\r\n\r\n            if (upgraderJob.length > 0) {\r\n                return upgraderJob[0];\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get a GetEnergyJob for the power upgrader\r\n     */\r\n    public static newGetEnergyJob(creep: Creep, room: Room): GetEnergyJob | undefined {\r\n        // All link jobs with enough energy to fill creep.carry, and not taken\r\n        const linkJobs = MemoryApi.getLinkJobs(room, (job: GetEnergyJob) => !job.isTaken);\r\n\r\n        if (linkJobs.length > 0) {\r\n            return linkJobs[0];\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handles setup for a new job\r\n     */\r\n    public static handleNewJob(creep: Creep, room: Room): void {\r\n        MemoryApi.updateJobMemory(creep, room);\r\n    }\r\n}\r\n","import MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\nimport CreepHelper from \"Helpers/CreepHelper\";\r\nimport {\r\n    ROLE_REMOTE_MINER\r\n} from \"utils/constants\";\r\n\r\n// Manager for the miner creep role\r\nexport default class RemoteMinerCreepManager {\r\n\r\n    /**\r\n     * Run the remote miner creep\r\n     * @param creep The creep to run\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n\r\n        if (creep.spawning) {\r\n            return; // Don't do anything until you've spawned\r\n        }\r\n\r\n        const targetRoom: Room = Game.rooms[creep.memory.targetRoom];\r\n\r\n        if (creep.memory.job === undefined) {\r\n            creep.memory.job = this.getNewSourceJob(creep, targetRoom);\r\n\r\n            if (creep.memory.job === undefined) {\r\n                return; // idle for a tick\r\n            }\r\n\r\n            // Set supplementary.moveTarget to container if one exists and isn't already taken\r\n            this.handleNewJob(creep);\r\n        }\r\n\r\n        if (creep.memory.job) {\r\n            if (creep.memory.working) {\r\n                CreepApi.doWork(creep, creep.memory.job);\r\n                return;\r\n            }\r\n\r\n            CreepApi.travelTo(creep, creep.memory.job);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find a job for the creep\r\n     */\r\n    public static getNewSourceJob(creep: Creep, room: Room): GetEnergyJob | undefined {\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n\r\n        if (creepOptions.harvestSources) {\r\n            const sourceJobs = MemoryApi.getSourceJobs(room, (sjob: GetEnergyJob) => !sjob.isTaken);\r\n            if (sourceJobs.length > 0) {\r\n                return sourceJobs[0];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handle initalizing a new job\r\n     */\r\n    public static handleNewJob(creep: Creep): void {\r\n        const miningContainer = CreepHelper.getMiningContainer(\r\n            creep.memory.job as GetEnergyJob,\r\n            Game.rooms[creep.memory.targetRoom]\r\n        );\r\n\r\n        if (miningContainer === undefined) {\r\n            return; // We don't need to do anything else if the container doesn't exist\r\n        }\r\n\r\n        const creepsOnContainer = miningContainer.pos.lookFor(LOOK_CREEPS);\r\n\r\n        if (creepsOnContainer.length > 0) {\r\n            if (creepsOnContainer[0].memory.role === ROLE_REMOTE_MINER) {\r\n                return; // If there is already a miner creep on the container, then we don't target it\r\n            }\r\n        }\r\n\r\n        if (creep.memory.supplementary === undefined) {\r\n            creep.memory.supplementary = {};\r\n        }\r\n\r\n        creep.memory.supplementary.moveTargetID = miningContainer.id;\r\n    }\r\n}\r\n","import MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\n\r\n// Manager for the miner creep role\r\nexport default class RemoteHarvesterCreepManager {\r\n\r\n    /**\r\n     * run the remote harvester creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n        if (creep.spawning) {\r\n            return; // don't do anything until spawned\r\n        }\r\n\r\n        const targetRoom: Room = Game.rooms[creep.memory.targetRoom];\r\n\r\n        if (creep.memory.job === undefined) {\r\n            creep.memory.job = this.getNewJob(creep, targetRoom);\r\n\r\n            if (creep.memory.job === undefined) {\r\n                return; // idle for a tick\r\n            }\r\n\r\n            this.handleNewJob(creep);\r\n        }\r\n\r\n        if (creep.memory.job) {\r\n            if (creep.memory.working) {\r\n                CreepApi.doWork(creep, creep.memory.job);\r\n                return;\r\n            }\r\n\r\n            CreepApi.travelTo(creep, creep.memory.job);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decides which kind of job to get and calls the appropriate function\r\n     */\r\n    public static getNewJob(creep: Creep, room: Room): BaseJob | undefined {\r\n        // if creep is empty, get a GetEnergyJob\r\n        if (creep.carry.energy === 0) {\r\n            return this.newGetEnergyJob(creep, room);\r\n        } else {\r\n            // Creep energy > 0\r\n            return this.newCarryPartJob(creep, room);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a GetEnergyJob for the harvester\r\n     */\r\n    public static newGetEnergyJob(creep: Creep, room: Room): GetEnergyJob | undefined {\r\n\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n\r\n        if (creepOptions.getFromContainer) {\r\n            // All container jobs with enough energy to fill creep.carry, and not taken\r\n            const containerJobs = MemoryApi.getContainerJobs(\r\n                room,\r\n                (cJob: GetEnergyJob) => !cJob.isTaken && cJob.resources!.energy >= creep.carryCapacity\r\n            );\r\n\r\n            if (containerJobs.length > 0) {\r\n                return containerJobs[0];\r\n            }\r\n        }\r\n\r\n        if (creepOptions.getDroppedEnergy) {\r\n            // All dropped resources with enough energy to fill creep.carry, and not taken\r\n            const dropJobs = MemoryApi.getPickupJobs(\r\n                room,\r\n                (dJob: GetEnergyJob) => !dJob.isTaken && dJob.resources!.energy >= creep.carryCapacity\r\n            );\r\n\r\n            if (dropJobs.length > 0) {\r\n                return dropJobs[0];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get a CarryPartJob for the harvester\r\n     */\r\n    public static newCarryPartJob(creep: Creep, room: Room): CarryPartJob | undefined {\r\n\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n\r\n        if (creepOptions.fillLink) {\r\n            const linkJobs = MemoryApi.getFillJobs(room, (fJob: CarryPartJob) => !fJob.isTaken && fJob.targetType === 'link');\r\n\r\n            if (linkJobs.length > 0) {\r\n                return linkJobs[0];\r\n            }\r\n        }\r\n        if (creepOptions.fillSpawn) {\r\n            const fillJobs = MemoryApi.getFillJobs(room, (fJob: CarryPartJob) => !fJob.isTaken && fJob.targetType !== 'link');\r\n\r\n            if (fillJobs.length > 0) {\r\n                return fillJobs[0];\r\n            }\r\n        }\r\n\r\n        const storeJobs = MemoryApi.getStoreJobs(room, (bsJob: CarryPartJob) => !bsJob.isTaken);\r\n\r\n        if (storeJobs.length > 0) {\r\n            const storageJob: CarryPartJob | undefined = _.find(storeJobs, (storeJob: CarryPartJob) =>\r\n                !storeJob.isTaken && storeJob.targetType === STRUCTURE_STORAGE\r\n            );\r\n\r\n            if (storageJob) {\r\n                return storageJob;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handles setup for a new job\r\n     */\r\n    public static handleNewJob(creep: Creep): void {\r\n        if (creep.memory.job!.jobType === \"getEnergyJob\") {\r\n            // TODO Decrement the energy available in room.memory.job.xxx.yyy by creep.carryCapacity\r\n            return;\r\n        }\r\n        else if (creep.memory.job!.jobType === \"carryPartJob\") {\r\n            // TODO Mark the job we chose as taken\r\n            return;\r\n        }\r\n    }\r\n}\r\n","import RoomApi from \"../../Api/Room.Api\";\r\nimport MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepDomesticApi from \"Api/CreepDomestic.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\nimport CreepDomestic from \"Api/CreepDomestic.Api\";\r\nimport {\r\n    ERROR_WARN\r\n} from \"utils/constants\";\r\n\r\n// Manager for the miner creep role\r\nexport default class RemoteColonizerCreepManager {\r\n\r\n    /**\r\n     * run the remote colonizer creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n\r\n    }\r\n}\r\n","import RoomApi from \"../../Api/Room.Api\";\r\nimport MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepDomesticApi from \"Api/CreepDomestic.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\nimport CreepDomestic from \"Api/CreepDomestic.Api\";\r\nimport {\r\n    ERROR_WARN\r\n} from \"utils/constants\";\r\n\r\n// Manager for the miner creep role\r\nexport default class ClaimerCreepManager {\r\n\r\n    /**\r\n     * run the claimer creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n\r\n    }\r\n}\r\n","import MemoryApi from \"./Memory.Api\";\r\nimport { DEFAULT_MOVE_OPTS } from \"utils/constants\";\r\nimport CreepApi from \"./Creep.Api\";\r\n\r\n// Api for military creep's\r\nexport default class CreepMili {\r\n\r\n    /**\r\n     * check if we're still waiting on creeps to rally\r\n     * @param creepOptions the options for the military creep\r\n     * @param creep the creep we're checking on\r\n     */\r\n    public static setWaitingForRally(creep: Creep, creepOptions: CreepOptionsMili): boolean {\r\n\r\n        // If these options aren't defined, creep isn't waiting for rally\r\n        if (!creepOptions.rallyLocation || !creepOptions.squadSize || !creepOptions.rallyLocation) {\r\n            return false;\r\n        }\r\n        const squadSize: number = creepOptions.squadSize!;\r\n        const squadUUID: number = creepOptions.squadUUID!;\r\n        const rallyRoom: string = creepOptions.rallyLocation.roomName;\r\n        const creepsInSquad: Creep[] | null = MemoryApi.getCreepsInSquad(creep.room.name, squadUUID);\r\n\r\n\r\n        // If we don't have the full squad spawned yet, creep is waiting\r\n        if (!creepsInSquad && creepsInSquad!.length < squadSize) {\r\n            return true;\r\n        }\r\n\r\n        // If not every creep is in the rally room, we are waiting\r\n        if (_.some(creepsInSquad!, (c: Creep) => c.room.name !== rallyRoom)) {\r\n            return true;\r\n        }\r\n\r\n        // Finally, make sure every creep is within an acceptable distance of each other\r\n        const creepsWithinRallyDistance: boolean =\r\n            _.every(creepsInSquad!, (cis: Creep) =>  // Check that every creep is within 2 tiles of at least 1 other creep in squad\r\n                _.some(creepsInSquad!, (innerC: Creep) => innerC.pos.inRangeTo(cis.pos.x, cis.pos.y, 2))\r\n            ) &&\r\n            _.every(creepsInSquad!, (c: Creep) =>    // Check that every creep is within 7 tiles of every creep in the squad\r\n                _.every(creepsInSquad!, (innerC: Creep) => c.pos.inRangeTo(innerC.pos.x, innerC.pos.y, 7))\r\n            );\r\n\r\n        if (creepsWithinRallyDistance) {\r\n            return true;\r\n        }\r\n\r\n        // If we make it to here, we are done waiting\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * check if the creep is in range to attack the target\r\n     * @param creep the creep we are checking for\r\n     * @param target the room position for the target in question\r\n     * @param isMelee if the creep can only melee\r\n     */\r\n    public static isInAttackRange(creep: Creep, target: RoomPosition, isMelee: boolean): boolean {\r\n        if (isMelee) {\r\n            return creep.pos.isNearTo(target);\r\n        }\r\n        return creep.pos.inRangeTo(target, 3);\r\n    }\r\n\r\n    /**\r\n     * have the creep flee back to the homestead\r\n     * @param creep the creep that is fleeing\r\n     * @param fleeRoom the room the creep is running too\r\n     */\r\n    public static fleeCreep(creep: Creep, fleeRoom: string): void {\r\n        creep.moveTo(new RoomPosition(25, 25, fleeRoom), DEFAULT_MOVE_OPTS);\r\n    }\r\n\r\n    /**\r\n     * get an attack target for the attack creep\r\n     * @param creep the creep we are getting the target for\r\n     * @param creepOptions the creep's military options\r\n     * @param rangeNum the range the creep is requesting for a target\r\n     */\r\n    public static getAttackTarget(creep: Creep, creepOptions: CreepOptionsMili, rangeNum: number): Creep | Structure<StructureConstant> | undefined {\r\n\r\n        let path: PathFinderPath;\r\n        const goal: { pos: RoomPosition, range: number } = { pos: new RoomPosition(25, 25, creep.memory.targetRoom), range: rangeNum }\r\n        const pathFinderOptions: PathFinderOpts = {\r\n            roomCallback: (roomName): boolean | CostMatrix => {\r\n\r\n                const room: Room = Game.rooms[roomName];\r\n                const costs = new PathFinder.CostMatrix;\r\n                if (!room) {\r\n                    return false;\r\n                }\r\n\r\n                // Set walls and ramparts as unwalkable\r\n                room.find(FIND_STRUCTURES).forEach(function (struct: Structure<StructureConstant>) {\r\n                    if (struct.structureType === STRUCTURE_WALL ||\r\n                        struct.structureType === STRUCTURE_RAMPART) {\r\n                        // Set walls and ramparts as unwalkable\r\n                        costs.set(struct.pos.x, struct.pos.y, 0xff);\r\n                    }\r\n                });\r\n\r\n                // Set creeps as unwalkable\r\n                room.find(FIND_CREEPS).forEach(function (currentCreep: Creep) {\r\n                    costs.set(currentCreep.pos.x, currentCreep.pos.y, 0xff);\r\n                });\r\n\r\n                return costs;\r\n            },\r\n        }\r\n\r\n        // Check for a straight path to one of the preferred targets\r\n        // Enemy Creeps\r\n        const hostileCreeps: Creep[] = MemoryApi.getHostileCreeps(creep.room.name, undefined, true);\r\n        const closestCreep: Creep | null = _.first(hostileCreeps);\r\n        if (closestCreep) {\r\n            goal.pos = closestCreep.pos;\r\n            path = PathFinder.search(creep.pos, goal, pathFinderOptions);\r\n            if (!path.incomplete) {\r\n                return closestCreep;\r\n            }\r\n        }\r\n\r\n        // Enemy Towers\r\n        const enemyTower: StructureTower | null = creep.pos.findClosestByRange(FIND_HOSTILE_STRUCTURES,\r\n            { filter: (struct: Structure) => struct.structureType === STRUCTURE_TOWER }\r\n        ) as StructureTower;\r\n        if (enemyTower) {\r\n            goal.pos = enemyTower.pos;\r\n            path = PathFinder.search(creep.pos, goal, pathFinderOptions);\r\n            if (!path.incomplete) {\r\n                return enemyTower;\r\n            }\r\n        }\r\n\r\n        // Enemy Spawn\r\n        const enemySpawn: StructureSpawn | null = creep.pos.findClosestByRange(FIND_HOSTILE_SPAWNS);\r\n        if (enemySpawn) {\r\n            goal.pos = enemySpawn.pos;\r\n            path = PathFinder.search(creep.pos, goal, pathFinderOptions);\r\n            if (!path.incomplete) {\r\n                return enemySpawn;\r\n            }\r\n        }\r\n\r\n        // Enemy Extensions\r\n        const enemyExtension: StructureExtension = creep.pos.findClosestByRange(FIND_HOSTILE_STRUCTURES,\r\n            { filter: (struct: Structure) => struct.structureType === STRUCTURE_TOWER }\r\n        ) as StructureExtension;\r\n        if (enemyExtension) {\r\n            goal.pos = enemyExtension.pos;\r\n            path = PathFinder.search(creep.pos, goal, pathFinderOptions);\r\n            if (!path.incomplete) {\r\n                return enemyExtension;\r\n            }\r\n        }\r\n\r\n        // Other Structures\r\n        const enemyStructure: Structure<StructureConstant> = creep.pos.findClosestByRange(FIND_HOSTILE_STRUCTURES,\r\n            {\r\n                filter: (struct: Structure) =>\r\n                    struct.structureType !== STRUCTURE_TOWER &&\r\n                    struct.structureType !== STRUCTURE_SPAWN &&\r\n                    struct.structureType !== STRUCTURE_EXTENSION\r\n            }\r\n        ) as Structure<StructureConstant>;\r\n        if (enemyStructure) {\r\n            goal.pos = enemyStructure.pos;\r\n            path = PathFinder.search(creep.pos, goal, pathFinderOptions);\r\n            if (!path.incomplete) {\r\n                return enemyStructure;\r\n            }\r\n        }\r\n\r\n        // Get a wall target\r\n        return this.getIdealWallTarget(creep);\r\n    }\r\n\r\n    /**\r\n     * get a target for a domestic defender\r\n     * @param creep the defender creep\r\n     * @param creepOptions the options for the defender creep\r\n     */\r\n    public static getDomesticDefenseAttackTarget(creep: Creep, creepOptions: CreepOptionsMili, CREEP_RANGE: number): Creep | null {\r\n\r\n        const hostileCreeps: Creep[] = MemoryApi.getHostileCreeps(creep.room.name);\r\n\r\n        if (hostileCreeps.length > 0) {\r\n            return creep.pos.findClosestByPath(hostileCreeps);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * get a healing target for the healer creep\r\n     * @param creep the creep we are geting the target for\r\n     * @param creepOptions the options for the military creep\r\n     */\r\n    public static getHealingTarget(creep: Creep, creepOptions: CreepOptionsMili): Creep | null {\r\n\r\n        let healingTarget: Creep | null;\r\n        const squadMembers: Creep[] | null = MemoryApi.getCreepsInSquad(creep.room.name, creepOptions.squadUUID!);\r\n\r\n        // If squad, find closest squad member with missing health\r\n        if (creepOptions.squadUUID && squadMembers) {\r\n\r\n            // Squad implied, find closest squadMember with missing health\r\n            healingTarget = creep.pos.findClosestByPath(squadMembers!, {\r\n                filter: (c: Creep) => c.hits < c.hitsMax\r\n            });\r\n\r\n            return healingTarget;\r\n        }\r\n\r\n        // No squad members, find closest creep\r\n        const creepsInRoom: Creep[] = creep.room.find(FIND_MY_CREEPS);\r\n        return creep.pos.findClosestByPath(creepsInRoom, { filter: (c: Creep) => c.hits < c.hitsMax });\r\n    }\r\n\r\n    /**\r\n     * find the ideal wall to attack\r\n     * TODO make this balance between distance and health (ie if a 9m wall is 2 tiles closer than a 2m wall)\r\n     * @param creep the creep we are checking for\r\n     */\r\n    public static getIdealWallTarget(creep: Creep): StructureWall | StructureRampart | undefined {\r\n\r\n        const rampart: StructureRampart = creep.pos.findClosestByPath(FIND_HOSTILE_STRUCTURES, {\r\n            filter: (struct: Structure) => struct.structureType === STRUCTURE_RAMPART\r\n        }) as StructureRampart;\r\n\r\n        const wall: StructureWall = creep.pos.findClosestByPath(FIND_STRUCTURES, {\r\n            filter: (struct: Structure) => struct.structureType === STRUCTURE_WALL\r\n        }) as StructureWall;\r\n\r\n        if (!wall && !rampart) {\r\n            return undefined;\r\n        }\r\n        if (wall && rampart) {\r\n            return (wall.pos.getRangeTo(creep.pos) < rampart.pos.getRangeTo(creep.pos) ? wall : rampart);\r\n        }\r\n        return (wall ? wall : rampart);\r\n    }\r\n\r\n    /**\r\n     * moves the creep away from the target\r\n     */\r\n    public static kiteEnemyCreep(creep: Creep): boolean {\r\n        const hostileCreep: Creep | null = creep.pos.findClosestByPath(MemoryApi.getHostileCreeps(creep.room.name));\r\n        const CREEP_RANGE: number = 3;\r\n        if (!hostileCreep) {\r\n            return false;\r\n        }\r\n        let path: PathFinderPath;\r\n        const goal: { pos: RoomPosition, range: number } = { pos: new RoomPosition(25, 25, creep.memory.targetRoom), range: CREEP_RANGE }\r\n        const pathFinderOptions: PathFinderOpts = { flee: true }\r\n        path = PathFinder.search(hostileCreep!.pos, goal, pathFinderOptions);\r\n        if (path.path.length > 0) {\r\n            creep.moveTo(path.path[0], DEFAULT_MOVE_OPTS);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * perform the basic operations for military creeps\r\n     * This includes: Fleeing, Rallying, moving into target room, and moving off exit tile\r\n     * @param creep the creep we are doing the operations for\r\n     * @param creepOptions the options for the military creep\r\n     */\r\n    public static checkMilitaryCreepBasics(creep: Creep, creepOptions: CreepOptionsMili): boolean {\r\n        const targetRoom: string = creep.memory.targetRoom;\r\n        // I love tenary operators\r\n        const fleeLocation = creepOptions.rallyLocation ? creepOptions.rallyLocation.roomName : creep.memory.homeRoom;\r\n        // Check if we need to flee\r\n        if (creepOptions.flee && creep.hits < .25 * creep.hitsMax) {\r\n            this.fleeCreep(creep, fleeLocation);\r\n            return true;\r\n        }\r\n\r\n        if (!creepOptions.rallyDone) {\r\n            if (this.setWaitingForRally(creep, creepOptions)) {\r\n                return true; // idle if we are waiting on everyone to rally still\r\n            }\r\n            // Have the creep stop checking for rally\r\n            creepOptions.rallyDone = true;\r\n            creep.memory.options = creepOptions;\r\n        }\r\n\r\n        // Everyone is rallied, time to move out into the target room as a group if not already there\r\n        if (creep.room.name !== targetRoom) {\r\n            creep.moveTo(new RoomPosition(25, 25, targetRoom), DEFAULT_MOVE_OPTS);\r\n            return true;\r\n        }\r\n\r\n        // If creep is on exit tile, move them off\r\n        if (CreepApi.moveCreepOffExit(creep)) {\r\n            return true;\r\n        }\r\n\r\n        // Return false if we didn't need to do any of this\r\n        return false;\r\n    }\r\n};\r\n","import { DEFAULT_MOVE_OPTS } from \"utils/constants\";\r\nimport MiliApi from \"Api/CreepMili.Api\";\r\n\r\n// Manager for the miner creep role\r\nexport default class RemoteDefenderCreepManager {\r\n    /**\r\n     * run the remote defender creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n        if (creep.spawning) {\r\n            return;\r\n        }\r\n\r\n        const creepOptions: CreepOptionsMili = creep.memory.options as CreepOptionsMili;\r\n        const CREEP_RANGE: number = 3;\r\n\r\n        // Carry out the basics of a military creep before moving on to specific logic\r\n        if (MiliApi.checkMilitaryCreepBasics(creep, creepOptions)) {\r\n            return;\r\n        }\r\n\r\n        // Find a target for the creep\r\n        const target: Creep | Structure<StructureConstant> | undefined = MiliApi.getAttackTarget(\r\n            creep,\r\n            creepOptions,\r\n            CREEP_RANGE\r\n        );\r\n        const isMelee: boolean = false;\r\n        if (!target) {\r\n            return; // idle if no current target\r\n        }\r\n        // If we aren't in attack range, move towards the attack target\r\n        if (!MiliApi.isInAttackRange(creep, target.pos, isMelee)) {\r\n            creep.moveTo(target, DEFAULT_MOVE_OPTS);\r\n            return;\r\n        } else {\r\n            MiliApi.kiteEnemyCreep(creep);\r\n        }\r\n\r\n        // We are in attack range and healthy, attack the target\r\n        creep.attack(target);\r\n    }\r\n}\r\n","import RoomApi from \"../../Api/Room.Api\";\r\nimport MemoryApi from \"../../Api/Memory.Api\";\r\nimport CreepDomesticApi from \"Api/CreepDomestic.Api\";\r\nimport CreepApi from \"Api/Creep.Api\";\r\nimport CreepHelper from \"Helpers/CreepHelper\";\r\nimport CreepDomestic from \"Api/CreepDomestic.Api\";\r\nimport {\r\n    ERROR_WARN\r\n} from \"utils/constants\";\r\n\r\n// Manager for the miner creep role\r\nexport default class RemoteReserverCreepManager {\r\n\r\n    /**\r\n     * run the remote reserver creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n\r\n        if (creep.spawning) {\r\n            return; // Don't do anything until you've spawned\r\n        }\r\n\r\n        const targetRoom: Room = Game.rooms[creep.memory.targetRoom];\r\n\r\n        if (creep.memory.job === undefined) {\r\n            creep.memory.job = this.getNewClaimJob(creep, targetRoom);\r\n\r\n            if (creep.memory.job === undefined) {\r\n                return; // idle for a tick\r\n            }\r\n\r\n            // Set supplementary.moveTarget to container if one exists and isn't already taken\r\n            this.handleNewJob(creep);\r\n        }\r\n\r\n        if (creep.memory.working === true) {\r\n            CreepApi.doWork(creep, creep.memory.job);\r\n            return;\r\n        }\r\n\r\n        CreepApi.travelTo(creep, creep.memory.job);\r\n    }\r\n\r\n    /**\r\n     * Find a job for the creep\r\n     */\r\n    public static getNewClaimJob(creep: Creep, room: Room): ClaimPartJob | undefined {\r\n        const creepOptions: CreepOptionsCiv = creep.memory.options as CreepOptionsCiv;\r\n\r\n        if (creepOptions.claim) {\r\n            const claimJob = MemoryApi.getClaimJobs(room, (sjob: ClaimPartJob) => !sjob.isTaken);\r\n            if (claimJob.length > 0) {\r\n                return claimJob[0];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Handle initalizing a new job\r\n     */\r\n    public static handleNewJob(creep: Creep): void {\r\n        // set is taken to true\r\n    }\r\n}\r\n","import MiliApi from \"Api/CreepMili.Api\";\r\nimport {\r\n    DEFAULT_MOVE_OPTS\r\n} from \"utils/constants\";\r\n\r\n// Manager for the miner creep role\r\nexport default class ZealotCreepManager {\r\n\r\n    /**\r\n     * run the zealot creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n        if (creep.spawning) {\r\n            return;\r\n        }\r\n\r\n        const creepOptions: CreepOptionsMili = creep.memory.options as CreepOptionsMili;\r\n        const CREEP_RANGE: number = 1;\r\n\r\n        // Carry out the basics of a military creep before moving on to specific logic\r\n        if (MiliApi.checkMilitaryCreepBasics(creep, creepOptions)) {\r\n            return;\r\n        }\r\n\r\n        // Find a target for the creep\r\n        const target: Creep | Structure<StructureConstant> | undefined = MiliApi.getAttackTarget(creep, creepOptions, CREEP_RANGE);\r\n        const isMelee: boolean = true;\r\n        if (!target) {\r\n            return; // idle if no current target\r\n        }\r\n        // If we aren't in attack range, move towards the attack target\r\n        if (!MiliApi.isInAttackRange(creep, target.pos, isMelee)) {\r\n            creep.moveTo(target, DEFAULT_MOVE_OPTS);\r\n            return;\r\n        }\r\n\r\n        // We are in attack range and healthy, attack the target\r\n        creep.attack(target);\r\n    }\r\n}\r\n","import MemoryApi from \"../../Api/Memory.Api\";\r\nimport {\r\n    DEFAULT_MOVE_OPTS\r\n} from \"utils/constants\";\r\nimport MiliApi from \"Api/CreepMili.Api\";\r\n\r\n\r\n// Manager for the miner creep role\r\nexport default class MedicCreepManager {\r\n\r\n    /**\r\n     * run the medic creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n\r\n        const creepOptions: CreepOptionsMili = creep.memory.options as CreepOptionsMili;\r\n        const CREEP_RANGE: number = 3;\r\n\r\n        if (MiliApi.checkMilitaryCreepBasics(creep, creepOptions)) {\r\n            return;\r\n        }\r\n\r\n        // Get a healing target\r\n        const healingTarget: Creep | null = MiliApi.getHealingTarget(creep, creepOptions);\r\n\r\n        if (creepOptions.squadUUID) {\r\n            const squadMembers: Creep[] | null = MemoryApi.getCreepsInSquad(creep.room.name, creepOptions.squadUUID);\r\n            // No healing target, move towards closest squad member\r\n            if (!healingTarget && squadMembers) {\r\n                const closestSquadMember: Creep | null = creep.pos.findClosestByRange(squadMembers);\r\n                if (closestSquadMember && !creep.pos.isNearTo(closestSquadMember)) {\r\n                    creep.moveTo(closestSquadMember, DEFAULT_MOVE_OPTS);\r\n                }\r\n\r\n                MiliApi.fleeCreep(creep, creep.memory.homeRoom);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // If no healing target and we aren't in a squad, find closest friendly creep and move to them, flee otherwise\r\n        if (!healingTarget) {\r\n            const closestFriendlyCreep: Creep | null = creep.pos.findClosestByPath(FIND_MY_CREEPS);\r\n            if (closestFriendlyCreep) {\r\n                creep.moveTo(closestFriendlyCreep, DEFAULT_MOVE_OPTS);\r\n            }\r\n            return;\r\n        }\r\n        // If we are in range, heal it, otherwise move to it\r\n        if (creep.pos.inRangeTo(healingTarget.pos, CREEP_RANGE)) {\r\n            if (!creep.pos.isNearTo(healingTarget)) {\r\n                creep.moveTo(healingTarget)\r\n            }\r\n            if (creep.hits < creep.hitsMax) {\r\n                creep.heal(creep);  // heal self first if we need to\r\n            }\r\n            else {\r\n                creep.heal(healingTarget);\r\n            }\r\n        }\r\n        else {\r\n            creep.moveTo(healingTarget, DEFAULT_MOVE_OPTS);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    DEFAULT_MOVE_OPTS\r\n} from \"utils/constants\";\r\nimport MiliApi from \"Api/CreepMili.Api\";\r\n\r\n\r\n// Manager for the miner creep role\r\nexport default class StalkerCreepManager {\r\n\r\n    /**\r\n     * run the stalker creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n\r\n        const creepOptions: CreepOptionsMili = creep.memory.options as CreepOptionsMili;\r\n        const CREEP_RANGE: number = 3;\r\n\r\n        // Carry out the basics of a military creep before moving on to specific logic\r\n        if (MiliApi.checkMilitaryCreepBasics(creep, creepOptions)) {\r\n            return;\r\n        }\r\n\r\n        // Find a target for the creep\r\n        const target: Creep | Structure<StructureConstant> | undefined = MiliApi.getAttackTarget(creep, creepOptions, CREEP_RANGE);\r\n        const isMelee: boolean = false;\r\n        if (!target) {\r\n            return; // idle if no current target\r\n        }\r\n        // If we aren't in attack range, move towards the attack target\r\n        if (!MiliApi.isInAttackRange(creep, target.pos, isMelee)) {\r\n            creep.moveTo(target, DEFAULT_MOVE_OPTS);\r\n            return;\r\n        }\r\n        else {\r\n            MiliApi.kiteEnemyCreep(creep)\r\n        }\r\n\r\n        // We are in attack range and healthy, attack the target\r\n        creep.attack(target);\r\n    }\r\n}\r\n","import {\r\n    DEFAULT_MOVE_OPTS\r\n} from \"utils/constants\";\r\nimport MiliApi from \"Api/CreepMili.Api\";\r\n\r\n// Manager for the Domestic Defender Creep Role\r\nexport default class DomesticDefenderCreepManager {\r\n\r\n    /**\r\n     * run the domestic defender creep\r\n     * @param creep the creep we are running\r\n     */\r\n    public static runCreepRole(creep: Creep): void {\r\n\r\n        // This iteration of domestic defender is a melee creep that bee-lines to the enemy.\r\n        // Possible upgrade if this proves to be a weakness would be switching to ranged\r\n        // creep that seeks out the nearest rampart to the closest enemy creep and camps it\r\n\r\n        if (creep.spawning) {\r\n            return;\r\n        }\r\n        const creepOptions: CreepOptionsMili = creep.memory.options as CreepOptionsMili;\r\n        const CREEP_RANGE: number = 1;\r\n\r\n        // Carry out the basics of a military creep before moving on to specific logic\r\n        if (MiliApi.checkMilitaryCreepBasics(creep, creepOptions)) {\r\n            return;\r\n        }\r\n\r\n        // Find a target for the creep\r\n        const target: Creep | null = MiliApi.getDomesticDefenseAttackTarget(creep, creepOptions, CREEP_RANGE);\r\n        const isMelee: boolean = true;\r\n        if (!target) {\r\n            return; // idle if no current target\r\n        }\r\n        // If we aren't in attack range, move towards the attack target\r\n        if (!MiliApi.isInAttackRange(creep, target.pos, isMelee)) {\r\n            creep.moveTo(target, DEFAULT_MOVE_OPTS);\r\n            return;\r\n        }\r\n\r\n        // We are in attack range and healthy, attack the target\r\n        creep.attack(target);\r\n    }\r\n}\r\n","import MinerCreepManager from \"./Roles/MinerCreepManager\";\r\nimport UserException from \"utils/UserException\";\r\nimport HarvesterCreepManager from \"./Roles/HarvesterCreepManager\";\r\nimport WorkerCreepManager from \"./Roles/WorkerCreepManager\";\r\nimport LorryCreepManager from \"./Roles/LorryCreepManager\";\r\nimport PowerUpgraderCreepManager from \"./Roles/PowerUpgraderCreepManager\";\r\nimport RemoteMinerCreepManager from \"./Roles/RemoteMinerCreepManager\";\r\nimport RemoteHarvesterCreepManager from \"./Roles/RemoteHarvesterCreepManager\";\r\nimport RemoteColonizerCreepManager from \"./Roles/RemoteColonizerCreepManager\";\r\nimport ClaimerCreepManager from \"./Roles/ClaimerCreepManager\";\r\nimport RemoteDefenderCreepManager from \"./Roles/RemoteDefenderCreepManager\";\r\nimport RemoteReserverCreepManager from \"./Roles/RemoteReserverCreepManager\";\r\nimport ZealotCreepManager from \"./Roles/ZealotCreepManager\";\r\nimport MedicCreepManager from \"./Roles/MedicCreepManager\";\r\nimport StalkerCreepManager from \"./Roles/StalkerCreepManager\";\r\nimport DomesticDefenderCreepManager from \"./Roles/DomesticDefenderCreepManager\";\r\nimport {\r\n    ROLE_COLONIZER,\r\n    ROLE_REMOTE_MINER,\r\n    ROLE_REMOTE_RESERVER,\r\n    ROLE_LORRY,\r\n    ROLE_HARVESTER,\r\n    ROLE_MEDIC,\r\n    ROLE_MINER,\r\n    ROLE_POWER_UPGRADER,\r\n    ROLE_REMOTE_DEFENDER,\r\n    ROLE_REMOTE_HARVESTER,\r\n    ROLE_DOMESTIC_DEFENDER,\r\n    ROLE_CLAIMER,\r\n    ROLE_STALKER,\r\n    ROLE_WORKER,\r\n    ROLE_ZEALOT,\r\n    ERROR_ERROR\r\n} from \"utils/Constants\";\r\nimport UtilHelper from \"Helpers/UtilHelper\";\r\n\r\n// Call the creep manager for each role\r\nexport default class CreepManager {\r\n    /**\r\n     * loop over all creeps and call single creep manager for it\r\n     */\r\n    public static runCreepManager(): void {\r\n        for (const creep in Game.creeps) {\r\n            try {\r\n                this.runSingleCreepManager(Game.creeps[creep]);\r\n            } catch (e) {\r\n                UtilHelper.printError(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * run single creep manager\r\n     * @param creep the creep we are calling the manager for\r\n     */\r\n    public static runSingleCreepManager(creep: Creep): void {\r\n        const role = creep.memory.role;\r\n\r\n        // Call the correct helper function based on creep role\r\n        switch (role) {\r\n            case ROLE_MINER:\r\n                MinerCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_HARVESTER:\r\n                HarvesterCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_WORKER:\r\n                WorkerCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_LORRY:\r\n                LorryCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_POWER_UPGRADER:\r\n                PowerUpgraderCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_REMOTE_MINER:\r\n                RemoteMinerCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_REMOTE_HARVESTER:\r\n                RemoteHarvesterCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_COLONIZER:\r\n                RemoteColonizerCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_CLAIMER:\r\n                ClaimerCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_REMOTE_DEFENDER:\r\n                RemoteDefenderCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_REMOTE_RESERVER:\r\n                RemoteReserverCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_ZEALOT:\r\n                ZealotCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_MEDIC:\r\n                MedicCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_STALKER:\r\n                StalkerCreepManager.runCreepRole(creep);\r\n                break;\r\n            case ROLE_DOMESTIC_DEFENDER:\r\n                DomesticDefenderCreepManager.runCreepRole(creep);\r\n                break;\r\n            default:\r\n                throw new UserException(\r\n                    \"Invalid role for runSingleCreepManager.\",\r\n                    'The role \"' + role + '\" was invalid for running a creep role.',\r\n                    ERROR_ERROR\r\n                );\r\n        }\r\n    }\r\n}\r\n","import RoomHelper from \"Helpers/RoomHelper\";\r\n\r\nexport class ConsoleCommands {\r\n\r\n    public static init() {\r\n        global.removeFlags = this.removeFlags;\r\n        global.removeConstructionSites = this.removeConstructionSites;\r\n        global.killAllCreeps = this.killAllCreeps;\r\n        global.sendResource = this.sendResource;\r\n        global.displayRoomStatus = this.displayRoomStatus;\r\n    }\r\n    /**\r\n     * remove all construction sites from the room when called\r\n     * @param roomName the name of the room we want to remove construction sites from\r\n     * @param structureType [optional] the type of structure we want to remove the sites of\r\n     */\r\n    public static removeConstructionSites = function (roomName: string, structureType?: string): void {\r\n\r\n        Game.rooms[roomName].find(FIND_MY_CONSTRUCTION_SITES).forEach((site: ConstructionSite) => {\r\n            if (!structureType || site.structureType === structureType) {\r\n                site.remove();\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * remove all flags from the empire when called\r\n     * @param substr a name contained in flags we want to remove\r\n     */\r\n    public static removeFlags = function (substr: string): void {\r\n\r\n        _.forEach(Game.flags, (flag) => {\r\n            if (_.includes(flag.name, substr)) {\r\n                console.log(`removing flag ${flag.name} in ${flag.pos.roomName}`);\r\n                flag.remove();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * display status of specified room or all rooms if room specified\r\n     * @param room [optional] the room we want to display the stats for (default all rooms)\r\n     */\r\n    public static displayRoomStatus = function (roomName?: string): void {\r\n\r\n        // if no room was specified, display status for all\r\n        if (!roomName) {\r\n            _.forEach(Game.rooms, (currentRoom: Room) => {\r\n                console.log(`Room: ${currentRoom.name} -----------`);\r\n                console.log(`State: ${currentRoom.memory.roomState}`);\r\n                console.log(`Storage: ${RoomHelper.getStoredAmount(currentRoom.storage, RESOURCE_ENERGY)}`);\r\n                console.log('----------------------------');\r\n            });\r\n        }\r\n        else {\r\n            const room: Room = Game.rooms[roomName];\r\n            console.log(`Room: ${room.name} -----------`);\r\n            console.log(`State: ${room.memory.roomState}`);\r\n            if (room.storage) {\r\n                console.log(`Storage: ${RoomHelper.getStoredAmount(room.storage, RESOURCE_ENERGY)}`);\r\n            }\r\n            console.log('----------------------------');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * kill all creeps\r\n     * @param room [optional] the room we want to kill all creeps in (default all rooms)\r\n     */\r\n    public static killAllCreeps = function (room?: Room, role?: RoleConstant): void {\r\n\r\n        // if no room specified, kill all creeps\r\n        if (!room) {\r\n            _.forEach(Game.creeps, (creep) => {\r\n                if(!role || creep.memory.role === role){\r\n                    creep.suicide();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            _.forEach(Game.creeps, (creep) => {\r\n                if (creep.room.name === room.name) {\r\n                    if( !role || creep.memory.role === role){\r\n                        creep.suicide();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * send energy from one room to another\r\n     * @param sendingRoom the room sending resources\r\n     * @param receivingRoom the room receiving resources\r\n     * @param resourceType the type of resource we want to transfer\r\n     * @param amount the amount of the resource we want to send\r\n     */\r\n    public static sendResource = function (sendingRoom: Room, receivingRoom: Room, resourceType: ResourceConstant, amount: number): void {\r\n        // check if terminal exists in the sending room\r\n\r\n        // check if we have enough energy to send the resource\r\n\r\n        // send the resources\r\n    }\r\n}\r\n","/*\r\n  Kung Fu Klan's Screeps Code\r\n  Written and maintained by -\r\n    Jakesboy2\r\n    UhmBrock\r\n\r\n  Starting Jan 2019\r\n*/\r\n\r\n// TODO\r\n/**\r\n *  ~~~ TO DO LIST ~~~\r\n *\r\n *\r\n * ~~~~~~~~~~~~~~~~~~\r\n * ~~ NEW FEATURES ~~\r\n * ~~~~~~~~~~~~~~~~~~\r\n *\r\n * 2. Complete Remote Miner\r\n * We want the remote miner to go to a source and mine it, build a container and his feet, and build/repair it during his down time.\r\n * We should also give remote miners 7 work parts imo. 6 wasn't enough to keep the container repaired and it was slow on building it\r\n * It is an extra 100 energy per creep cycle but I think its worth it to keep the remote rooms going smoother\r\n *\r\n * 3. Complete Remote Harvester\r\n * They are so simple, just get a container or pick up job in the remote room\r\n * Should be straight forward, bring the energy back and based on options, do harvester jobs with it\r\n *\r\n * 4. Complete Remote Reserver\r\n * Find reserve job in remote room and reserve it until death, basically a miner for the controller\r\n * We need to find a way to get the rooms that need to be reserver\r\n * Probably just put a value in room memory and simulate its down ticks like we did last code base, it worked really well\r\n *\r\n * 5. Complete Claimer\r\n * Find a claim job in a claim room and claim it\r\n * We need to find a way to get the rooms that need to be claimed (should be easier than finding ones that need to be reserved)\r\n *\r\n * 6. Complete Colonizer\r\n * Goes to remote room, mines for itself, builds the spawn, pumps energy into the spawn or upgrades until death\r\n *\r\n * Something to keep in mind on all these remote creeps, we need to make sure their travelTo calls get off exit (should just add to\r\n * all travel to methods, there are cases where we will send domestic creeps places as well)\r\n *\r\n * 7. Consider preferring closer jobs to further ones that are on the same level\r\n * Currently harvesters are kinda going from place to place when they could be filling up multiple on the way\r\n * to other extensions\r\n *\r\n * 8. Rework room state seige\r\n * Possibly just remove it and let defcon handle all seige related stuff\r\n * It doesn't allow us to hold the actual progress of the room during a seige, we could be\r\n * on power upgraders, or at a point of intro, better to let defcon make the changes it needs to\r\n * make to properly defend a room\r\n *\r\n * 9. Have some creeps possibly consider tombstones so we can pick up energy from invaders or allies\r\n * Def want this for remote harvesters, but possibly for workers too\r\n *\r\n * 10. Create a thief remote class that goes into enemy remote rooms and takes dropped energy or energy from the container\r\n * Consider using multiple of these flags to spawn multiple thieves, or consider using multiple of them to create a queue\r\n * of remote rooms for them to rotate to\r\n * Flag should be considered \"done\" after x amount of creep lives in case the enemies spawn defenders we don't wanna keep wasting energy\r\n *\r\n * 11. Create harrasser mili class that hit and runs enemy remote rooms and moves on to the next room in the queue before enemy creeps can respond to the threat\r\n * Can also have a flag that brings the harrasseer in with a thief as a squad to help defend it\r\n *\r\n * 12. Create tower drainer mili class\r\n * Thoughts to be determined\r\n *\r\n * 13. Consider spawning extra workers if X amount of construction sites appear (to assist with new level construction spikes)\r\n * Also make the system that spawns more workers in the case of remote rooms more reliable and cleanly coded (combine these systems preferrably)\r\n * into a function like getExtraWorkerAmount: number and add to the base amount of workers for that room state\r\n *\r\n * 14. Expand tower targeting to target non-combat creeps if no other targets are found, we might as well snipe out scouts\r\n * Still do not target solo healers (maybe consider it if we calculate our damage (we have a function for that, thanks bonzai)\r\n * and find that we can out damage the amount of healing on a creep and those around it)\r\n *\r\n *\r\n * ~~~~~~~~~~~~~~~~\r\n * ~~ BUG FIXES ~~\r\n * ~~~~~~~~~~~~~~~~\r\n *\r\n * 1. Harvesters fill themselves on storage and put it right back again, same issue as last code base, and they were doing it while energy was in the containers\r\n * Need to expand rules for when they should use storage in their get energy jobs method\r\n *\r\n * 3. Ramparts are being left to decay as their job is too low on the totem pole\r\n * Need to raise them up, the idea from Brock was structures under 25% get precedence over construction\r\n * Good idea in general and easy to do with how our jobs are structured\r\n *\r\n * 4. Rework how we are getting military limits to fit how the other ones work\r\n *    We need a way to make sure a flag only effects the limits while its active,\r\n *    so we need to get all active attack flags (should only be 1 at a time tho)\r\n *    and set the limits accordingly all in the same method then return that to do the adjusting\r\n *\r\n * 5. Zealot spawned with no target room, need to figure out why getTargetRoom for creep memory set up is going wrong\r\n *\r\n * 6. Option flags throw an error regardless if they are processed or not\r\n * Place an option flag to recreate\r\n *\r\n * 7. Stimulate flags don't process at all\r\n * Place a stimulate flag to recreate\r\n *\r\n * 8. Towers do not fire the last shot to kill invaders, only seen this happen once\r\n * To recreate, spawn a big boosted invader and the tower will stop on the final attack\r\n * and the defcon level will go down. This is most likely related to how we are getting the defcon level\r\n * because towers won't even attempt to target anything if the defcon level is 0\r\n * So start by looking in how we're getting defcon and make sure we keep it that level until every creep is dead\r\n *\r\n * 8. Even worse, just had an invasion and my targets didn't even fire once. Either defcon isn't getting set properly or they aren't finding their target properly.\r\n * Not sure how to recreate, as they seem to respond to invasions, but it happens frequently enough where i lost 200 creep parts in last 24 hours\r\n */\r\n\r\nimport EmpireManager from \"Managers/EmpireManager\";\r\nimport MemoryManager from \"Managers/MemoryManagement\";\r\nimport RoomManager from \"Managers/RoomManager\";\r\nimport SpawnManager from \"Managers/SpawnManager\";\r\nimport { ErrorMapper } from \"utils/ErrorMapper\";\r\nimport UtilHelper from \"Helpers/UtilHelper\";\r\nimport RoomVisualManager from \"Managers/RoomVisuals/RoomVisualManager\";\r\nimport {\r\n    ROOM_OVERLAY_ON,\r\n    CREEP_MANAGER_BUCKET_LIMIT,\r\n    SPAWN_MANAGER_BUCKET_LIMIT,\r\n    EMPIRE_MANAGER_BUCKET_LIMIT,\r\n    ROOM_MANAGER_BUCKET_LIMIT,\r\n    MEMORY_MANAGER_BUCKET_LIMIT\r\n} from \"utils/config\";\r\nimport CreepManager from \"Managers/CreepManager\";\r\nimport { ConsoleCommands } from \"Helpers/ConsoleCommands\";\r\nimport RoomHelper from \"Helpers/RoomHelper\";\r\n\r\nexport const loop = ErrorMapper.wrapLoop(() => {\r\n    // Init console commands\r\n    ConsoleCommands.init();\r\n\r\n    if (RoomHelper.excecuteEveryTicks(1000)) {\r\n        ConsoleCommands.init();\r\n    }\r\n\r\n    // run the empire\r\n    if (!Game.cpu[\"bucket\"] || Game.cpu[\"bucket\"] > EMPIRE_MANAGER_BUCKET_LIMIT) {\r\n        try {\r\n            EmpireManager.runEmpireManager();\r\n        } catch (e) {\r\n            UtilHelper.printError(e);\r\n        }\r\n    }\r\n\r\n    // run rooms\r\n    if (!Game.cpu[\"bucket\"] || Game.cpu[\"bucket\"] > ROOM_MANAGER_BUCKET_LIMIT) {\r\n        try {\r\n            RoomManager.runRoomManager();\r\n        } catch (e) {\r\n            UtilHelper.printError(e);\r\n        }\r\n    }\r\n\r\n    // run spawning\r\n    if (!Game.cpu[\"bucket\"] || Game.cpu[\"bucket\"] > SPAWN_MANAGER_BUCKET_LIMIT) {\r\n        try {\r\n            SpawnManager.runSpawnManager();\r\n        } catch (e) {\r\n            UtilHelper.printError(e);\r\n        }\r\n    }\r\n\r\n    // run creeps\r\n    if (!Game.cpu[\"bucket\"] || Game.cpu[\"bucket\"] > CREEP_MANAGER_BUCKET_LIMIT) {\r\n        try {\r\n            CreepManager.runCreepManager();\r\n        } catch (e) {\r\n            UtilHelper.printError(e);\r\n        }\r\n    }\r\n\r\n    // clean up memory\r\n    if (!Game.cpu[\"bucket\"] || Game.cpu[\"bucket\"] > MEMORY_MANAGER_BUCKET_LIMIT) {\r\n        try {\r\n            MemoryManager.runMemoryManager();\r\n        } catch (e) {\r\n            UtilHelper.printError(e);\r\n        }\r\n    }\r\n\r\n    // Display room visuals if we have a fat enough bucket and config option allows it\r\n    if (!Game.cpu[\"bucket\"] || (Game.cpu[\"bucket\"] > 2000 && ROOM_OVERLAY_ON)) {\r\n        try {\r\n            RoomVisualManager.runRoomVisualManager();\r\n        } catch (e) {\r\n            UtilHelper.printError(e);\r\n        }\r\n    }\r\n    // -------- end managers --------\r\n});\r\n"],"names":["ERROR_ERROR","ERROR_WARN","ROOM_STATE_INTRO","ROOM_STATE_BEGINNER","ROOM_STATE_INTER","ROOM_STATE_ADVANCED","ROOM_STATE_UPGRADER","ROOM_STATE_SEIGE","ROOM_STATE_STIMULATE","ROOM_STATE_NUKE_INBOUND","ROLE_MINER","ROLE_HARVESTER","ROLE_WORKER","ROLE_POWER_UPGRADER","ROLE_LORRY","ROLE_REMOTE_MINER","ROLE_REMOTE_HARVESTER","ROLE_REMOTE_RESERVER","ROLE_CLAIMER","ROLE_COLONIZER","ZEALOT_SOLO","STALKER_SOLO","STANDARD_SQUAD","OVERRIDE_D_ROOM_FLAG","WALL_LIMIT","ERROR_FATAL","ERROR_INFO","COLORS","DEFAULT_MOVE_OPTS","MemoryHelperRoom","EmpireApi","ArraySet","require$$0","quickSort","require$$1","base64VLQ","SourceMapConsumer","RoomVisualHelper","MiliApi","RoomVisualManager"],"mappings":"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"};